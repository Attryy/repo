{"linkedin":[{"full_name":"Christian Berkhoff Dossow","linkedin_url":"http://www.linkedin.com/in/cberkhoff","headline":"Software Development Engineer II at Amazon","industry":"Information Technology and Services","location":"Greater Seattle Area","education":[{"name":"Universidad de Chile","major":"en Computación","summary":null},{"name":"Colegio Alemán de Temuco","major":null,"summary":null}],"experience":[{"title":"Software Development Engineer II","description":null,"organization":"Amazon"},{"title":"Software Development Engineer","description":null,"organization":"Amazon"},{"title":"Co-Founder & Dev","description":"Co-fundador, desarrollador Android y consultor de tecnología.","organization":"Significant App"},{"title":"Jefe de Proyecto y Desarrollador Senior","description":"En lo referente a la dirección de proyectos:\n • Responsable de liderar equipos de desarrolladores y diseñadores utilizando un enfoque basado en metodologías ágiles, maximizando el rendimiento individual y grupal.\n • Entender las problemáticas de los clientes proponiendo soluciones y entregándoles visibilidad durante la implementación.\n • Definición de proyectos y estimaciones de esfuerzo y costo.\n • Diseño de arquitecturas de software, especificaciones técnicas y coaching a miembros de la organización.\n • Gestión de los proyectos validando su avance, trabas y metas, inclusive con proveedores de tecnología en el extranjero (Suecia).\n • Tareas administrativas relacionadas con la cobranza, gestión del talento y reportes para la gerencia.\n\n Adicionalmente y de forma simultánea se realiza desarrollo de aplicaciones Android y servicios web RESTful utilizando JEE u otras tecnologías.","organization":"Acid"},{"title":"Ingeniero Analista","description":"Creación de una plataforma de pruebas automatizada para la validación del funcionamiento del intérprete VoiceXml desarrollado por Sixbell. Se utilizaron una serie de pruebas desarrolladas por la W3C.\n\n En base a lo aprendido se analizaron las fortalezas y debilidades que ofrece la plataforma y se sugirieron diferentes vías para mejorarla.","organization":"Sixbell"},{"title":"Ingeniero Analista","description":"Se desarrolló, en conjunto con un equipo de 6 ingenieros, una herramienta web que automatiza el proceso de Pricing para góndolas en supermercados. Para esto se requirieron de sólidos conocimientos matemáticos y de economía y se utilizaron novedosas tecnologías web (GWT) combinándolas con la herramienta de estadística Weka.","organization":"Penta Analytics"},{"title":"Ingeniero Analista","description":"Investigación y desarrollo sobre la plataforma BUG (buglabs.net) orientada al desarrollo de prototipos de tecnologías móviles.\n\n Elaboración de predictores de ventas para NIC Chile.","organization":"NIC Chile"},{"title":"Ingeniero Analista","description":"Desarrollo de Aplicaciones para Capturadoras (Dispositivos Móviles) Symbol sobre la plataforma Microsoft .Net. Se extendió una aplicación para acelerar el proceso de colas en Easy y para manejo de inventario en Colún.\n\n Además se implementaron unos cuantos servicios web simples.","organization":"STG"}],"interests":[],"summary":"Jefe de Proyectos TI y Desarrollador de Software trilingüe con más de tres años de experiencia. Profesional creativo, metódico y confiable que ha demostrado excepcionales capacidades de análisis de problemas y la proactividad para resolverlos estratégicamente, manteniendo el foco en lo importante. Con fuertes bases técnicas, graduado con Distinción Máxima y también premiado como mejor alumno de su promoción en la Universidad de Chile. Excelentes habilidades de trabajo en equipo y experiencia liderando y motivando grupos de desarrolladores.","projects":[],"publications":[],"skills":["Software Design","REST","Java","Maven","Hibernate","Clojure","Scala","Ruby","Linux","Ruby on Rails","CakePHP","C++","Refactoring","TDD","C#"],"websites":[],"linkedin":213964086}
,{"full_name":"Brian Chang","linkedin_url":"http://www.linkedin.com/in/bchang85","headline":"Senior Software Development Engineer at Disney","industry":"Computer Software","location":"Seattle, Washington","education":[],"experience":[],"interests":[],"summary":"Pragmatic, passionate, and positive are the perfect words to describe my persona.\n\n I am a long-term thinker who is hard-nosed about doing the proper thing. I treasure craftsmanship in the systems I build and interact with. I have no qualms in admitting mistakes and I love learning.\n\n Not only do I strive to be better today than I was yesterday, I want to motivate you to do the same. I want to share my strategies for producing quality results. I want to learn from your experiences, and I want you to learn from mine.\n\n Want to learn more about me? Think I can provide you value, or vice versa? Contact me.","projects":[{"title":null, "description":null},{"title":null, "description":null}],"publications":[{"summary":null, "title":null},{"summary":null,"title":null}],"skills":[],"websites":[],"linkedin":213948881}
], "github":[{"match":1,"linkedin_id":213964086,"gid":17517,"git_name":"Christian Berkhoff","git_login":"cberkhoff","git_location":"Seattle, WA","git_company":"Amazon LLC","git_org":[],"git_email":"christian.berkhoff@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/cberkhoff","bio":null,"repos":[{"name":"howishell","url":"https://github.com/imella/howishell","description":"How I shell NASA Project","lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"buho","url":"https://github.com/cberkhoff/buho","description":null,"lang":[],"readme":"# buho","isFork":null},{"name":"mine.js","url":"https://github.com/cberkhoff/mine.js","description":"A simple game concept written in coffeescript","lang":["CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"winlepp","url":"https://github.com/cberkhoff/winlepp","description":"Winlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","lang":["Prolog","C++"],"readme":"winlepp\n=======\n\nWinlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","isFork":null},{"name":"android-location-picker","url":"https://github.com/cberkhoff/android-location-picker","description":"Dynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.","lang":["Groovy","Shell","Java"],"readme":"android-location-picker\n=======================\n\nDynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.\n","isFork":null},{"name":"facebook-android-sdk","url":"https://github.com/cberkhoff/facebook-android-sdk","description":"Facebook SDK for Android","lang":["Groovy","Java","Shell"],"readme":null,"isFork":true},{"name":"blackjack","url":"https://github.com/cberkhoff/blackjack","description":"Clojure example for an introductory worshop. It's the classic carioca card game.","lang":["Clojure"],"readme":"Blackjack\n=========\n\nClojure example for an introductory worshop. It's a simplification of the classic Blackjack card game.\n\nFor a game explanation go to [this links](http://www.pagat.com/banking/blackjack.html).\n","isFork":null},{"name":"hunchator","url":"https://github.com/imella/hunchator","description":null,"lang":["Ruby","CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"team11","url":"https://github.com/spaceappchile/team11","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"schnaps","url":"https://github.com/imella/schnaps","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# Schnaps\n\nSchaps, what could I drink tonight?","isFork":null},{"name":"euler","url":"https://github.com/cberkhoff/euler","description":"Solution to ProjectEuler problems using Java","lang":["Java"],"readme":"euler\n=====\n\nSolution to ProjectEuler problems using Java\n","isFork":null},{"name":"cc51s","url":"https://github.com/cberkhoff/cc51s","description":"A simple game written in Java using RMI for the CC51S course","lang":["Java"],"readme":"cc51s\n=====\n\nA simple game written in Java using RMI for the CC51S course","isFork":null},{"name":"UrlImageViewHelper","url":"https://github.com/cberkhoff/UrlImageViewHelper","description":"Android library that sets an ImageView's contents from a url. Manages image downloading, caching, and makes your coffee too.","lang":["Groovy","Java"],"readme":"## UrlImageViewHelper\nUrlImageViewHelper will fill an ImageView with an image that is found at a URL.\n\n### Sample Project\n\nThe sample will do a Google Image Search and load/show the results asynchronously.\n\n![](https://raw.github.com/koush/UrlImageViewHelper/master/helper2.png)\n\n### Download\n\nDownload [the latest JAR](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.koushikdutta.urlimageviewhelper&a=urlimageviewhelper&v=LATEST\n) or grab via Maven:\n\n```xml\n<dependency>\n    <groupId>com.koushikdutta.urlimageviewhelper</groupId>\n    <artifactId>urlimageviewhelper</artifactId>\n    <version>(insert latest version)</version>\n</dependency>\n```\n\n### Usage\n\nUrlImageViewHelper will automatically download and manage all the web images and ImageViews.\nDuplicate urls will not be loaded into memory twice. Bitmap memory is managed by using\na weak reference hash table, so as soon as the image is no longer used by you,\nit will be garbage collected automatically.\n\nUsage is simple:\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\");\n```\n\n\nWant a placeholder image while it is being downloaded?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", R.drawable.placeholder);\n```\n\n\nDon't want to use a placeholder resource, but a drawable instead?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", drawable);\n```\n\n\nWhat if you want to preload images for snazzy fast loading?\n\n```java\nUrlImageViewHelper.loadUrlDrawable(context, \"http://example.com/image.png\");\n```\n\n\nWhat if you only want to cache the images for a minute?\n\n```java\n// Note that the 3rd argument \"null\" is an optional interstitial\n// placeholder image.\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", null, 60000);\n```\n\nUrlImageViewHelper is pretty smart. It can even load the photo for an Android contact\nif given a Contact Content Provider URI.\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"content://com.android.contacts/contacts/1115\", R.drawable.dummy_contact_photo);\n```\n\n### FAQ\n\n**Does it work in list adapters when views are reused? (convertView)**\n\nYes.\n\n\n### Featured Implementations\n\n * [ROM Manager](https://play.google.com/store/apps/details?id=com.koushikdutta.rommanager&hl=en)\n * [Carbon](https://play.google.com/store/apps/details?id=com.koushikdutta.backup&hl=en)\n * Let me know if you use this library, so I can add it to the list!\n","isFork":true},{"name":"ActionBarSherlock","url":"https://github.com/cberkhoff/ActionBarSherlock","description":"Library for implementing the action bar design pattern using the native action bar on Android 4.0+ and a custom implementation on pre-4.0 through a single API and theme.","lang":[],"readme":"ActionBarSherlock\n=================\n\nActionBarSherlock is an standalone library designed to facilitate the use of\nthe action bar design pattern across all versions of Android through a single\nAPI.\n\nThe library will automatically use the [native ActionBar][2] implementation on\nAndroid 4.0 or later. For previous versions which do not include ActionBar, a\ncustom action bar implementation based on the sources of Ice Cream Sandwich\nwill automatically be wrapped around the layout. This allows you to easily\ndevelop an application with an action bar for every version of Android from 2.x\nand up.\n\n**See http://actionbarsherlock.com for more information.**\n\n![Example Image][3]\n\nTry out the sample applications on the Android Market: [Feature Demos][4],\n[Fragments][5], and [RoboGuice][6].\n\nContinuous integration is provided by [Travis CI][7].\n\n\n\nDeveloped By\n============\n\n* Jake Wharton - <jakewharton@gmail.com>\n\n\n\nLicense\n=======\n\n    Copyright 2012 Jake Wharton\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n\n\n [1]: http://android-developers.blogspot.com/2011/03/fragments-for-all.html\n [2]: http://developer.android.com/guide/topics/ui/actionbar.html\n [3]: http://actionbarsherlock.com/static/feature.png\n [4]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\n [5]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.fragments\n [6]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.roboguice\n [7]: https://travis-ci.org/JakeWharton/ActionBarSherlock\n","isFork":true},{"name":"emacs-clojure-vagrant","url":"https://github.com/cberkhoff/emacs-clojure-vagrant","description":"A simple dev environment for clojure.","lang":["Ruby","Shell","Emacs Lisp"],"readme":"Vagrant setup for Clojure\n=========================\n\nStrated as a simple fork from [https://github.com/Seajure/emacs-clojure-vagrant](Seajure) but ended being a completedly different thing.\n\nSetup\n=====\n   - Install Vagrant following the instructions [http://vagrantup.com/docs/getting-started/index.html](Vagrant Getting Started).\n   - Download this\n   - `vagrant up` inside the directory containing this readme\n\nUsage\n-----\n\nContents\n--------\n- Java\n- Git\n- Leiningen\n- Emacs\n- Postgresql","isFork":true},{"name":"node-vagrant","url":"https://github.com/cberkhoff/node-vagrant","description":"A quick and dirty node setup using vagrant and chef","lang":["Ruby"],"readme":null,"isFork":true},{"name":"express-lingua","url":"https://github.com/cberkhoff/express-lingua","description":"A i18n middleware for the Express.js framework.","lang":["JavaScript"],"readme":"# Lingua and Lengua\n\n[Lingua](https://github.com/akoenig/express-lingua) is a middleware for the Express.js framework that helps you to internationalise your webapp easily. It determines the language of the user agent and pushes the i18n resources to your views.\n\nLengua is a fork form Lingua which introduces some features.\n\n## Installation\n\n    $ npm install lengua\n\n## Show me the code!\n\nTo translate somenthig (Coffeekup)\n\n<pre>\n@t 'Name'\n@t 'navigation.german'\n</pre>\n\nTo get the current country code, language and locale respectively\n\n<pre>\n@currentCountry\n@currentCountryLanguage\n@currentLocale\n</pre>\n\n## Added features\n\n### For the common mortal\n\n1. User locale stored in session instead of cookie\n\n2. Not case sensitive\n\n3. Country Code\n\n4. If the current locale (e.g. en-US) doesnt define a key, Lengua does a lookup in the global locale (e.g. en).\n\n### Other Stuff\n\n1. Tests :)\n\n## TODO\n\n1. Locale storage as strategy (Cookie, Session, Azure, etc).\n\n2. Cache update (when all fallbacks fail).\n\n## Dev\n\n### Tests\n\n<pre>\nnpm install jasmine-node\ncd spec/\njasmine-node.cmd .\\guru.spec.js\njasmine-node.cmd .\\lingua.spec.js\n</pre>\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\nCopyright (c) 2011,\n \n[André König](http://lochkartenstanzer.de) ([Google+](http://profile.lochkartenstanzer.de)) (andre.koenig -[at]- gmail [*dot*] com)\n\n[Christian Berkhoff](#) (christian.berkhoff - [at] - gmail [#dot#] com)\n","isFork":true},{"name":"paperclipdb","url":"https://github.com/cberkhoff/paperclipdb","description":"Database storage support for paperclip file attachment plugin.","lang":["Ruby"],"readme":null,"isFork":true}]}
,{"match":1,"linkedin_id":213954281,"gid":15986,"git_name":"Erin Krengel","git_login":"ekrengel","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/ekrengel","bio":null,"repos":[{"name":"introk8s","url":"https://github.com/ekrengel/introk8s","description":"ACT-W Introduction to K8s","lang":["Dockerfile","Go"],"readme":"# ACT-W Introduction to K8s\n\nThis workshop was developed for ACT-W Seattle 2018.\n\n## Pre-Workshop Installations\n\nThere is a number of open-source software you will need to install to follow along with the workshop.\n\n### Minikube\n\nMinikube is a tool that allows you to run Kubernetes locally on your computer.\n\nYou can find install instructions for minikube [here](https://github.com/kubernetes/minikube/releases). If you use homebrew the easiest thing to do is run this command:\n\n```bash\nbrew cask install minikube\n```\n\nYou can verify you have installed minikube by running:\n\n```bash\nminikube version\n```\n\n### Kubectl\n\nKubectl is the command-line tool for interfacing with Kubernetes. It allows you to deploy and manage your apps.\n\nInstallation instructions can be found [here](https://kubernetes.io/docs/tasks/tools/install-kubectl/). Once again our recommendation is to use homebrew for this:\n\n```bash\nbrew install kubernetes-cli\n```\n\nYou can verify you have installed kubectl by running:\n\n```bash\nkubectl version\n```\n\n## Getting Started\n\n1. Start your minikube by running:\n\n    ```bash\n    minikube start\n    ```\n\n2. Make sure your context is set to minikube.\n\n    ```bash\n    kubectl config get-contexts\n    ```\n\n    `minikube` should have a star next to it when you run this command. If it doesn't, you can set minikube to your context by running:\n\n    ```bash\n    kubectl config use-context minikube\n    ```","isFork":null},{"name":"kubernetes","url":"https://github.com/ekrengel/kubernetes","description":"Production-Grade Container Scheduling and Management","lang":["Python","Makefile","Shell","C","Go","Ruby","Nginx","SaltStack","PowerShell","Protocol Buffer","HTML"],"readme":"# Kubernetes\n\n[![Submit Queue Widget]][Submit Queue] [![GoDoc Widget]][GoDoc]\n\n<img src=\"https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png\" width=\"100\">\n\n----\n\nKubernetes is an open source system for managing [containerized applications]\nacross multiple hosts, providing basic mechanisms for deployment, maintenance,\nand scaling of applications.\n\nKubernetes builds upon a decade and a half of experience at Google running\nproduction workloads at scale using a system called [Borg],\ncombined with best-of-breed ideas and practices from the community.\n\nKubernetes is hosted by the Cloud Native Computing Foundation ([CNCF]).\nIf you are a company that wants to help shape the evolution of\ntechnologies that are container-packaged, dynamically-scheduled\nand microservices-oriented, consider joining the CNCF.\nFor details about who's involved and how Kubernetes plays a role,\nread the CNCF [announcement].\n\n----\n\n## To start using Kubernetes\n\nSee our documentation on [kubernetes.io].\n\nTry our [interactive tutorial].\n\nTake a free course on [Scalable Microservices with Kubernetes].\n\n## To start developing Kubernetes\n\nThe [community repository] hosts all information about\nbuilding Kubernetes from source, how to contribute code\nand documentation, who to contact about what, etc.\n\nIf you want to build Kubernetes right away there are two options:\n\n##### You have a working [Go environment].\n\n```\n$ go get -d k8s.io/kubernetes\n$ cd $GOPATH/src/k8s.io/kubernetes\n$ make\n```\n\n##### You have a working [Docker environment].\n\n```\n$ git clone https://github.com/kubernetes/kubernetes\n$ cd kubernetes\n$ make quick-release\n```\n\nIf you are less impatient, head over to the [developer's documentation].\n\n## Support\n\nIf you need support, start with the [troubleshooting guide]\nand work your way through the process that we've outlined.\n\nThat said, if you have questions, reach out to us\n[one way or another][communication].\n\n[announcement]: https://cncf.io/news/announcement/2015/07/new-cloud-native-computing-foundation-drive-alignment-among-container\n[Borg]: https://research.google.com/pubs/pub43438.html\n[CNCF]: https://www.cncf.io/about\n[communication]: https://github.com/kubernetes/community/blob/master/communication.md\n[community repository]: https://github.com/kubernetes/community\n[containerized applications]: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/\n[developer's documentation]: https://github.com/kubernetes/community/tree/master/contributors/devel\n[Docker environment]: https://docs.docker.com/engine\n[Go environment]: https://golang.org/doc/install\n[GoDoc]: https://godoc.org/k8s.io/kubernetes\n[GoDoc Widget]: https://godoc.org/k8s.io/kubernetes?status.svg\n[interactive tutorial]: http://kubernetes.io/docs/tutorials/kubernetes-basics\n[kubernetes.io]: http://kubernetes.io\n[Scalable Microservices with Kubernetes]: https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615\n[Submit Queue]: http://submit-queue.k8s.io/#/ci\n[Submit Queue Widget]: http://submit-queue.k8s.io/health.svg?v=1\n[troubleshooting guide]: https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/ \n\n[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/README.md?pixel)]()\n","isFork":true},{"name":"corvus","url":"https://github.com/pavmohan/corvus","description":"Track and share your favorite cheeses","lang":["Python","CSS","JavaScript","C","HTML"],"readme":"# Corvus\nTrack and share your favorite cheeses","isFork":null},{"name":"cs290-assignment4-part1","url":"https://github.com/ekrengel/cs290-assignment4-part1","description":"Basic PHP Assignment","lang":["PHP"],"readme":null,"isFork":null},{"name":"cs290-assignment1","url":"https://github.com/ekrengel/cs290-assignment1","description":"CS290 Assignment 1 Into to Git","lang":[],"readme":null,"isFork":null},{"name":"271-Assignments","url":"https://github.com/ekrengel/271-Assignments","description":"Assembly Language Assignments","lang":["Assembly"],"readme":null,"isFork":null},{"name":"cs290-assignment3","url":"https://github.com/ekrengel/cs290-assignment3","description":"Basic JavaScript Assignment","lang":["JavaScript","CSS","HTML"],"readme":"Basic JavaScript Assignment\n===========================\n\nThis part of the assignment will cover fundamental JavaScript topics outside the context of web development. Fully automated tests will be provided for all assignment components. These are a tool to help you assess if your code is working as intended. Passing the tests does not guarantee a good grade nor does failing them guarantee a poor grade. The grade will be based on the extent to which you meet the requirements for code in this class and the extent to which the requirements in the source files are met.\n\nWork Log\n--------\nIn order to be eligible to receive an A you must submit a work log. It will not contribute points directly to the assignment, but without it the maximum grade you will be eligible for is an 89%. The purpose is to allow me to tune the difficulty of assignments to ensure that you are getting the amount of practice needed without spending too much time on any given topic.\n\nThe format is as follows:\n\n```\nStart: Wed, 7 Jan 2015 21:42:26 -0800\nEnd: Wed, 7 Jan 2015 22:42:26 -0800\nTasks: During this period I drew a diagram of the classes I will be using to implement the message passing portion of the assignment.\n\nStart: Fri, 9 Jan 2015 18:00:00 -0800\nEnd: Fri, 9 Jan 2015 20:42:26 -0800\nTasks: During this period I debugged for 1 hour to find a type and implement the send function of the cleint.\n```\n\nYou can get most of this information from the git log if you run:\n`git log --pretty=format:\"Start: %nEnd: %ad %nTasks: %s\" --date=rfc`\nYou just need to fill in the Start: time. Use the same date format. I would suggest copying and pasting the End time and just editing the time (or day if you went through midnight in a work session).\n\nHave one entry per work session.\n\nPut this log in log.txt.\n\nInstructions\n------------\n- Create a new repository called cs290-assignment3 at the location you specified in week 1.\n- Clone this repository and copy all of the contents to that repository\n  - The directory structure should look like this:\n    - cs290-assignment3\n      - log.txt\n      - qunit_runner.html\n      - qunit\n      - src\n      - tests\n- **You are only allowed to modify the files in the src directory.**\n  - There are some additional files, those are just a hook for us to eventually support a better testing system.\n  - The comments in the files in the src directory describe the intended behavior of the functions that you need to fill in. Please ask on the discussion boards if you are confused about the intended functionality of any function.\n  - Within those files, your code should go between the `//your code here` comments.\n  - You should replace `return undefined;` with appropriate return statements.\n- Add **cs290osu** as a collaborator. This will be an account that myself and the TAs share to access your repos.\n- To test your code open the `qunit_runner.html` web page locally. Along with the red errors check for statements saying something like `Expected 4 assertions, but 2 were run`. This means that the test had to abort early due to a error it could not recover from. That means there are two additional tests that are not even getting run.\n  - Given the nature of automated tests, it is easy to see what the expected values are and simply hard code those returns. If you do this for any portion of the assignment, you will get a 0 for the whole assignment. (For example, variableModification should work for any value, not just 42, but we are only testing the value 42. If you hardcode the values `47`, `'42'` and `'42foo'` that is a violation of this rule. )\n","isFork":null},{"name":"donneler.github.io","url":"https://github.com/ekrengel/donneler.github.io","description":null,"lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"cs290-assignment3p2","url":"https://github.com/ekrengel/cs290-assignment3p2","description":"Assignment 3 Part 2: Adding AJAX and HTML","lang":["JavaScript","HTML"],"readme":null,"isFork":null},{"name":"cs290-assignment2","url":"https://github.com/ekrengel/cs290-assignment2","description":"HTML and CSS","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CS161","url":"https://github.com/ekrengel/CS161","description":"Intro to Programming in C++","lang":["C++"],"readme":"CS161\n=====\n\nIntro to Programming in C++\n","isFork":null}]},{"match":1,"linkedin_id":213967371,"gid":25,"git_name":"Tomek Drabas","git_login":"drabastomek","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":"drabas.t@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/drabastomek","bio":null,"repos":[{"name":"learningPySpark","url":"https://github.com/drabastomek/learningPySpark","description":"Code base for the Learning PySpark book (in preparation)","lang":["Jupyter Notebook","Python","Shell"],"readme":"# Learning PySpark\nCode base for the Learning PySpark book by Tomasz Drabas and Denny Lee. \n\n![Book cover](https://www.learningpyspark.com/wp-content/uploads/2017/02/Learning-PySpark-Banner-with-Text-Final-768x515.png)\n\nAvailable from [Packt](https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark) and [Amazon](https://www.amazon.com/Learning-PySpark-Tomasz-Drabas/dp/1786463709/ref=s9_simh_gw_g14_i1_r?_encoding=UTF8&fpl=fresh&pf_rd_m=ATVPDKIKX0DER&pf_rd_s=&pf_rd_r=F634WQ321FDKJHXRVD0K&pf_rd_t=36701&pf_rd_p=1cded295-23b4-40b1-8da6-7c1c9eb81d33&pf_rd_i=desktop).\n\n\n# Introduction\n\nIt is estimated that in 2013 the whole world produced around 4.4 zettabytes of data; that is, 4.4 billion terabytes! By 2020, we (as a human race) are expected to produce ten times that. With data getting larger literally by the second there is a growing appetite for making sense out of it.\n\nIn this book, we will guide you through the latest incarnation of Apache Spark using Python. We will show you how to read structured and unstructured data, how to use some fundamental data types available in PySpark, how to build machine learning models, operate on graphs, read streaming data and deploy your models in the cloud. Each chapter will tackle different problem and by the end of the book we hope you will be knowledgeable enough to solve other problems we did not have space to cover here.\n\n# Table of contents:\n\n1. Understanding Spark\n2. Resilient Distributed Dataset\n3. DataFrames\n4. Preparing Data for Modeling\n5. Introducing MLlib\n6. Introducing the ML Package\n7. GraphFrames\n8. TensorFrames\n9. Polyglot Persistence with Blaze\n10. Structured Streaming\n11. Packaging Spark Applications\n\n# About authors\n\n**Tomasz Drabas** is a Data Scientist working for Microsoft and currently residing in Seattle area. He has over 13 years of experience in data analytics and data science in numerous elds: advanced technology, airlines, telecommunications, nance and consulting he gained while working on three continents: Europe, Australia and North America. While in Australia, Tomasz has been working on his PhD in Operations Research with focus on choice modeling and revenue management applications in airline industry.\n\nAt Microsoft, Tomasz works with big data on a daily basis solving machine learning problems such as anomaly detection, churn prediction or pattern recognition using Spark.\n\nTomasz has also authored the Practical Data Analysis Cookbook published by Packt Publishing in 2016; you can purchase that book on [Amazon](https://www.amazon.com/Practical-Analysis-Cookbook-Tomasz-Drabas/dp/1783551666/ref=sr_1_1?ie=UTF8&qid=1487737534&sr=8-1&keywords=practical+data+analysis+cookbook), [Packt](https://www.packtpub.com/big-data-and-business-intelligence/practical-data-analysis-cookbook) and [O’Reilly](http://shop.oreilly.com/product/9781783551668.do).\n\n \n\n**Denny Lee** is a Principal Program Manager at Microsoft for the Azure DocumentDB team – Microsoft’s blazing fast, planet-scale managed document store service. He is a hands-on distributed systems and data sciences engineer with more than 18 years of experience developing internet-scale infrastructure, data platforms, and predictive analytics systems for both on-premise and cloud environments.\n\nHe has extensive experience in building green eld teams as well as turnaround / change catalyst. Prior to joining the Azure DocumentDB team, Denny worked as a Technology Evangelist at Databricks; he has been working with Apache Spark since 0.5. He was also the Senior Director of Data Sciences Engineering at Concur, and was on the incubation team that built Microsoft’s Hadoop on Windows and Azure service (currently known as HDInsight). Denny also has a Masters of Biomedical Informatics from Oregon Health and Sciences University and has architected and implemented powerful data solutions for enterprise Healthcare customers for the last fteen years.\n","isFork":null},{"name":"Learning-PySpark","url":"https://github.com/PacktPublishing/Learning-PySpark","description":"Code repository for Learning PySpark by Packt","lang":["Jupyter Notebook","Python","Shell"],"readme":"# Learning PySpark\nThis is the code repository for [Learning PySpark](https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark?utm_source=github&utm_medium=repository&utm_content=9781786463708), published by Packt. It contains all the supporting project files necessary to work through the book from start to finish.\n\n## About the book\nApache Spark is an open source framework for efficient cluster computing with a strong interface for data parallelism and fault tolerance. This book will show you how to leverage the power of Python and put it to use in the Spark ecosystem. You will start by getting a firm understanding of the Spark 2.0 architecture and how to set up a Python environment for Spark.\n\nYou will get familiar with the modules available in PySpark. You will learn how to abstract data with RDDs and DataFrames and understand the streaming capabilities of PySpark. Also, you will get a thorough overview of machine learning capabilities of PySpark using ML and MLlib, graph processing using GraphFrames, and polyglot persistence using Blaze. Finally, you will learn how to deploy your applications to the cloud using the spark-submit command.\n\nBy the end of this book, you will have established a firm understanding of the Spark Python API and how it can be used to build data-intensive applications.\n\n## Instructions and Navigation\nAll of the code is organized into folders. Each folder starts with a number followed by the application name. For example, Chapter 03.\n\nThe code will look like the following:\n          \n        data_key = sc.parallelize( \n             [('a', 4),('b', 3),('c', 2),('a', 8),('d', 2),('b', 1), \n             ('d', 3)],4) \n        data_key.reduceByKey(lambda x, y: x + y).collect() \n\n### Software requirements:\nFor this book you need a personal computer (can be either Windows machine, Mac, or Linux). To run Apache Spark, you will need Java 7+ and an installed and conﬁgured Python 2.6+ or 3.4+ environment; we use the Anaconda distribution of Python in version 3.5, which can be downloaded from https://www.continuum.io/downloads. \n\nThe Python modules we randomly use throughout the book come preinstalled with Anaconda. We also use GraphFrames and TensorFrames that can be loaded dynamically while starting a Spark instance: to load these you just need an Internet connection. It is ﬁ ne if some of those modules are not currently installed on your machine – we will guide you through the installation process. \n\n### Note:\nChapter 11 and Bouns Chapter 02 does not contain code files.\n\n## Related Products:\n* [Python Machine Learning](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning?utm_source=github&utm_medium=repository&utm_content=9781783555130)\n\n* [Spark for Python Developers](https://www.packtpub.com/big-data-and-business-intelligence/spark-python-developers?utm_source=github&utm_medium=repository&utm_content=9781784399696)\n\n* [Python Data Analysis Cookbook](https://www.packtpub.com/big-data-and-business-intelligence/python-data-analysis-cookbook?utm_source=github&utm_medium=repository&utm_content=9781785282287)\n\n### Suggestions and Feedback\n[Click here](https://docs.google.com/forms/d/e/1FAIpQLSe5qwunkGf6PUvzPirPDtuy1Du5Rlzew23UBp2S-P3wB-GcwQ/viewform) if you have any feedback or suggestions.\n\n\n","isFork":null},{"name":"PySparkCookbook","url":"https://github.com/drabastomek/PySparkCookbook","description":"A repository for a PySpark Cookbook by Tomasz Drabas and Denny Lee","lang":["Shell","HTML","Jupyter Notebook","Python"],"readme":"# PySpark Cookbook\nCode base for the PySpark Coookbook by Denny Lee and Tomasz Drabas. \n\n![Book cover](https://www.learningpyspark.com/images/PySparkCookbook/Cover.001.png)\n\n\n# Introduction\n\nApache Spark is an open source framework for efficient cluster computing with a strong interface for data parallelism and fault tolerance. This book presents effective and time-saving recipes for leveraging the power of Python and putting it to use in the Spark ecosystem.\n\nYou'll start by learning the Apache Spark architecture and how to set up a Python environment for Spark. You’ll then get familiar with the modules available in PySpark and start using them effortlessly. In addition to this, you’ll discover how to abstract data with RDDs and DataFrames, and understand the streaming capabilities of PySpark. You'll then move on to using ML and MLlib in order to solve any problems related to the machine learning capabilities of PySpark and use GraphFrames to solve graph-processing problems.\n\nBy the end of this book, you will be able to use the Python API for Apache Spark to solve any problems associated with building data-intensive applications.\n\n# Table of contents:\n\n1. Installing and configuring Spark\n2. Abstracting data with RDDs\n3. Abstracting data with DataFrames\n4. Preparing Data for Modeling\n5. Introducing MLlib\n6. Introducing the ML Module\n7. Structured Streaming with PySpark\n8. GraphFrames - Graph Theory with PySpark\n\n# About authors\n**Denny Lee** is a Technical Product Marketing Manager with Databricks, working as closely to Apache Spark as humanly possible. Previously, Denny was a Principal Program Manager at Microsoft for the Azure Cosmos DB team – Microsoft’s blazing fast, planet-scale managed document store service. He is a hands-on distributed systems and data sciences engineer with more than 20 years of experience developing Internet-scale infrastructure, data platforms, and predictive analytics systems for both on-premise and cloud environments.\n\nHe has extensive experience in building green field teams as well as turnaround / change catalyst. Prior to joining the Azure Cosmos DB team, Denny worked as a Technology Evangelist at Databricks; he has been working with Apache Spark since 0.5. He was also the Senior Director of Data Sciences Engineering at Concur, and was on the incubation team that built Microsoft’s Hadoop on Windows and Azure service (currently known as HDInsight). Denny also has a Masters of Biomedical Informatics from Oregon Health and Sciences University and has architected and implemented powerful data solutions for enterprise Healthcare customers for the last fifteen years.\n\n**Tomasz Drabas** is a Senior Data Scientist working for Microsoft and currently residing in Seattle area. He has over 15 years of experience in data analytics and data science in numerous fields: advanced technology, airlines, telecommunications, finance and consulting he gained while working on three continents: Europe, Australia and North America. While in Australia, Tomasz has been working on his PhD in Operations Research with focus on choice modeling and revenue management applications in the airline industry.\n\nAt Microsoft, Tomasz works with big data on a daily basis solving machine learning problems such as anomaly detection, churn prediction or pattern recognition using Spark.\n\nTomasz has also authored the Learning PySpark with Denny Lee in 2017 and the Practical Data Analysis Cookbook (Python focused) published by Packt Publishing in 2016.  \n\n\n\nYou can purchase our books and videos from\n\n* Packt Publishing\n    * Learning PySpark: https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark\n    * Learning PySpark (videos): https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark-video\n    * Practical Data Analysis Cookbook: https://www.amazon.com/Practical-Analysis-Cookbook-Tomasz-Drabas/dp/1783551666\n* Amazon \n    * Learning PySpark: https://www.amazon.com/Learning-PySpark-Tomasz-Drabas/dp/1786463709\n    * Practical Data Analysis Cookbook: https://www.packtpub.com/big-data-and-business-intelligence/practical-data-analysis-cookbook\n* O'Reilly \n    * Learning PySpark: http://shop.oreilly.com/product/9781786463708.do\n    * Learning PySpark (videos): http://shop.oreilly.com/product/0636920172277.do\n    * Introduction to Apache Spark 2.0: http://shop.oreilly.com/product/0636920088851.do\n    * Practical Data Analysis Cookbook: http://shop.oreilly.com/product/9781783551668.do\n","isFork":null},{"name":"practicalDataAnalysisCookbook","url":"https://github.com/drabastomek/practicalDataAnalysisCookbook","description":"A collection of data and codes to supplement the practicalDataAnalysisCookbook (in preparation)","lang":["Python","HTML","Shell","PostScript","TeX"],"readme":"# practicalDataAnalysisCookbook\nA collection of data and codes to supplement the practicalDataAnalysisCookbook (in preparation)\n","isFork":null},{"name":"bigdl-fun","url":"https://github.com/drabastomek/bigdl-fun","description":"BigDL repository for MLADS 2017","lang":["Jupyter Notebook"],"readme":"# Introduction to Deep Learning on HDInsight with Intel Deep Learning framework: BigDL (R) Intel\r\n\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/1280px-Microsoft_logo_%282012%29.svg.png\" height=\"60px\">&nbsp;&nbsp;&nbsp;<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Intel-logo.svg/2000px-Intel-logo.svg.png\" height=\"60px\">\r\n\r\n## Presenters\r\n* Denny Lee, Principal Program Manager, CosmosDB \r\n* Tom Drabas, Data Scientist, WDG\r\n\r\n## In close cooperation with Intel\r\n* Sergey Ermolin, Power/Performance Optimization\r\n* Ding Ding, Software Engineer\r\n* Jiao Wang, Software Engineer\r\n* Jason Dai, Senior Principle Engineer and CTO, Big Data Technologies\r\n* Yiheng, Wang, Software Engineer\r\n* Xianyan Jia, Software Engineer\r\n\r\n## Special thanks to\r\n* Felix Cheung, Principal Software Engineer\r\n* Xiaoyong Zhu, Program Manager\r\n* Alejandro Guerrero Gonzalez, Senior Software Engineer\r\n\r\n---------\r\n\r\n# Setting up the environment\r\n\r\n### 1. Clone the Github repository\r\n\r\nThe folders in this repo:\r\n\r\n1. **data** folder - contains a set of 4 files that can be downloaded from http://yann.lecun.com/exdb/mnist/:\r\n    1. *train-images-idx3-ubyte* - set of training images in a binary format with a specific schema (we'll get to that)\r\n    2. *train-labels-idx1-ubyte* - corresponding set of training labels\r\n    3. *t10k-images-idx3-ubyte* - set of testing (validation) images\r\n    4. *t10k-labels-idx1-ubyte* - corresponding set of testing (validation) labels\r\n2. **jars** folder - contains two compiled jars for the BigDL:\r\n    1. *bigdl-0.2.0-SNAPSHOT-spark-2.0-jar-with-dependencies.jar* - BigDL compiled for Spark 2.0\r\n    2. *bigdl-0.2.0-SNAPSHOT-spark-2.1-jar-with-dependencies.jar* - BigDL compiled for Spark 2.1\r\n3. **notebook** folder - contains the notebook for the workshop\r\n\r\n### 2. Upload BigDL jar\r\n\r\nGrab the jar from the **jars** folder appropriate for your version of Spark.\r\n\r\n1. Go to Azure Dashboard and click on your cluster. Scroll down to the Storage accounts ![Storage options](http://tomdrabas.com/data/BigDL/StorageAccount.png)\r\n2. Click on the default storage account ![Default storage](http://tomdrabas.com/data/BigDL/DefaultStorageAccount.png)\r\n3. Go to Blobs ![Blobs](http://tomdrabas.com/data/BigDL/Blobs.png)\r\n4. Select the default container \r\n![Container](http://tomdrabas.com/data/BigDL/DefaultContainer_obs.png)\r\n5. Upload the jar appropriate for your version of Spark to the root of the folder ![Upload](http://tomdrabas.com/data/BigDL/Upload_obs.png)\r\n6. Check if uploaded successfully ![Uploaded](http://tomdrabas.com/data/BigDL/UploadedJar.png)\r\n\r\n### 3. Upload the data\r\n\r\nSimilarly to uploading the BigDL upload the data from the **data** folder. Upload the data into the `/tmp` folder in your default storage.","isFork":null},{"name":"learningPySpark_video","url":"https://github.com/drabastomek/learningPySpark_video","description":"Learning PySpark video series","lang":["Jupyter Notebook"],"readme":"# learningPySpark_video\nLearning PySpark video series\n","isFork":null},{"name":"TensorFlowOnSpark","url":"https://github.com/drabastomek/TensorFlowOnSpark","description":"TensorFlowOnSpark brings TensorFlow programs onto Apache Spark clusters","lang":["Shell","Python"],"readme":"<!--\nCopyright 2017 Yahoo Inc.\nLicensed under the terms of the Apache 2.0 license.\nPlease see LICENSE file in the project root for terms.\n-->\n# TensorFlowOnSpark\n\n## What's TensorFlowOnSpark?\n\nTensorFlowOnSpark brings scalable deep learning to [Apache Hadoop](http://hadoop.apache.org) and [Apache Spark](http://spark.apache.org)\nclusters. By combining salient features from deep learning framework\n[TensorFlow](https://www.tensorflow.org) and big-data frameworks\nApache Spark and Apache Hadoop, TensorFlowOnSpark enables distributed\ndeep learning on a cluster of GPU and CPU servers.\n\nTensorFlowOnSpark enables distributed TensorFlow training and\ninference on Apache Spark clusters.  It seeks to minimize the amount\nof code changes required to run existing TensorFlow programs on a\nshared grid.  Its Spark-compatible API helps manage the TensorFlow\ncluster with the following steps:\n\n1. **Startup** - launches the Tensorflow main function on the executors, along with listeners for data/control messages.\n1. **Data ingestion**\n  - **Readers & QueueRunners** - leverages TensorFlow's [Reader](https://www.tensorflow.org/how_tos/reading_data/#reading_from_files) mechanism to read data files directly from HDFS.\n  - **Feeding** - sends Spark RDD data into the TensorFlow nodes using the [feed_dict](https://www.tensorflow.org/how_tos/reading_data/#feeding) mechanism.  Note that we leverage the [Hadoop Input/Output Format](https://github.com/tensorflow/ecosystem/tree/master/hadoop) for access to TFRecords on HDFS.\n1. **Shutdown** - shuts down the Tensorflow workers and PS nodes on the executors.\n\nWe have also\n[enhanced](https://github.com/yahoo/tensorflow/tree/yahoo) TensorFlow\nto support direct access to remote memory (RDMA) on Infiniband\nnetworks.\n\nTensorFlowOnSpark was developed by Yahoo for large-scale distributed\ndeep learning on our Hadoop clusters in Yahoo's private cloud. \n\n\n## Why TensorFlowOnSpark?\n\nTensorFlowOnSpark provides some important benefits (see [our\nblog](http://yahoohadoop.tumblr.com/post/157196317141/open-sourcing-tensorflowonspark-distributed-deep))\nover alternative deep learning solutions.\n   * Easily migrate all existing TensorFlow programs with <10 lines of code change;\n   * Support all TensorFlow functionalities: synchronous/asynchronous training, model/data parallelism, inferencing and TensorBoard;\n   * Server-to-server direct communication achieves faster learning when available;\n   * Allow datasets on HDFS and other sources pushed by Spark or pulled by TensorFlow; \n   * Easily integrate with your existing data processing pipelines and machine learning algorithms (ex. MLlib, CaffeOnSpark);\n   * Easily deployed on cloud or on-premise: CPU & GPU, Ethernet and Infiniband. \n\n\n## Using TensorFlowOnSpark\n\nPlease check TensorFlowOnSpark [wiki site](../../wiki) for detailed\ndocumentations such as getting started guides for [YARN\ncluster](../../wiki/GetStarted_YARN) and [AWS EC2\ncluster](../../wiki/GetStarted_EC2). A [Conversion\nGuide](../../wiki/Conversion) has been provided to help you convert\nyour TensorFlow programs.\n\n## Mailing List\n\nPlease join [TensorFlowOnSpark user group](https://groups.google.com/forum/#!forum/TensorFlowOnSpark-users) for discussions and questions.\n\n## License\n\nThe use and distribution terms for this software are covered by the Apache 2.0 license.\nSee [LICENSE](LICENSE) file for terms.\n","isFork":true},{"name":"sparklingml","url":"https://github.com/drabastomek/sparklingml","description":"Machine Learning Pipeline Stages for Spark (exposed in Scala/Java + Python)","lang":["Scala","Shell"],"readme":"[![buildstatus](https://travis-ci.org/sparklingpandas/sparklingml.svg?branch=master)](https://travis-ci.org/sparklingpandas/sparklingml)\n[![codecov.io](http://codecov.io/github/sparklingpandas/sparklingml/coverage.svg?branch=master)](http://codecov.io/github/sparklingpandas/sparklingml?branch=master)\n\n# sparklingml\nMachine Learning Pipeline Stages for Spark (exposed in Scala/Java + Python)\n\n## Why?\n\nSparklingML's goal is to expose additional machine learning stages for Spark with the pipeline interface.\n\n## Status\n\nSuper early! Come join!\n\n## Including in your build\n\nSparklingML is not yet ready for production use.\n\n## License\n\nSparklingML is licensed under the Apache 2 license. Some additional components may be under a different license.\n","isFork":true},{"name":"keras","url":"https://github.com/drabastomek/keras","description":"Deep Learning library for Python. Runs on TensorFlow, Theano, or CNTK.","lang":["Makefile","Python"],"readme":"﻿# Keras: Deep Learning for Python\n\n![Keras logo](https://s3.amazonaws.com/keras.io/img/keras-logo-medium.png)\n\n[![Build Status](https://travis-ci.org/fchollet/keras.svg?branch=master)](https://travis-ci.org/fchollet/keras)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/fchollet/keras/blob/master/LICENSE)\n\n## You have just found Keras.\n\nKeras is a high-level neural networks API, written in Python and capable of running on top of [TensorFlow](https://github.com/tensorflow/tensorflow), [CNTK](https://github.com/Microsoft/cntk), or [Theano](https://github.com/Theano/Theano). It was developed with a focus on enabling fast experimentation. *Being able to go from idea to result with the least possible delay is key to doing good research.*\n\nUse Keras if you need a deep learning library that:\n\n- Allows for easy and fast prototyping (through user friendliness, modularity, and extensibility).\n- Supports both convolutional networks and recurrent networks, as well as combinations of the two.\n- Runs seamlessly on CPU and GPU.\n\nRead the documentation at [Keras.io](https://keras.io).\n\nKeras is compatible with: __Python 2.7-3.6__.\n\n\n------------------\n\n\n## Guiding principles\n\n- __User friendliness.__ Keras is an API designed for human beings, not machines. It puts user experience front and center. Keras follows best practices for reducing cognitive load: it offers consistent & simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear and actionable feedback upon user error.\n\n- __Modularity.__ A model is understood as a sequence or a graph of standalone, fully-configurable modules that can be plugged together with as little restrictions as possible. In particular, neural layers, cost functions, optimizers, initialization schemes, activation functions, regularization schemes are all standalone modules that you can combine to create new models.\n\n- __Easy extensibility.__ New modules are simple to add (as new classes and functions), and existing modules provide ample examples. To be able to easily create new modules allows for total expressiveness, making Keras suitable for advanced research.\n\n- __Work with Python__. No separate models configuration files in a declarative format. Models are described in Python code, which is compact, easier to debug, and allows for ease of extensibility.\n\n\n------------------\n\n\n## Getting started: 30 seconds to Keras\n\nThe core data structure of Keras is a __model__, a way to organize layers. The simplest type of model is the [`Sequential`](https://keras.io/getting-started/sequential-model-guide) model, a linear stack of layers. For more complex architectures, you should use the [Keras functional API](https://keras.io/getting-started/functional-api-guide), which allows to build arbitrary graphs of layers.\n\nHere is the `Sequential` model:\n\n```python\nfrom keras.models import Sequential\n\nmodel = Sequential()\n```\n\nStacking layers is as easy as `.add()`:\n\n```python\nfrom keras.layers import Dense, Activation\n\nmodel.add(Dense(units=64, input_dim=100))\nmodel.add(Activation('relu'))\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n```\n\nOnce your model looks good, configure its learning process with `.compile()`:\n\n```python\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n```\n\nIf you need to, you can further configure your optimizer. A core principle of Keras is to make things reasonably simple, while allowing the user to be fully in control when they need to (the ultimate control being the easy extensibility of the source code).\n```python\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True))\n```\n\nYou can now iterate on your training data in batches:\n\n```python\n# x_train and y_train are Numpy arrays --just like in the Scikit-Learn API.\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n```\n\nAlternatively, you can feed batches to your model manually:\n\n```python\nmodel.train_on_batch(x_batch, y_batch)\n```\n\nEvaluate your performance in one line:\n\n```python\nloss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)\n```\n\nOr generate predictions on new data:\n\n```python\nclasses = model.predict(x_test, batch_size=128)\n```\n\nBuilding a question answering system, an image classification model, a Neural Turing Machine, or any other model is just as fast. The ideas behind deep learning are simple, so why should their implementation be painful?\n\nFor a more in-depth tutorial about Keras, you can check out:\n\n- [Getting started with the Sequential model](https://keras.io/getting-started/sequential-model-guide)\n- [Getting started with the functional API](https://keras.io/getting-started/functional-api-guide)\n\nIn the [examples folder](https://github.com/fchollet/keras/tree/master/examples) of the repository, you will find more advanced models: question-answering with memory networks, text generation with stacked LSTMs, etc.\n\n\n------------------\n\n\n## Installation\n\nBefore installing Keras, please install one of its backend engines: TensorFlow, Theano, or CNTK. We recommend the TensorFlow backend.\n\n- [TensorFlow installation instructions](https://www.tensorflow.org/install/).\n- [Theano installation instructions](http://deeplearning.net/software/theano/install.html#install).\n- [CNTK installation instructions](https://docs.microsoft.com/en-us/cognitive-toolkit/setup-cntk-on-your-machine).\n\nYou may also consider installing the following **optional dependencies**:\n\n- cuDNN (recommended if you plan on running Keras on GPU).\n- HDF5 and h5py (required if you plan on saving Keras models to disk).\n- graphviz and pydot (used by [visualization utilities](https://keras.io/visualization/) to plot model graphs).\n\nThen, you can install Keras itself. There are two ways to install Keras:\n\n- **Install Keras from PyPI (recommended):**\n\n```sh\nsudo pip install keras\n```\n\nIf you are using a virtualenv, you may want to avoid using sudo:\n\n```sh\npip install keras\n```\n\n- **Alternatively: install Keras from the Github source:**\n\nFirst, clone Keras using `git`:\n\n```sh\ngit clone https://github.com/fchollet/keras.git\n```\n\n Then, `cd` to the Keras folder and run the install command:\n```sh\ncd keras\nsudo python setup.py install\n```\n\n------------------\n\n\n## Switching from TensorFlow to CNTK or Theano\n\nBy default, Keras will use TensorFlow as its tensor manipulation library. [Follow these instructions](https://keras.io/backend/) to configure the Keras backend.\n\n------------------\n\n\n## Support\n\nYou can ask questions and join the development discussion:\n\n- On the [Keras Google group](https://groups.google.com/forum/#!forum/keras-users).\n- On the [Keras Slack channel](https://kerasteam.slack.com). Use [this link](https://keras-slack-autojoin.herokuapp.com/) to request an invitation to the channel.\n\nYou can also post **bug reports and feature requests** (only) in [Github issues](https://github.com/fchollet/keras/issues). Make sure to read [our guidelines](https://github.com/fchollet/keras/blob/master/CONTRIBUTING.md) first.\n\n\n------------------\n\n\n## Why this name, Keras?\n\nKeras (κέρας) means _horn_ in Greek. It is a reference to a literary image from ancient Greek and Latin literature, first found in the _Odyssey_, where dream spirits (_Oneiroi_, singular _Oneiros_) are divided between those who deceive men with false visions, who arrive to Earth through a gate of ivory, and those who announce a future that will come to pass, who arrive through a gate of horn. It's a play on the words κέρας (horn) / κραίνω (fulfill), and ἐλέφας (ivory) / ἐλεφαίρομαι (deceive).\n\nKeras was initially developed as part of the research effort of project ONEIROS (Open-ended Neuro-Electronic Intelligent Robot Operating System).\n\n>_\"Oneiroi are beyond our unravelling --who can be sure what tale they tell? Not all that men look for comes to pass. Two gates there are that give passage to fleeting Oneiroi; one is made of horn, one of ivory. The Oneiroi that pass through sawn ivory are deceitful, bearing a message that will not be fulfilled; those that come out through polished horn have truth behind them, to be accomplished for men who see them.\"_ Homer, Odyssey 19. 562 ff (Shewring translation).\n\n------------------\n","isFork":true},{"name":"spark-deep-learning","url":"https://github.com/drabastomek/spark-deep-learning","description":"Deep Learning Pipelines for Apache Spark","lang":["Makefile","Shell","Scala","Python"],"readme":"# Deep Learning Pipelines for Apache Spark\n\nDeep Learning Pipelines provides high-level APIs for scalable deep learning in Python. The\nlibrary comes from Databricks and leverages Spark for its two strongest facets:\n1. In the spirit of Spark and Spark MLlib, it provides easy-to-use APIs that enable deep learning\nin very few lines of code.\n2. It uses Spark's powerful distributed engine to scale out deep learning on massive datasets.\n\nCurrently, TensorFlow and TensorFlow-backed Keras workflows are supported, with a focus on model\napplication and transfer learning on image data at scale, with hyper-parameter tuning in the works.\nFurthermore, it provides tools for data scientists and machine learning experts to turn deep\nlearning models into SQL functions that can be used by a much wider group of users. It does not\nperform single-model distributed training - this is an area of active research, and here we aim to\nprovide the most practical solutions for the majority of deep learning use cases.\n\nFor an overview of the library, see the Databrick [blog post](https://databricks.com/blog/2017/06/06/databricks-vision-simplify-large-scale-deep-learning.html?preview=true) introducing Deep Learning Pipelines.\nFor the various use cases the package serves, see the [Quick user guide](#quick-user-guide) section below.\n\nThe library is in its early days, and we welcome everyone's feedback and contribution.\n\nAuthors: Bago Amirbekian, Joseph Bradley, Sue Ann Hong, Tim Hunter, Philip Yang \n\n\n## Building and running unit tests\n\nTo compile this project, run `build/sbt assembly` from the project home directory.\nThis will also run the Scala unit tests.\n\nTo run the Python unit tests, run the `run-tests.sh` script from the `python/` directory.\nYou will need to set a few environment variables, e.g.\n```bash\nsparkdl$ SPARK_HOME=/usr/local/lib/spark-2.1.1-bin-hadoop2.7 PYSPARK_PYTHON=python2 SCALA_VERSION=2.11.8 SPARK_VERSION=2.1.1 ./python/run-tests.sh\n```\n\n\n## Spark version compatibility\n\nSpark 2.1.1 and Python 2.7 are recommended.\n\n\n\n## Quick user guide\n\nThe current version of Deep Learning Pipelines provides a suite of tools around working with and\nprocessing images using deep learning. The tools can be categorized as\n* [Working with images in Spark](#working-with-images-in-spark) : natively in Spark DataFrames\n* [Transfer learning](#transfer-learning) : a super quick way to leverage deep learning\n* [Applying deep learning models at scale](#applying-deep-learning-models-at-scale) : apply your \nown or known popular models to image data to make predictions or transform them into features\n* Deploying models as SQL functions : empower everyone by making deep learning available in SQL (coming soon)\n* Distributed hyper-parameter tuning : via Spark MLlib Pipelines (coming soon)\n\nTo try running the examples below, check out the Databricks notebook\n[Deep Learning Piplines on Databricks](https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/5669198905533692/3647723071348946/3983381308530741/latest.html).\n\n\n### Working with images in Spark\nThe first step to applying deep learning on images is the ability to load the images. Deep Learning\nPipelines includes utility functions that can load millions of images into a Spark DataFrame and\ndecode them automatically in a distributed fashion, allowing manipulation at scale.\n\n```python\nfrom sparkdl import readImages\nimage_df = readImages(\"/data/myimages\")\n```\n\nThe resulting DataFrame contains a string column named \"filePath\" containing the path to each image\nfile, and a image struct (\"`SpImage`\") column named \"image\" containing the decoded image data.\n\n```python\nimage_df.show()\n```\n\nThe goal is to add support for more data types, such as text and time series, as there is interest.\n\n\n### Transfer learning\nDeep Learning Pipelines provides utilities to perform \n[transfer learning](https://en.wikipedia.org/wiki/Transfer_learning) on images, which is one of\nthe fastest (code and run-time-wise) ways to start using deep learning. Using Deep Learning\nPipelines, it can be done in just several lines of code.\n\n```python\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml import Pipeline\nfrom sparkdl import DeepImageFeaturizer\n\nfeaturizer = DeepImageFeaturizer(inputCol=\"image\", outputCol=\"features\", modelName=\"InceptionV3\")\nlr = LogisticRegression(maxIter=20, regParam=0.05, elasticNetParam=0.3, labelCol=\"label\")\np = Pipeline(stages=[featurizer, lr])\n\nmodel = p.fit(train_images_df)    # train_images_df is a dataset of images (SpImage) and labels\n\n# Inspect training error\ndf = model.transform(train_images_df.limit(10)).select(\"image\", \"probability\",  \"uri\", \"label\")\npredictionAndLabels = df.select(\"prediction\", \"label\")\nevaluator = MulticlassClassificationEvaluator(metricName=\"accuracy\")\nprint(\"Training set accuracy = \" + str(evaluator.evaluate(predictionAndLabels)))\n```\n\n\n### Applying deep learning models at scale\nSpark DataFrames are a natural construct for applying deep learning models to a large-scale dataset.\nDeep Learning Pipelines provides a set of (Spark MLlib) Transformers for applying TensorFlow Graphs\nand TensorFlow-backed Keras Models at scale. In addition, popular images models can be applied out\nof the box, without requiring any TensorFlow or Keras code. The Transformers, backed by the\nTensorframes library, efficiently handle the distribution of models and data to Spark workers.\n\n#### Applying popular image models\nThere are many well-known deep learning models for images. If the task at hand is very similar to\nwhat the models provide (e.g. object recognition with ImageNet classes), or for pure exploration,\none can use the Transformer `DeepImagePredictor` by simply specifying the model name.\n\n```python\nfrom sparkdl import readImages, DeepImagePredictor\n\npredictor = DeepImagePredictor(inputCol=\"image\", outputCol=\"predicted_labels\",\n                               modelName=\"InceptionV3\", decodePredictions=True, topK=10)\nimage_df = readImages(\"/data/myimages\")\npredictions_df = predictor.transform(image_df)\n```\n\n#### For TensorFlow users\nDeep Learning Pipelines provides a Transformer that will apply the given TensorFlow Graph to a\nDataFrame containing a column of images (e.g. loaded using the utilities described in the previous\n  section). Here is a very simple example of how a TensorFlow Graph can be used with the\nTransformer. In practice, the TensorFlow Graph will likely be restored from files before calling\n`TFImageTransformer`.\n\n```python\nfrom sparkdl import readImages, TFImageTransformer\nfrom sparkdl.transformers import utils\nimport tensorflow as tf\n\ng = tf.Graph()\nwith g.as_default():\n    image_arr = utils.imageInputPlaceholder()\n    resized_images = tf.image.resize_images(image_arr, (299, 299))\n    # the following step is not necessary for this graph, but can be for graphs with variables, etc\n    frozen_graph = utils.stripAndFreezeGraph(g.as_graph_def(add_shapes=True), tf.Session(graph=g),\n                                             [resized_images])\n\ntransformer = TFImageTransformer(inputCol=\"image\", outputCol=\"predictions\", graph=frozen_graph,\n                                 inputTensor=image_arr, outputTensor=resized_images,\n                                 outputMode=\"image\")\nimage_df = readImages(\"/data/myimages\")\nprocessed_image_df = transformer.transform(image_df)\n```\n\n\n\n#### For Keras users\nFor applying Keras models in a distributed manner using Spark, [`KerasImageFileTransformer`](link_here)\nworks on TensorFlow-backed Keras models. It\n* Internally creates a DataFrame containing a column of images by applying the user-specified image\nloading and processing function to the input DataFrame containing a column of image URIs\n* Loads a Keras model from the given model file path\n* Applies the model to the image DataFrame\n\nThe difference in the API from `TFImageTransformer` above stems from the fact that usual Keras\nworkflows have very specific ways to load and resize images that are not part of the TensorFlow Graph.\n\n\nTo use the transformer, we first need to have a Keras model stored as a file. For this example we'll \njust save the Keras built-in InceptionV3 model instead of training one.\n\n```python\nfrom keras.applications import InceptionV3\n\nmodel = InceptionV3(weights=\"imagenet\")\nmodel.save('/tmp/model-full.h5')\n```\n\nNow on the prediction side, we can do:\n\n```python\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing.image import img_to_array, load_img\nimport numpy as np\nimport os\nfrom sparkdl import KerasImageFileTransformer\n\ndef loadAndPreprocessKerasInceptionV3(uri):\n    # this is a typical way to load and prep images in keras\n    image = img_to_array(load_img(uri, target_size=(299, 299)))\n    image = np.expand_dims(image, axis=0)\n    return preprocess_input(image)\n\ntransformer = KerasImageFileTransformer(inputCol=\"uri\", outputCol=\"predictions\",\n                                        modelFile=\"/tmp/model-full.h5\",\n                                        imageLoader=loadAndPreprocessKerasInceptionV3,\n                                        outputMode=\"vector\")\n\nfiles = [os.path.abspath(os.path.join(dirpath, f)) for f in os.listdir(\"/data/myimages\") if f.endswith('.jpg')]\nuri_df = sqlContext.createDataFrame(files, StringType()).toDF(\"uri\")\n\nfinal_df = transformer.transform(uri_df)\n```\n\n\n## Releases:\n\n**TBA**\n","isFork":true},{"name":"analytics-zoo","url":"https://github.com/drabastomek/analytics-zoo","description":"Deep learning powered big data analytics using BigDL on Apache Spark","lang":["Jupyter Notebook","Python","Scala"],"readme":"# Analytics Zoo\nZoo for deep learning powered big data analytics using [BigDL](https://github.com/intel-analytics/BigDL) on Apache Spark\n","isFork":true},{"name":"spark","url":"https://github.com/drabastomek/spark","description":"Mirror of Apache Spark","lang":["Shell","Batchfile","R","Makefile","C","Java","Scala","JavaScript","CSS","HTML","PowerShell","Python","Roff","ANTLR","PLpgSQL","SQLPL","Thrift"],"readme":"# Apache Spark\n\nSpark is a fast and general cluster computing system for Big Data. It provides\nhigh-level APIs in Scala, Java, Python, and R, and an optimized engine that\nsupports general computation graphs for data analysis. It also supports a\nrich set of higher-level tools including Spark SQL for SQL and DataFrames,\nMLlib for machine learning, GraphX for graph processing,\nand Spark Streaming for stream processing.\n\n<http://spark.apache.org/>\n\n\n## Online Documentation\n\nYou can find the latest Spark documentation, including a programming\nguide, on the [project web page](http://spark.apache.org/documentation.html).\nThis README file only contains basic setup instructions.\n\n## Building Spark\n\nSpark is built using [Apache Maven](http://maven.apache.org/).\nTo build Spark and its example programs, run:\n\n    build/mvn -DskipTests clean package\n\n(You do not need to do this if you downloaded a pre-built package.)\n\nYou can build Spark using more than one thread by using the -T option with Maven, see [\"Parallel builds in Maven 3\"](https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3).\nMore detailed documentation is available from the project site, at\n[\"Building Spark\"](http://spark.apache.org/docs/latest/building-spark.html).\n\nFor general development tips, including info on developing Spark using an IDE, see [\"Useful Developer Tools\"](http://spark.apache.org/developer-tools.html).\n\n## Interactive Scala Shell\n\nThe easiest way to start using Spark is through the Scala shell:\n\n    ./bin/spark-shell\n\nTry the following command, which should return 1000:\n\n    scala> sc.parallelize(1 to 1000).count()\n\n## Interactive Python Shell\n\nAlternatively, if you prefer Python, you can use the Python shell:\n\n    ./bin/pyspark\n\nAnd run the following command, which should also return 1000:\n\n    >>> sc.parallelize(range(1000)).count()\n\n## Example Programs\n\nSpark also comes with several sample programs in the `examples` directory.\nTo run one of them, use `./bin/run-example <class> [params]`. For example:\n\n    ./bin/run-example SparkPi\n\nwill run the Pi example locally.\n\nYou can set the MASTER environment variable when running examples to submit\nexamples to a cluster. This can be a mesos:// or spark:// URL,\n\"yarn\" to run on YARN, and \"local\" to run\nlocally with one thread, or \"local[N]\" to run locally with N threads. You\ncan also use an abbreviated class name if the class is in the `examples`\npackage. For instance:\n\n    MASTER=spark://host:7077 ./bin/run-example SparkPi\n\nMany of the example programs print usage help if no params are given.\n\n## Running Tests\n\nTesting first requires [building Spark](#building-spark). Once Spark is built, tests\ncan be run using:\n\n    ./dev/run-tests\n\nPlease see the guidance on how to\n[run tests for a module, or individual tests](http://spark.apache.org/developer-tools.html#individual-tests).\n\n## A Note About Hadoop Versions\n\nSpark uses the Hadoop core library to talk to HDFS and other Hadoop-supported\nstorage systems. Because the protocols have changed in different versions of\nHadoop, you must build Spark against the same version that your cluster runs.\n\nPlease refer to the build documentation at\n[\"Specifying the Hadoop Version\"](http://spark.apache.org/docs/latest/building-spark.html#specifying-the-hadoop-version)\nfor detailed guidance on building for a particular distribution of Hadoop, including\nbuilding for particular Hive and Hive Thriftserver distributions.\n\n## Configuration\n\nPlease refer to the [Configuration Guide](http://spark.apache.org/docs/latest/configuration.html)\nin the online documentation for an overview on how to configure Spark.\n\n## Contributing\n\nPlease review the [Contribution to Spark guide](http://spark.apache.org/contributing.html)\nfor information on how to get started contributing to the project.\n","isFork":true},{"name":"Python-Suffix-Tree","url":"https://github.com/drabastomek/Python-Suffix-Tree","description":"Suffix tree for string searching","lang":["Python"],"readme":"Suffix Trees in Python\n================================\n\nBased off of Mark Nelson's C++ implementation of Ukkonen's algorithm. Ukkonen's\nalgorithm gives a O(n) + O(k) contruction time for a suffix tree, where n is \nthe length of the string and k is the size of the alphabet of that string. \nUkkonen's is an online algorithm, processing the input sequentially and producing \na valid suffix tree at each character.\n\nHow to use\n----------\n\n\tstring = \"I need to be searched!\"\n    tree = SuffixTree(string)\n\tindex_of_need = tree.find_substring(\"need\")\n\nUsage note\n----------\n\nThis library is mostly an academic exercise. \nIf you need an efficient library\nI would recommend a python-wrapped c implementation, \nsuch as [this one](http://www.daimi.au.dk/~mailund/suffix_tree.html).\n","isFork":true},{"name":"SE_OTCalculator","url":"https://github.com/drabastomek/SE_OTCalculator","description":"Single ended output transformer calculator","lang":["Python","Shell"],"readme":null,"isFork":null},{"name":"OTDesigner","url":"https://github.com/drabastomek/OTDesigner","description":"Designing output transformers for tube amplifiers","lang":["Python"],"readme":"# OTDesigner\nDesigning output transformers for tube amplifiers\n","isFork":null},{"name":"gpusandbox","url":"https://github.com/drabastomek/gpusandbox","description":"A collection of random GPU projects utilising a mix of CUDA, OpenCL, OpenGL, DirectX and Compute shaders.","lang":["C","C++"],"readme":"gpu-sandbox\n=======\n\nA collection of random GPU projects utilising a mix of CUDA, OpenCL, OpenGL and DirectX.\n\n**CMake**:\n\n  The C/C++ code uses cmake to create the project files / makefile for your desired platform. Be sure to install cmake and either use the cmake GUI program to generate the files, or use the command-line:\n  \n    cmake .\n\n**OpenCL**:\n\n  On Windows and Linux you will need to download an OpenCL library from your device manufacturer, either AMD, Nvidia or Intel.\n  \n**CUDA**:\n\n  Requires Nvidia hardware. Download the CUDA SDK from Nvidia's website.\n  \n**OpenGL**:\n\n  Current examples are written for OpenGL 4.1 (OSX supported). Most modern GPU hardware supports GL4.3 which allows for Compute shaders. Future example projects will include 4.3 and 4.4 samples to demonstrate Compute.\n  \n**DirectX**:\n\n  Windows only.\n  \n**Future Plans**\n\n  This repo will eventually contain examples of various GPU-related techniques including computation and rendering, written in various languages including C, C++, C# and Python.\n  WebGL may also be included for some samples.\n","isFork":true},{"name":"graphhack_flights","url":"https://github.com/drabastomek/graphhack_flights","description":"Flight Delays (GraphHack project @ GraphConnect 2014 SF)","lang":[],"readme":"# Flight Delays (GraphHack project @ GraphConnect 2014 SF)\n\nHack project from [GraphHack meetup](http://www.meetup.com/graphdb-sf/events/210546152/) @ GraphConnect 2014 \n\n![Denver flights](https://raw.github.com/allanglen/graphhack_flights/master/screenshots/denver_flights.png)\n\n## Setup\n\n * Install Neo4j and load graph data from https://github.com/nicolewhite/flight_graph\n\n * Download CSV file with airport codes and latitude/longitude and merge into the graph\n   https://raw.github.com/allanglen/graphhack_flights/master/data/Airport_loc.csv\n\n  ```\n  LOAD CSV WITH HEADERS FROM \"file:///Users/aglen/Downloads/Airport_loc.csv\" AS csv\n  \n  MATCH (a:Airport)\n  WHERE a.abbr = csv.abbr\n  SET a.latitude = csv.Latitude,\n          a.longitude = csv.Longitude\n  ```\n\n* Run\n\n  ```\n  npm install\n  npm start\n  ```\n","isFork":true},{"name":"flight_graph","url":"https://github.com/drabastomek/flight_graph","description":null,"lang":[],"readme":"flight_graph\n=============\n\nA Neo4j graph database of flight data.\n\n## Create the DB\n\nData is located [here](http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236&DB_Short_Name=On-Time). Select the pre-zipped checkbox and download. Unzip the file. Make sure you're pointing to the correct file name at line 8 of `import.py`.\n\nAlso download the lookup tables for `UniqueCarrier` and `OriginAirportID`. Save these as `.csv`, not `.csv-`. They should be called `L_UNIQUE_CARRIERS.csv` and `L_AIRPORT_ID.csv`.\n\n```\npython schema.py\npython import.py\npython import_lookups.py\n```\n\n## Download the DB\n\nAlternatively, download the zip file [here](https://www.dropbox.com/s/qq1ll7nwjmtt29j/flights.db.zip?dl=0).\n\n## Query\n\nWatch Intro to Cypher with this dataset [here](https://www.youtube.com/watch?v=VdivJqlPzCI). Queries are located in `queries`.\n","isFork":true},{"name":"metasim","url":"https://github.com/drabastomek/metasim","description":"Wrapper around the airline simulator components, so as to ease their building","lang":[],"readme":null,"isFork":true},{"name":"travelccm","url":"https://github.com/drabastomek/travelccm","description":"C++ Simulation Travel Customer Choice Model (CCM) Library","lang":[],"readme":null,"isFork":true}]}
,{"match":1,"linkedin_id":213964086,"gid":17517,"git_name":"Christian Berkhoff","git_login":"cberkhoff","git_location":"Seattle, WA","git_company":"Amazon LLC","git_org":[],"git_email":"christian.berkhoff@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/cberkhoff","bio":null,"repos":[{"name":"howishell","url":"https://github.com/imella/howishell","description":"How I shell NASA Project","lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"buho","url":"https://github.com/cberkhoff/buho","description":null,"lang":[],"readme":"# buho","isFork":null},{"name":"mine.js","url":"https://github.com/cberkhoff/mine.js","description":"A simple game concept written in coffeescript","lang":["CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"winlepp","url":"https://github.com/cberkhoff/winlepp","description":"Winlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","lang":["Prolog","C++"],"readme":"winlepp\n=======\n\nWinlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","isFork":null},{"name":"android-location-picker","url":"https://github.com/cberkhoff/android-location-picker","description":"Dynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.","lang":["Groovy","Shell","Java"],"readme":"android-location-picker\n=======================\n\nDynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.\n","isFork":null},{"name":"facebook-android-sdk","url":"https://github.com/cberkhoff/facebook-android-sdk","description":"Facebook SDK for Android","lang":["Groovy","Java","Shell"],"readme":null,"isFork":true},{"name":"blackjack","url":"https://github.com/cberkhoff/blackjack","description":"Clojure example for an introductory worshop. It's the classic carioca card game.","lang":["Clojure"],"readme":"Blackjack\n=========\n\nClojure example for an introductory worshop. It's a simplification of the classic Blackjack card game.\n\nFor a game explanation go to [this links](http://www.pagat.com/banking/blackjack.html).\n","isFork":null},{"name":"hunchator","url":"https://github.com/imella/hunchator","description":null,"lang":["Ruby","CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"team11","url":"https://github.com/spaceappchile/team11","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"schnaps","url":"https://github.com/imella/schnaps","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# Schnaps\n\nSchaps, what could I drink tonight?","isFork":null},{"name":"euler","url":"https://github.com/cberkhoff/euler","description":"Solution to ProjectEuler problems using Java","lang":["Java"],"readme":"euler\n=====\n\nSolution to ProjectEuler problems using Java\n","isFork":null},{"name":"cc51s","url":"https://github.com/cberkhoff/cc51s","description":"A simple game written in Java using RMI for the CC51S course","lang":["Java"],"readme":"cc51s\n=====\n\nA simple game written in Java using RMI for the CC51S course","isFork":null},{"name":"UrlImageViewHelper","url":"https://github.com/cberkhoff/UrlImageViewHelper","description":"Android library that sets an ImageView's contents from a url. Manages image downloading, caching, and makes your coffee too.","lang":["Groovy","Java"],"readme":"## UrlImageViewHelper\nUrlImageViewHelper will fill an ImageView with an image that is found at a URL.\n\n### Sample Project\n\nThe sample will do a Google Image Search and load/show the results asynchronously.\n\n![](https://raw.github.com/koush/UrlImageViewHelper/master/helper2.png)\n\n### Download\n\nDownload [the latest JAR](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.koushikdutta.urlimageviewhelper&a=urlimageviewhelper&v=LATEST\n) or grab via Maven:\n\n```xml\n<dependency>\n    <groupId>com.koushikdutta.urlimageviewhelper</groupId>\n    <artifactId>urlimageviewhelper</artifactId>\n    <version>(insert latest version)</version>\n</dependency>\n```\n\n### Usage\n\nUrlImageViewHelper will automatically download and manage all the web images and ImageViews.\nDuplicate urls will not be loaded into memory twice. Bitmap memory is managed by using\na weak reference hash table, so as soon as the image is no longer used by you,\nit will be garbage collected automatically.\n\nUsage is simple:\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\");\n```\n\n\nWant a placeholder image while it is being downloaded?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", R.drawable.placeholder);\n```\n\n\nDon't want to use a placeholder resource, but a drawable instead?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", drawable);\n```\n\n\nWhat if you want to preload images for snazzy fast loading?\n\n```java\nUrlImageViewHelper.loadUrlDrawable(context, \"http://example.com/image.png\");\n```\n\n\nWhat if you only want to cache the images for a minute?\n\n```java\n// Note that the 3rd argument \"null\" is an optional interstitial\n// placeholder image.\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", null, 60000);\n```\n\nUrlImageViewHelper is pretty smart. It can even load the photo for an Android contact\nif given a Contact Content Provider URI.\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"content://com.android.contacts/contacts/1115\", R.drawable.dummy_contact_photo);\n```\n\n### FAQ\n\n**Does it work in list adapters when views are reused? (convertView)**\n\nYes.\n\n\n### Featured Implementations\n\n * [ROM Manager](https://play.google.com/store/apps/details?id=com.koushikdutta.rommanager&hl=en)\n * [Carbon](https://play.google.com/store/apps/details?id=com.koushikdutta.backup&hl=en)\n * Let me know if you use this library, so I can add it to the list!\n","isFork":true},{"name":"ActionBarSherlock","url":"https://github.com/cberkhoff/ActionBarSherlock","description":"Library for implementing the action bar design pattern using the native action bar on Android 4.0+ and a custom implementation on pre-4.0 through a single API and theme.","lang":[],"readme":"ActionBarSherlock\n=================\n\nActionBarSherlock is an standalone library designed to facilitate the use of\nthe action bar design pattern across all versions of Android through a single\nAPI.\n\nThe library will automatically use the [native ActionBar][2] implementation on\nAndroid 4.0 or later. For previous versions which do not include ActionBar, a\ncustom action bar implementation based on the sources of Ice Cream Sandwich\nwill automatically be wrapped around the layout. This allows you to easily\ndevelop an application with an action bar for every version of Android from 2.x\nand up.\n\n**See http://actionbarsherlock.com for more information.**\n\n![Example Image][3]\n\nTry out the sample applications on the Android Market: [Feature Demos][4],\n[Fragments][5], and [RoboGuice][6].\n\nContinuous integration is provided by [Travis CI][7].\n\n\n\nDeveloped By\n============\n\n* Jake Wharton - <jakewharton@gmail.com>\n\n\n\nLicense\n=======\n\n    Copyright 2012 Jake Wharton\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n\n\n [1]: http://android-developers.blogspot.com/2011/03/fragments-for-all.html\n [2]: http://developer.android.com/guide/topics/ui/actionbar.html\n [3]: http://actionbarsherlock.com/static/feature.png\n [4]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\n [5]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.fragments\n [6]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.roboguice\n [7]: https://travis-ci.org/JakeWharton/ActionBarSherlock\n","isFork":true},{"name":"emacs-clojure-vagrant","url":"https://github.com/cberkhoff/emacs-clojure-vagrant","description":"A simple dev environment for clojure.","lang":["Ruby","Shell","Emacs Lisp"],"readme":"Vagrant setup for Clojure\n=========================\n\nStrated as a simple fork from [https://github.com/Seajure/emacs-clojure-vagrant](Seajure) but ended being a completedly different thing.\n\nSetup\n=====\n   - Install Vagrant following the instructions [http://vagrantup.com/docs/getting-started/index.html](Vagrant Getting Started).\n   - Download this\n   - `vagrant up` inside the directory containing this readme\n\nUsage\n-----\n\nContents\n--------\n- Java\n- Git\n- Leiningen\n- Emacs\n- Postgresql","isFork":true},{"name":"node-vagrant","url":"https://github.com/cberkhoff/node-vagrant","description":"A quick and dirty node setup using vagrant and chef","lang":["Ruby"],"readme":null,"isFork":true},{"name":"express-lingua","url":"https://github.com/cberkhoff/express-lingua","description":"A i18n middleware for the Express.js framework.","lang":["JavaScript"],"readme":"# Lingua and Lengua\n\n[Lingua](https://github.com/akoenig/express-lingua) is a middleware for the Express.js framework that helps you to internationalise your webapp easily. It determines the language of the user agent and pushes the i18n resources to your views.\n\nLengua is a fork form Lingua which introduces some features.\n\n## Installation\n\n    $ npm install lengua\n\n## Show me the code!\n\nTo translate somenthig (Coffeekup)\n\n<pre>\n@t 'Name'\n@t 'navigation.german'\n</pre>\n\nTo get the current country code, language and locale respectively\n\n<pre>\n@currentCountry\n@currentCountryLanguage\n@currentLocale\n</pre>\n\n## Added features\n\n### For the common mortal\n\n1. User locale stored in session instead of cookie\n\n2. Not case sensitive\n\n3. Country Code\n\n4. If the current locale (e.g. en-US) doesnt define a key, Lengua does a lookup in the global locale (e.g. en).\n\n### Other Stuff\n\n1. Tests :)\n\n## TODO\n\n1. Locale storage as strategy (Cookie, Session, Azure, etc).\n\n2. Cache update (when all fallbacks fail).\n\n## Dev\n\n### Tests\n\n<pre>\nnpm install jasmine-node\ncd spec/\njasmine-node.cmd .\\guru.spec.js\njasmine-node.cmd .\\lingua.spec.js\n</pre>\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\nCopyright (c) 2011,\n \n[André König](http://lochkartenstanzer.de) ([Google+](http://profile.lochkartenstanzer.de)) (andre.koenig -[at]- gmail [*dot*] com)\n\n[Christian Berkhoff](#) (christian.berkhoff - [at] - gmail [#dot#] com)\n","isFork":true},{"name":"paperclipdb","url":"https://github.com/cberkhoff/paperclipdb","description":"Database storage support for paperclip file attachment plugin.","lang":["Ruby"],"readme":null,"isFork":true}]}
,{"match":1,"linkedin_id":213954281,"gid":15986,"git_name":"Erin Krengel","git_login":"ekrengel","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/ekrengel","bio":null,"repos":[{"name":"introk8s","url":"https://github.com/ekrengel/introk8s","description":"ACT-W Introduction to K8s","lang":["Dockerfile","Go"],"readme":"# ACT-W Introduction to K8s\n\nThis workshop was developed for ACT-W Seattle 2018.\n\n## Pre-Workshop Installations\n\nThere is a number of open-source software you will need to install to follow along with the workshop.\n\n### Minikube\n\nMinikube is a tool that allows you to run Kubernetes locally on your computer.\n\nYou can find install instructions for minikube [here](https://github.com/kubernetes/minikube/releases). If you use homebrew the easiest thing to do is run this command:\n\n```bash\nbrew cask install minikube\n```\n\nYou can verify you have installed minikube by running:\n\n```bash\nminikube version\n```\n\n### Kubectl\n\nKubectl is the command-line tool for interfacing with Kubernetes. It allows you to deploy and manage your apps.\n\nInstallation instructions can be found [here](https://kubernetes.io/docs/tasks/tools/install-kubectl/). Once again our recommendation is to use homebrew for this:\n\n```bash\nbrew install kubernetes-cli\n```\n\nYou can verify you have installed kubectl by running:\n\n```bash\nkubectl version\n```\n\n## Getting Started\n\n1. Start your minikube by running:\n\n    ```bash\n    minikube start\n    ```\n\n2. Make sure your context is set to minikube.\n\n    ```bash\n    kubectl config get-contexts\n    ```\n\n    `minikube` should have a star next to it when you run this command. If it doesn't, you can set minikube to your context by running:\n\n    ```bash\n    kubectl config use-context minikube\n    ```","isFork":null},{"name":"kubernetes","url":"https://github.com/ekrengel/kubernetes","description":"Production-Grade Container Scheduling and Management","lang":["Python","Makefile","Shell","C","Go","Ruby","Nginx","SaltStack","PowerShell","Protocol Buffer","HTML"],"readme":"# Kubernetes\n\n[![Submit Queue Widget]][Submit Queue] [![GoDoc Widget]][GoDoc]\n\n<img src=\"https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png\" width=\"100\">\n\n----\n\nKubernetes is an open source system for managing [containerized applications]\nacross multiple hosts, providing basic mechanisms for deployment, maintenance,\nand scaling of applications.\n\nKubernetes builds upon a decade and a half of experience at Google running\nproduction workloads at scale using a system called [Borg],\ncombined with best-of-breed ideas and practices from the community.\n\nKubernetes is hosted by the Cloud Native Computing Foundation ([CNCF]).\nIf you are a company that wants to help shape the evolution of\ntechnologies that are container-packaged, dynamically-scheduled\nand microservices-oriented, consider joining the CNCF.\nFor details about who's involved and how Kubernetes plays a role,\nread the CNCF [announcement].\n\n----\n\n## To start using Kubernetes\n\nSee our documentation on [kubernetes.io].\n\nTry our [interactive tutorial].\n\nTake a free course on [Scalable Microservices with Kubernetes].\n\n## To start developing Kubernetes\n\nThe [community repository] hosts all information about\nbuilding Kubernetes from source, how to contribute code\nand documentation, who to contact about what, etc.\n\nIf you want to build Kubernetes right away there are two options:\n\n##### You have a working [Go environment].\n\n```\n$ go get -d k8s.io/kubernetes\n$ cd $GOPATH/src/k8s.io/kubernetes\n$ make\n```\n\n##### You have a working [Docker environment].\n\n```\n$ git clone https://github.com/kubernetes/kubernetes\n$ cd kubernetes\n$ make quick-release\n```\n\nIf you are less impatient, head over to the [developer's documentation].\n\n## Support\n\nIf you need support, start with the [troubleshooting guide]\nand work your way through the process that we've outlined.\n\nThat said, if you have questions, reach out to us\n[one way or another][communication].\n\n[announcement]: https://cncf.io/news/announcement/2015/07/new-cloud-native-computing-foundation-drive-alignment-among-container\n[Borg]: https://research.google.com/pubs/pub43438.html\n[CNCF]: https://www.cncf.io/about\n[communication]: https://github.com/kubernetes/community/blob/master/communication.md\n[community repository]: https://github.com/kubernetes/community\n[containerized applications]: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/\n[developer's documentation]: https://github.com/kubernetes/community/tree/master/contributors/devel\n[Docker environment]: https://docs.docker.com/engine\n[Go environment]: https://golang.org/doc/install\n[GoDoc]: https://godoc.org/k8s.io/kubernetes\n[GoDoc Widget]: https://godoc.org/k8s.io/kubernetes?status.svg\n[interactive tutorial]: http://kubernetes.io/docs/tutorials/kubernetes-basics\n[kubernetes.io]: http://kubernetes.io\n[Scalable Microservices with Kubernetes]: https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615\n[Submit Queue]: http://submit-queue.k8s.io/#/ci\n[Submit Queue Widget]: http://submit-queue.k8s.io/health.svg?v=1\n[troubleshooting guide]: https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/ \n\n[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/README.md?pixel)]()\n","isFork":true},{"name":"corvus","url":"https://github.com/pavmohan/corvus","description":"Track and share your favorite cheeses","lang":["Python","CSS","JavaScript","C","HTML"],"readme":"# Corvus\nTrack and share your favorite cheeses","isFork":null},{"name":"cs290-assignment4-part1","url":"https://github.com/ekrengel/cs290-assignment4-part1","description":"Basic PHP Assignment","lang":["PHP"],"readme":null,"isFork":null},{"name":"cs290-assignment1","url":"https://github.com/ekrengel/cs290-assignment1","description":"CS290 Assignment 1 Into to Git","lang":[],"readme":null,"isFork":null},{"name":"271-Assignments","url":"https://github.com/ekrengel/271-Assignments","description":"Assembly Language Assignments","lang":["Assembly"],"readme":null,"isFork":null},{"name":"cs290-assignment3","url":"https://github.com/ekrengel/cs290-assignment3","description":"Basic JavaScript Assignment","lang":["JavaScript","CSS","HTML"],"readme":"Basic JavaScript Assignment\n===========================\n\nThis part of the assignment will cover fundamental JavaScript topics outside the context of web development. Fully automated tests will be provided for all assignment components. These are a tool to help you assess if your code is working as intended. Passing the tests does not guarantee a good grade nor does failing them guarantee a poor grade. The grade will be based on the extent to which you meet the requirements for code in this class and the extent to which the requirements in the source files are met.\n\nWork Log\n--------\nIn order to be eligible to receive an A you must submit a work log. It will not contribute points directly to the assignment, but without it the maximum grade you will be eligible for is an 89%. The purpose is to allow me to tune the difficulty of assignments to ensure that you are getting the amount of practice needed without spending too much time on any given topic.\n\nThe format is as follows:\n\n```\nStart: Wed, 7 Jan 2015 21:42:26 -0800\nEnd: Wed, 7 Jan 2015 22:42:26 -0800\nTasks: During this period I drew a diagram of the classes I will be using to implement the message passing portion of the assignment.\n\nStart: Fri, 9 Jan 2015 18:00:00 -0800\nEnd: Fri, 9 Jan 2015 20:42:26 -0800\nTasks: During this period I debugged for 1 hour to find a type and implement the send function of the cleint.\n```\n\nYou can get most of this information from the git log if you run:\n`git log --pretty=format:\"Start: %nEnd: %ad %nTasks: %s\" --date=rfc`\nYou just need to fill in the Start: time. Use the same date format. I would suggest copying and pasting the End time and just editing the time (or day if you went through midnight in a work session).\n\nHave one entry per work session.\n\nPut this log in log.txt.\n\nInstructions\n------------\n- Create a new repository called cs290-assignment3 at the location you specified in week 1.\n- Clone this repository and copy all of the contents to that repository\n  - The directory structure should look like this:\n    - cs290-assignment3\n      - log.txt\n      - qunit_runner.html\n      - qunit\n      - src\n      - tests\n- **You are only allowed to modify the files in the src directory.**\n  - There are some additional files, those are just a hook for us to eventually support a better testing system.\n  - The comments in the files in the src directory describe the intended behavior of the functions that you need to fill in. Please ask on the discussion boards if you are confused about the intended functionality of any function.\n  - Within those files, your code should go between the `//your code here` comments.\n  - You should replace `return undefined;` with appropriate return statements.\n- Add **cs290osu** as a collaborator. This will be an account that myself and the TAs share to access your repos.\n- To test your code open the `qunit_runner.html` web page locally. Along with the red errors check for statements saying something like `Expected 4 assertions, but 2 were run`. This means that the test had to abort early due to a error it could not recover from. That means there are two additional tests that are not even getting run.\n  - Given the nature of automated tests, it is easy to see what the expected values are and simply hard code those returns. If you do this for any portion of the assignment, you will get a 0 for the whole assignment. (For example, variableModification should work for any value, not just 42, but we are only testing the value 42. If you hardcode the values `47`, `'42'` and `'42foo'` that is a violation of this rule. )\n","isFork":null},{"name":"donneler.github.io","url":"https://github.com/ekrengel/donneler.github.io","description":null,"lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"cs290-assignment3p2","url":"https://github.com/ekrengel/cs290-assignment3p2","description":"Assignment 3 Part 2: Adding AJAX and HTML","lang":["JavaScript","HTML"],"readme":null,"isFork":null},{"name":"cs290-assignment2","url":"https://github.com/ekrengel/cs290-assignment2","description":"HTML and CSS","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CS161","url":"https://github.com/ekrengel/CS161","description":"Intro to Programming in C++","lang":["C++"],"readme":"CS161\n=====\n\nIntro to Programming in C++\n","isFork":null}]}
,{"match":1,"linkedin_id":213967371,"gid":25,"git_name":"Tomek Drabas","git_login":"drabastomek","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":"drabas.t@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/drabastomek","bio":null,"repos":[{"name":"learningPySpark","url":"https://github.com/drabastomek/learningPySpark","description":"Code base for the Learning PySpark book (in preparation)","lang":["Jupyter Notebook","Python","Shell"],"readme":"# Learning PySpark\nCode base for the Learning PySpark book by Tomasz Drabas and Denny Lee. \n\n![Book cover](https://www.learningpyspark.com/wp-content/uploads/2017/02/Learning-PySpark-Banner-with-Text-Final-768x515.png)\n\nAvailable from [Packt](https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark) and [Amazon](https://www.amazon.com/Learning-PySpark-Tomasz-Drabas/dp/1786463709/ref=s9_simh_gw_g14_i1_r?_encoding=UTF8&fpl=fresh&pf_rd_m=ATVPDKIKX0DER&pf_rd_s=&pf_rd_r=F634WQ321FDKJHXRVD0K&pf_rd_t=36701&pf_rd_p=1cded295-23b4-40b1-8da6-7c1c9eb81d33&pf_rd_i=desktop).\n\n\n# Introduction\n\nIt is estimated that in 2013 the whole world produced around 4.4 zettabytes of data; that is, 4.4 billion terabytes! By 2020, we (as a human race) are expected to produce ten times that. With data getting larger literally by the second there is a growing appetite for making sense out of it.\n\nIn this book, we will guide you through the latest incarnation of Apache Spark using Python. We will show you how to read structured and unstructured data, how to use some fundamental data types available in PySpark, how to build machine learning models, operate on graphs, read streaming data and deploy your models in the cloud. Each chapter will tackle different problem and by the end of the book we hope you will be knowledgeable enough to solve other problems we did not have space to cover here.\n\n# Table of contents:\n\n1. Understanding Spark\n2. Resilient Distributed Dataset\n3. DataFrames\n4. Preparing Data for Modeling\n5. Introducing MLlib\n6. Introducing the ML Package\n7. GraphFrames\n8. TensorFrames\n9. Polyglot Persistence with Blaze\n10. Structured Streaming\n11. Packaging Spark Applications\n\n# About authors\n\n**Tomasz Drabas** is a Data Scientist working for Microsoft and currently residing in Seattle area. He has over 13 years of experience in data analytics and data science in numerous elds: advanced technology, airlines, telecommunications, nance and consulting he gained while working on three continents: Europe, Australia and North America. While in Australia, Tomasz has been working on his PhD in Operations Research with focus on choice modeling and revenue management applications in airline industry.\n\nAt Microsoft, Tomasz works with big data on a daily basis solving machine learning problems such as anomaly detection, churn prediction or pattern recognition using Spark.\n\nTomasz has also authored the Practical Data Analysis Cookbook published by Packt Publishing in 2016; you can purchase that book on [Amazon](https://www.amazon.com/Practical-Analysis-Cookbook-Tomasz-Drabas/dp/1783551666/ref=sr_1_1?ie=UTF8&qid=1487737534&sr=8-1&keywords=practical+data+analysis+cookbook), [Packt](https://www.packtpub.com/big-data-and-business-intelligence/practical-data-analysis-cookbook) and [O’Reilly](http://shop.oreilly.com/product/9781783551668.do).\n\n \n\n**Denny Lee** is a Principal Program Manager at Microsoft for the Azure DocumentDB team – Microsoft’s blazing fast, planet-scale managed document store service. He is a hands-on distributed systems and data sciences engineer with more than 18 years of experience developing internet-scale infrastructure, data platforms, and predictive analytics systems for both on-premise and cloud environments.\n\nHe has extensive experience in building green eld teams as well as turnaround / change catalyst. Prior to joining the Azure DocumentDB team, Denny worked as a Technology Evangelist at Databricks; he has been working with Apache Spark since 0.5. He was also the Senior Director of Data Sciences Engineering at Concur, and was on the incubation team that built Microsoft’s Hadoop on Windows and Azure service (currently known as HDInsight). Denny also has a Masters of Biomedical Informatics from Oregon Health and Sciences University and has architected and implemented powerful data solutions for enterprise Healthcare customers for the last fteen years.\n","isFork":null},{"name":"Learning-PySpark","url":"https://github.com/PacktPublishing/Learning-PySpark","description":"Code repository for Learning PySpark by Packt","lang":["Jupyter Notebook","Python","Shell"],"readme":"# Learning PySpark\nThis is the code repository for [Learning PySpark](https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark?utm_source=github&utm_medium=repository&utm_content=9781786463708), published by Packt. It contains all the supporting project files necessary to work through the book from start to finish.\n\n## About the book\nApache Spark is an open source framework for efficient cluster computing with a strong interface for data parallelism and fault tolerance. This book will show you how to leverage the power of Python and put it to use in the Spark ecosystem. You will start by getting a firm understanding of the Spark 2.0 architecture and how to set up a Python environment for Spark.\n\nYou will get familiar with the modules available in PySpark. You will learn how to abstract data with RDDs and DataFrames and understand the streaming capabilities of PySpark. Also, you will get a thorough overview of machine learning capabilities of PySpark using ML and MLlib, graph processing using GraphFrames, and polyglot persistence using Blaze. Finally, you will learn how to deploy your applications to the cloud using the spark-submit command.\n\nBy the end of this book, you will have established a firm understanding of the Spark Python API and how it can be used to build data-intensive applications.\n\n## Instructions and Navigation\nAll of the code is organized into folders. Each folder starts with a number followed by the application name. For example, Chapter 03.\n\nThe code will look like the following:\n          \n        data_key = sc.parallelize( \n             [('a', 4),('b', 3),('c', 2),('a', 8),('d', 2),('b', 1), \n             ('d', 3)],4) \n        data_key.reduceByKey(lambda x, y: x + y).collect() \n\n### Software requirements:\nFor this book you need a personal computer (can be either Windows machine, Mac, or Linux). To run Apache Spark, you will need Java 7+ and an installed and conﬁgured Python 2.6+ or 3.4+ environment; we use the Anaconda distribution of Python in version 3.5, which can be downloaded from https://www.continuum.io/downloads. \n\nThe Python modules we randomly use throughout the book come preinstalled with Anaconda. We also use GraphFrames and TensorFrames that can be loaded dynamically while starting a Spark instance: to load these you just need an Internet connection. It is ﬁ ne if some of those modules are not currently installed on your machine – we will guide you through the installation process. \n\n### Note:\nChapter 11 and Bouns Chapter 02 does not contain code files.\n\n## Related Products:\n* [Python Machine Learning](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning?utm_source=github&utm_medium=repository&utm_content=9781783555130)\n\n* [Spark for Python Developers](https://www.packtpub.com/big-data-and-business-intelligence/spark-python-developers?utm_source=github&utm_medium=repository&utm_content=9781784399696)\n\n* [Python Data Analysis Cookbook](https://www.packtpub.com/big-data-and-business-intelligence/python-data-analysis-cookbook?utm_source=github&utm_medium=repository&utm_content=9781785282287)\n\n### Suggestions and Feedback\n[Click here](https://docs.google.com/forms/d/e/1FAIpQLSe5qwunkGf6PUvzPirPDtuy1Du5Rlzew23UBp2S-P3wB-GcwQ/viewform) if you have any feedback or suggestions.\n\n\n","isFork":null},{"name":"PySparkCookbook","url":"https://github.com/drabastomek/PySparkCookbook","description":"A repository for a PySpark Cookbook by Tomasz Drabas and Denny Lee","lang":["Shell","HTML","Jupyter Notebook","Python"],"readme":"# PySpark Cookbook\nCode base for the PySpark Coookbook by Denny Lee and Tomasz Drabas. \n\n![Book cover](https://www.learningpyspark.com/images/PySparkCookbook/Cover.001.png)\n\n\n# Introduction\n\nApache Spark is an open source framework for efficient cluster computing with a strong interface for data parallelism and fault tolerance. This book presents effective and time-saving recipes for leveraging the power of Python and putting it to use in the Spark ecosystem.\n\nYou'll start by learning the Apache Spark architecture and how to set up a Python environment for Spark. You’ll then get familiar with the modules available in PySpark and start using them effortlessly. In addition to this, you’ll discover how to abstract data with RDDs and DataFrames, and understand the streaming capabilities of PySpark. You'll then move on to using ML and MLlib in order to solve any problems related to the machine learning capabilities of PySpark and use GraphFrames to solve graph-processing problems.\n\nBy the end of this book, you will be able to use the Python API for Apache Spark to solve any problems associated with building data-intensive applications.\n\n# Table of contents:\n\n1. Installing and configuring Spark\n2. Abstracting data with RDDs\n3. Abstracting data with DataFrames\n4. Preparing Data for Modeling\n5. Introducing MLlib\n6. Introducing the ML Module\n7. Structured Streaming with PySpark\n8. GraphFrames - Graph Theory with PySpark\n\n# About authors\n**Denny Lee** is a Technical Product Marketing Manager with Databricks, working as closely to Apache Spark as humanly possible. Previously, Denny was a Principal Program Manager at Microsoft for the Azure Cosmos DB team – Microsoft’s blazing fast, planet-scale managed document store service. He is a hands-on distributed systems and data sciences engineer with more than 20 years of experience developing Internet-scale infrastructure, data platforms, and predictive analytics systems for both on-premise and cloud environments.\n\nHe has extensive experience in building green field teams as well as turnaround / change catalyst. Prior to joining the Azure Cosmos DB team, Denny worked as a Technology Evangelist at Databricks; he has been working with Apache Spark since 0.5. He was also the Senior Director of Data Sciences Engineering at Concur, and was on the incubation team that built Microsoft’s Hadoop on Windows and Azure service (currently known as HDInsight). Denny also has a Masters of Biomedical Informatics from Oregon Health and Sciences University and has architected and implemented powerful data solutions for enterprise Healthcare customers for the last fifteen years.\n\n**Tomasz Drabas** is a Senior Data Scientist working for Microsoft and currently residing in Seattle area. He has over 15 years of experience in data analytics and data science in numerous fields: advanced technology, airlines, telecommunications, finance and consulting he gained while working on three continents: Europe, Australia and North America. While in Australia, Tomasz has been working on his PhD in Operations Research with focus on choice modeling and revenue management applications in the airline industry.\n\nAt Microsoft, Tomasz works with big data on a daily basis solving machine learning problems such as anomaly detection, churn prediction or pattern recognition using Spark.\n\nTomasz has also authored the Learning PySpark with Denny Lee in 2017 and the Practical Data Analysis Cookbook (Python focused) published by Packt Publishing in 2016.  \n\n\n\nYou can purchase our books and videos from\n\n* Packt Publishing\n    * Learning PySpark: https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark\n    * Learning PySpark (videos): https://www.packtpub.com/big-data-and-business-intelligence/learning-pyspark-video\n    * Practical Data Analysis Cookbook: https://www.amazon.com/Practical-Analysis-Cookbook-Tomasz-Drabas/dp/1783551666\n* Amazon \n    * Learning PySpark: https://www.amazon.com/Learning-PySpark-Tomasz-Drabas/dp/1786463709\n    * Practical Data Analysis Cookbook: https://www.packtpub.com/big-data-and-business-intelligence/practical-data-analysis-cookbook\n* O'Reilly \n    * Learning PySpark: http://shop.oreilly.com/product/9781786463708.do\n    * Learning PySpark (videos): http://shop.oreilly.com/product/0636920172277.do\n    * Introduction to Apache Spark 2.0: http://shop.oreilly.com/product/0636920088851.do\n    * Practical Data Analysis Cookbook: http://shop.oreilly.com/product/9781783551668.do\n","isFork":null},{"name":"practicalDataAnalysisCookbook","url":"https://github.com/drabastomek/practicalDataAnalysisCookbook","description":"A collection of data and codes to supplement the practicalDataAnalysisCookbook (in preparation)","lang":["Python","HTML","Shell","PostScript","TeX"],"readme":"# practicalDataAnalysisCookbook\nA collection of data and codes to supplement the practicalDataAnalysisCookbook (in preparation)\n","isFork":null},{"name":"bigdl-fun","url":"https://github.com/drabastomek/bigdl-fun","description":"BigDL repository for MLADS 2017","lang":["Jupyter Notebook"],"readme":"# Introduction to Deep Learning on HDInsight with Intel Deep Learning framework: BigDL (R) Intel\r\n\r\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Microsoft_logo_%282012%29.svg/1280px-Microsoft_logo_%282012%29.svg.png\" height=\"60px\">&nbsp;&nbsp;&nbsp;<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Intel-logo.svg/2000px-Intel-logo.svg.png\" height=\"60px\">\r\n\r\n## Presenters\r\n* Denny Lee, Principal Program Manager, CosmosDB \r\n* Tom Drabas, Data Scientist, WDG\r\n\r\n## In close cooperation with Intel\r\n* Sergey Ermolin, Power/Performance Optimization\r\n* Ding Ding, Software Engineer\r\n* Jiao Wang, Software Engineer\r\n* Jason Dai, Senior Principle Engineer and CTO, Big Data Technologies\r\n* Yiheng, Wang, Software Engineer\r\n* Xianyan Jia, Software Engineer\r\n\r\n## Special thanks to\r\n* Felix Cheung, Principal Software Engineer\r\n* Xiaoyong Zhu, Program Manager\r\n* Alejandro Guerrero Gonzalez, Senior Software Engineer\r\n\r\n---------\r\n\r\n# Setting up the environment\r\n\r\n### 1. Clone the Github repository\r\n\r\nThe folders in this repo:\r\n\r\n1. **data** folder - contains a set of 4 files that can be downloaded from http://yann.lecun.com/exdb/mnist/:\r\n    1. *train-images-idx3-ubyte* - set of training images in a binary format with a specific schema (we'll get to that)\r\n    2. *train-labels-idx1-ubyte* - corresponding set of training labels\r\n    3. *t10k-images-idx3-ubyte* - set of testing (validation) images\r\n    4. *t10k-labels-idx1-ubyte* - corresponding set of testing (validation) labels\r\n2. **jars** folder - contains two compiled jars for the BigDL:\r\n    1. *bigdl-0.2.0-SNAPSHOT-spark-2.0-jar-with-dependencies.jar* - BigDL compiled for Spark 2.0\r\n    2. *bigdl-0.2.0-SNAPSHOT-spark-2.1-jar-with-dependencies.jar* - BigDL compiled for Spark 2.1\r\n3. **notebook** folder - contains the notebook for the workshop\r\n\r\n### 2. Upload BigDL jar\r\n\r\nGrab the jar from the **jars** folder appropriate for your version of Spark.\r\n\r\n1. Go to Azure Dashboard and click on your cluster. Scroll down to the Storage accounts ![Storage options](http://tomdrabas.com/data/BigDL/StorageAccount.png)\r\n2. Click on the default storage account ![Default storage](http://tomdrabas.com/data/BigDL/DefaultStorageAccount.png)\r\n3. Go to Blobs ![Blobs](http://tomdrabas.com/data/BigDL/Blobs.png)\r\n4. Select the default container \r\n![Container](http://tomdrabas.com/data/BigDL/DefaultContainer_obs.png)\r\n5. Upload the jar appropriate for your version of Spark to the root of the folder ![Upload](http://tomdrabas.com/data/BigDL/Upload_obs.png)\r\n6. Check if uploaded successfully ![Uploaded](http://tomdrabas.com/data/BigDL/UploadedJar.png)\r\n\r\n### 3. Upload the data\r\n\r\nSimilarly to uploading the BigDL upload the data from the **data** folder. Upload the data into the `/tmp` folder in your default storage.","isFork":null},{"name":"learningPySpark_video","url":"https://github.com/drabastomek/learningPySpark_video","description":"Learning PySpark video series","lang":["Jupyter Notebook"],"readme":"# learningPySpark_video\nLearning PySpark video series\n","isFork":null},{"name":"TensorFlowOnSpark","url":"https://github.com/drabastomek/TensorFlowOnSpark","description":"TensorFlowOnSpark brings TensorFlow programs onto Apache Spark clusters","lang":["Shell","Python"],"readme":"<!--\nCopyright 2017 Yahoo Inc.\nLicensed under the terms of the Apache 2.0 license.\nPlease see LICENSE file in the project root for terms.\n-->\n# TensorFlowOnSpark\n\n## What's TensorFlowOnSpark?\n\nTensorFlowOnSpark brings scalable deep learning to [Apache Hadoop](http://hadoop.apache.org) and [Apache Spark](http://spark.apache.org)\nclusters. By combining salient features from deep learning framework\n[TensorFlow](https://www.tensorflow.org) and big-data frameworks\nApache Spark and Apache Hadoop, TensorFlowOnSpark enables distributed\ndeep learning on a cluster of GPU and CPU servers.\n\nTensorFlowOnSpark enables distributed TensorFlow training and\ninference on Apache Spark clusters.  It seeks to minimize the amount\nof code changes required to run existing TensorFlow programs on a\nshared grid.  Its Spark-compatible API helps manage the TensorFlow\ncluster with the following steps:\n\n1. **Startup** - launches the Tensorflow main function on the executors, along with listeners for data/control messages.\n1. **Data ingestion**\n  - **Readers & QueueRunners** - leverages TensorFlow's [Reader](https://www.tensorflow.org/how_tos/reading_data/#reading_from_files) mechanism to read data files directly from HDFS.\n  - **Feeding** - sends Spark RDD data into the TensorFlow nodes using the [feed_dict](https://www.tensorflow.org/how_tos/reading_data/#feeding) mechanism.  Note that we leverage the [Hadoop Input/Output Format](https://github.com/tensorflow/ecosystem/tree/master/hadoop) for access to TFRecords on HDFS.\n1. **Shutdown** - shuts down the Tensorflow workers and PS nodes on the executors.\n\nWe have also\n[enhanced](https://github.com/yahoo/tensorflow/tree/yahoo) TensorFlow\nto support direct access to remote memory (RDMA) on Infiniband\nnetworks.\n\nTensorFlowOnSpark was developed by Yahoo for large-scale distributed\ndeep learning on our Hadoop clusters in Yahoo's private cloud. \n\n\n## Why TensorFlowOnSpark?\n\nTensorFlowOnSpark provides some important benefits (see [our\nblog](http://yahoohadoop.tumblr.com/post/157196317141/open-sourcing-tensorflowonspark-distributed-deep))\nover alternative deep learning solutions.\n   * Easily migrate all existing TensorFlow programs with <10 lines of code change;\n   * Support all TensorFlow functionalities: synchronous/asynchronous training, model/data parallelism, inferencing and TensorBoard;\n   * Server-to-server direct communication achieves faster learning when available;\n   * Allow datasets on HDFS and other sources pushed by Spark or pulled by TensorFlow; \n   * Easily integrate with your existing data processing pipelines and machine learning algorithms (ex. MLlib, CaffeOnSpark);\n   * Easily deployed on cloud or on-premise: CPU & GPU, Ethernet and Infiniband. \n\n\n## Using TensorFlowOnSpark\n\nPlease check TensorFlowOnSpark [wiki site](../../wiki) for detailed\ndocumentations such as getting started guides for [YARN\ncluster](../../wiki/GetStarted_YARN) and [AWS EC2\ncluster](../../wiki/GetStarted_EC2). A [Conversion\nGuide](../../wiki/Conversion) has been provided to help you convert\nyour TensorFlow programs.\n\n## Mailing List\n\nPlease join [TensorFlowOnSpark user group](https://groups.google.com/forum/#!forum/TensorFlowOnSpark-users) for discussions and questions.\n\n## License\n\nThe use and distribution terms for this software are covered by the Apache 2.0 license.\nSee [LICENSE](LICENSE) file for terms.\n","isFork":true},{"name":"sparklingml","url":"https://github.com/drabastomek/sparklingml","description":"Machine Learning Pipeline Stages for Spark (exposed in Scala/Java + Python)","lang":["Scala","Shell"],"readme":"[![buildstatus](https://travis-ci.org/sparklingpandas/sparklingml.svg?branch=master)](https://travis-ci.org/sparklingpandas/sparklingml)\n[![codecov.io](http://codecov.io/github/sparklingpandas/sparklingml/coverage.svg?branch=master)](http://codecov.io/github/sparklingpandas/sparklingml?branch=master)\n\n# sparklingml\nMachine Learning Pipeline Stages for Spark (exposed in Scala/Java + Python)\n\n## Why?\n\nSparklingML's goal is to expose additional machine learning stages for Spark with the pipeline interface.\n\n## Status\n\nSuper early! Come join!\n\n## Including in your build\n\nSparklingML is not yet ready for production use.\n\n## License\n\nSparklingML is licensed under the Apache 2 license. Some additional components may be under a different license.\n","isFork":true},{"name":"keras","url":"https://github.com/drabastomek/keras","description":"Deep Learning library for Python. Runs on TensorFlow, Theano, or CNTK.","lang":["Makefile","Python"],"readme":"﻿# Keras: Deep Learning for Python\n\n![Keras logo](https://s3.amazonaws.com/keras.io/img/keras-logo-medium.png)\n\n[![Build Status](https://travis-ci.org/fchollet/keras.svg?branch=master)](https://travis-ci.org/fchollet/keras)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?maxAge=2592000)](https://github.com/fchollet/keras/blob/master/LICENSE)\n\n## You have just found Keras.\n\nKeras is a high-level neural networks API, written in Python and capable of running on top of [TensorFlow](https://github.com/tensorflow/tensorflow), [CNTK](https://github.com/Microsoft/cntk), or [Theano](https://github.com/Theano/Theano). It was developed with a focus on enabling fast experimentation. *Being able to go from idea to result with the least possible delay is key to doing good research.*\n\nUse Keras if you need a deep learning library that:\n\n- Allows for easy and fast prototyping (through user friendliness, modularity, and extensibility).\n- Supports both convolutional networks and recurrent networks, as well as combinations of the two.\n- Runs seamlessly on CPU and GPU.\n\nRead the documentation at [Keras.io](https://keras.io).\n\nKeras is compatible with: __Python 2.7-3.6__.\n\n\n------------------\n\n\n## Guiding principles\n\n- __User friendliness.__ Keras is an API designed for human beings, not machines. It puts user experience front and center. Keras follows best practices for reducing cognitive load: it offers consistent & simple APIs, it minimizes the number of user actions required for common use cases, and it provides clear and actionable feedback upon user error.\n\n- __Modularity.__ A model is understood as a sequence or a graph of standalone, fully-configurable modules that can be plugged together with as little restrictions as possible. In particular, neural layers, cost functions, optimizers, initialization schemes, activation functions, regularization schemes are all standalone modules that you can combine to create new models.\n\n- __Easy extensibility.__ New modules are simple to add (as new classes and functions), and existing modules provide ample examples. To be able to easily create new modules allows for total expressiveness, making Keras suitable for advanced research.\n\n- __Work with Python__. No separate models configuration files in a declarative format. Models are described in Python code, which is compact, easier to debug, and allows for ease of extensibility.\n\n\n------------------\n\n\n## Getting started: 30 seconds to Keras\n\nThe core data structure of Keras is a __model__, a way to organize layers. The simplest type of model is the [`Sequential`](https://keras.io/getting-started/sequential-model-guide) model, a linear stack of layers. For more complex architectures, you should use the [Keras functional API](https://keras.io/getting-started/functional-api-guide), which allows to build arbitrary graphs of layers.\n\nHere is the `Sequential` model:\n\n```python\nfrom keras.models import Sequential\n\nmodel = Sequential()\n```\n\nStacking layers is as easy as `.add()`:\n\n```python\nfrom keras.layers import Dense, Activation\n\nmodel.add(Dense(units=64, input_dim=100))\nmodel.add(Activation('relu'))\nmodel.add(Dense(units=10))\nmodel.add(Activation('softmax'))\n```\n\nOnce your model looks good, configure its learning process with `.compile()`:\n\n```python\nmodel.compile(loss='categorical_crossentropy',\n              optimizer='sgd',\n              metrics=['accuracy'])\n```\n\nIf you need to, you can further configure your optimizer. A core principle of Keras is to make things reasonably simple, while allowing the user to be fully in control when they need to (the ultimate control being the easy extensibility of the source code).\n```python\nmodel.compile(loss=keras.losses.categorical_crossentropy,\n              optimizer=keras.optimizers.SGD(lr=0.01, momentum=0.9, nesterov=True))\n```\n\nYou can now iterate on your training data in batches:\n\n```python\n# x_train and y_train are Numpy arrays --just like in the Scikit-Learn API.\nmodel.fit(x_train, y_train, epochs=5, batch_size=32)\n```\n\nAlternatively, you can feed batches to your model manually:\n\n```python\nmodel.train_on_batch(x_batch, y_batch)\n```\n\nEvaluate your performance in one line:\n\n```python\nloss_and_metrics = model.evaluate(x_test, y_test, batch_size=128)\n```\n\nOr generate predictions on new data:\n\n```python\nclasses = model.predict(x_test, batch_size=128)\n```\n\nBuilding a question answering system, an image classification model, a Neural Turing Machine, or any other model is just as fast. The ideas behind deep learning are simple, so why should their implementation be painful?\n\nFor a more in-depth tutorial about Keras, you can check out:\n\n- [Getting started with the Sequential model](https://keras.io/getting-started/sequential-model-guide)\n- [Getting started with the functional API](https://keras.io/getting-started/functional-api-guide)\n\nIn the [examples folder](https://github.com/fchollet/keras/tree/master/examples) of the repository, you will find more advanced models: question-answering with memory networks, text generation with stacked LSTMs, etc.\n\n\n------------------\n\n\n## Installation\n\nBefore installing Keras, please install one of its backend engines: TensorFlow, Theano, or CNTK. We recommend the TensorFlow backend.\n\n- [TensorFlow installation instructions](https://www.tensorflow.org/install/).\n- [Theano installation instructions](http://deeplearning.net/software/theano/install.html#install).\n- [CNTK installation instructions](https://docs.microsoft.com/en-us/cognitive-toolkit/setup-cntk-on-your-machine).\n\nYou may also consider installing the following **optional dependencies**:\n\n- cuDNN (recommended if you plan on running Keras on GPU).\n- HDF5 and h5py (required if you plan on saving Keras models to disk).\n- graphviz and pydot (used by [visualization utilities](https://keras.io/visualization/) to plot model graphs).\n\nThen, you can install Keras itself. There are two ways to install Keras:\n\n- **Install Keras from PyPI (recommended):**\n\n```sh\nsudo pip install keras\n```\n\nIf you are using a virtualenv, you may want to avoid using sudo:\n\n```sh\npip install keras\n```\n\n- **Alternatively: install Keras from the Github source:**\n\nFirst, clone Keras using `git`:\n\n```sh\ngit clone https://github.com/fchollet/keras.git\n```\n\n Then, `cd` to the Keras folder and run the install command:\n```sh\ncd keras\nsudo python setup.py install\n```\n\n------------------\n\n\n## Switching from TensorFlow to CNTK or Theano\n\nBy default, Keras will use TensorFlow as its tensor manipulation library. [Follow these instructions](https://keras.io/backend/) to configure the Keras backend.\n\n------------------\n\n\n## Support\n\nYou can ask questions and join the development discussion:\n\n- On the [Keras Google group](https://groups.google.com/forum/#!forum/keras-users).\n- On the [Keras Slack channel](https://kerasteam.slack.com). Use [this link](https://keras-slack-autojoin.herokuapp.com/) to request an invitation to the channel.\n\nYou can also post **bug reports and feature requests** (only) in [Github issues](https://github.com/fchollet/keras/issues). Make sure to read [our guidelines](https://github.com/fchollet/keras/blob/master/CONTRIBUTING.md) first.\n\n\n------------------\n\n\n## Why this name, Keras?\n\nKeras (κέρας) means _horn_ in Greek. It is a reference to a literary image from ancient Greek and Latin literature, first found in the _Odyssey_, where dream spirits (_Oneiroi_, singular _Oneiros_) are divided between those who deceive men with false visions, who arrive to Earth through a gate of ivory, and those who announce a future that will come to pass, who arrive through a gate of horn. It's a play on the words κέρας (horn) / κραίνω (fulfill), and ἐλέφας (ivory) / ἐλεφαίρομαι (deceive).\n\nKeras was initially developed as part of the research effort of project ONEIROS (Open-ended Neuro-Electronic Intelligent Robot Operating System).\n\n>_\"Oneiroi are beyond our unravelling --who can be sure what tale they tell? Not all that men look for comes to pass. Two gates there are that give passage to fleeting Oneiroi; one is made of horn, one of ivory. The Oneiroi that pass through sawn ivory are deceitful, bearing a message that will not be fulfilled; those that come out through polished horn have truth behind them, to be accomplished for men who see them.\"_ Homer, Odyssey 19. 562 ff (Shewring translation).\n\n------------------\n","isFork":true},{"name":"spark-deep-learning","url":"https://github.com/drabastomek/spark-deep-learning","description":"Deep Learning Pipelines for Apache Spark","lang":["Makefile","Shell","Scala","Python"],"readme":"# Deep Learning Pipelines for Apache Spark\n\nDeep Learning Pipelines provides high-level APIs for scalable deep learning in Python. The\nlibrary comes from Databricks and leverages Spark for its two strongest facets:\n1. In the spirit of Spark and Spark MLlib, it provides easy-to-use APIs that enable deep learning\nin very few lines of code.\n2. It uses Spark's powerful distributed engine to scale out deep learning on massive datasets.\n\nCurrently, TensorFlow and TensorFlow-backed Keras workflows are supported, with a focus on model\napplication and transfer learning on image data at scale, with hyper-parameter tuning in the works.\nFurthermore, it provides tools for data scientists and machine learning experts to turn deep\nlearning models into SQL functions that can be used by a much wider group of users. It does not\nperform single-model distributed training - this is an area of active research, and here we aim to\nprovide the most practical solutions for the majority of deep learning use cases.\n\nFor an overview of the library, see the Databrick [blog post](https://databricks.com/blog/2017/06/06/databricks-vision-simplify-large-scale-deep-learning.html?preview=true) introducing Deep Learning Pipelines.\nFor the various use cases the package serves, see the [Quick user guide](#quick-user-guide) section below.\n\nThe library is in its early days, and we welcome everyone's feedback and contribution.\n\nAuthors: Bago Amirbekian, Joseph Bradley, Sue Ann Hong, Tim Hunter, Philip Yang \n\n\n## Building and running unit tests\n\nTo compile this project, run `build/sbt assembly` from the project home directory.\nThis will also run the Scala unit tests.\n\nTo run the Python unit tests, run the `run-tests.sh` script from the `python/` directory.\nYou will need to set a few environment variables, e.g.\n```bash\nsparkdl$ SPARK_HOME=/usr/local/lib/spark-2.1.1-bin-hadoop2.7 PYSPARK_PYTHON=python2 SCALA_VERSION=2.11.8 SPARK_VERSION=2.1.1 ./python/run-tests.sh\n```\n\n\n## Spark version compatibility\n\nSpark 2.1.1 and Python 2.7 are recommended.\n\n\n\n## Quick user guide\n\nThe current version of Deep Learning Pipelines provides a suite of tools around working with and\nprocessing images using deep learning. The tools can be categorized as\n* [Working with images in Spark](#working-with-images-in-spark) : natively in Spark DataFrames\n* [Transfer learning](#transfer-learning) : a super quick way to leverage deep learning\n* [Applying deep learning models at scale](#applying-deep-learning-models-at-scale) : apply your \nown or known popular models to image data to make predictions or transform them into features\n* Deploying models as SQL functions : empower everyone by making deep learning available in SQL (coming soon)\n* Distributed hyper-parameter tuning : via Spark MLlib Pipelines (coming soon)\n\nTo try running the examples below, check out the Databricks notebook\n[Deep Learning Piplines on Databricks](https://databricks-prod-cloudfront.cloud.databricks.com/public/4027ec902e239c93eaaa8714f173bcfc/5669198905533692/3647723071348946/3983381308530741/latest.html).\n\n\n### Working with images in Spark\nThe first step to applying deep learning on images is the ability to load the images. Deep Learning\nPipelines includes utility functions that can load millions of images into a Spark DataFrame and\ndecode them automatically in a distributed fashion, allowing manipulation at scale.\n\n```python\nfrom sparkdl import readImages\nimage_df = readImages(\"/data/myimages\")\n```\n\nThe resulting DataFrame contains a string column named \"filePath\" containing the path to each image\nfile, and a image struct (\"`SpImage`\") column named \"image\" containing the decoded image data.\n\n```python\nimage_df.show()\n```\n\nThe goal is to add support for more data types, such as text and time series, as there is interest.\n\n\n### Transfer learning\nDeep Learning Pipelines provides utilities to perform \n[transfer learning](https://en.wikipedia.org/wiki/Transfer_learning) on images, which is one of\nthe fastest (code and run-time-wise) ways to start using deep learning. Using Deep Learning\nPipelines, it can be done in just several lines of code.\n\n```python\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\nfrom pyspark.ml import Pipeline\nfrom sparkdl import DeepImageFeaturizer\n\nfeaturizer = DeepImageFeaturizer(inputCol=\"image\", outputCol=\"features\", modelName=\"InceptionV3\")\nlr = LogisticRegression(maxIter=20, regParam=0.05, elasticNetParam=0.3, labelCol=\"label\")\np = Pipeline(stages=[featurizer, lr])\n\nmodel = p.fit(train_images_df)    # train_images_df is a dataset of images (SpImage) and labels\n\n# Inspect training error\ndf = model.transform(train_images_df.limit(10)).select(\"image\", \"probability\",  \"uri\", \"label\")\npredictionAndLabels = df.select(\"prediction\", \"label\")\nevaluator = MulticlassClassificationEvaluator(metricName=\"accuracy\")\nprint(\"Training set accuracy = \" + str(evaluator.evaluate(predictionAndLabels)))\n```\n\n\n### Applying deep learning models at scale\nSpark DataFrames are a natural construct for applying deep learning models to a large-scale dataset.\nDeep Learning Pipelines provides a set of (Spark MLlib) Transformers for applying TensorFlow Graphs\nand TensorFlow-backed Keras Models at scale. In addition, popular images models can be applied out\nof the box, without requiring any TensorFlow or Keras code. The Transformers, backed by the\nTensorframes library, efficiently handle the distribution of models and data to Spark workers.\n\n#### Applying popular image models\nThere are many well-known deep learning models for images. If the task at hand is very similar to\nwhat the models provide (e.g. object recognition with ImageNet classes), or for pure exploration,\none can use the Transformer `DeepImagePredictor` by simply specifying the model name.\n\n```python\nfrom sparkdl import readImages, DeepImagePredictor\n\npredictor = DeepImagePredictor(inputCol=\"image\", outputCol=\"predicted_labels\",\n                               modelName=\"InceptionV3\", decodePredictions=True, topK=10)\nimage_df = readImages(\"/data/myimages\")\npredictions_df = predictor.transform(image_df)\n```\n\n#### For TensorFlow users\nDeep Learning Pipelines provides a Transformer that will apply the given TensorFlow Graph to a\nDataFrame containing a column of images (e.g. loaded using the utilities described in the previous\n  section). Here is a very simple example of how a TensorFlow Graph can be used with the\nTransformer. In practice, the TensorFlow Graph will likely be restored from files before calling\n`TFImageTransformer`.\n\n```python\nfrom sparkdl import readImages, TFImageTransformer\nfrom sparkdl.transformers import utils\nimport tensorflow as tf\n\ng = tf.Graph()\nwith g.as_default():\n    image_arr = utils.imageInputPlaceholder()\n    resized_images = tf.image.resize_images(image_arr, (299, 299))\n    # the following step is not necessary for this graph, but can be for graphs with variables, etc\n    frozen_graph = utils.stripAndFreezeGraph(g.as_graph_def(add_shapes=True), tf.Session(graph=g),\n                                             [resized_images])\n\ntransformer = TFImageTransformer(inputCol=\"image\", outputCol=\"predictions\", graph=frozen_graph,\n                                 inputTensor=image_arr, outputTensor=resized_images,\n                                 outputMode=\"image\")\nimage_df = readImages(\"/data/myimages\")\nprocessed_image_df = transformer.transform(image_df)\n```\n\n\n\n#### For Keras users\nFor applying Keras models in a distributed manner using Spark, [`KerasImageFileTransformer`](link_here)\nworks on TensorFlow-backed Keras models. It\n* Internally creates a DataFrame containing a column of images by applying the user-specified image\nloading and processing function to the input DataFrame containing a column of image URIs\n* Loads a Keras model from the given model file path\n* Applies the model to the image DataFrame\n\nThe difference in the API from `TFImageTransformer` above stems from the fact that usual Keras\nworkflows have very specific ways to load and resize images that are not part of the TensorFlow Graph.\n\n\nTo use the transformer, we first need to have a Keras model stored as a file. For this example we'll \njust save the Keras built-in InceptionV3 model instead of training one.\n\n```python\nfrom keras.applications import InceptionV3\n\nmodel = InceptionV3(weights=\"imagenet\")\nmodel.save('/tmp/model-full.h5')\n```\n\nNow on the prediction side, we can do:\n\n```python\nfrom keras.applications.inception_v3 import preprocess_input\nfrom keras.preprocessing.image import img_to_array, load_img\nimport numpy as np\nimport os\nfrom sparkdl import KerasImageFileTransformer\n\ndef loadAndPreprocessKerasInceptionV3(uri):\n    # this is a typical way to load and prep images in keras\n    image = img_to_array(load_img(uri, target_size=(299, 299)))\n    image = np.expand_dims(image, axis=0)\n    return preprocess_input(image)\n\ntransformer = KerasImageFileTransformer(inputCol=\"uri\", outputCol=\"predictions\",\n                                        modelFile=\"/tmp/model-full.h5\",\n                                        imageLoader=loadAndPreprocessKerasInceptionV3,\n                                        outputMode=\"vector\")\n\nfiles = [os.path.abspath(os.path.join(dirpath, f)) for f in os.listdir(\"/data/myimages\") if f.endswith('.jpg')]\nuri_df = sqlContext.createDataFrame(files, StringType()).toDF(\"uri\")\n\nfinal_df = transformer.transform(uri_df)\n```\n\n\n## Releases:\n\n**TBA**\n","isFork":true},{"name":"analytics-zoo","url":"https://github.com/drabastomek/analytics-zoo","description":"Deep learning powered big data analytics using BigDL on Apache Spark","lang":["Jupyter Notebook","Python","Scala"],"readme":"# Analytics Zoo\nZoo for deep learning powered big data analytics using [BigDL](https://github.com/intel-analytics/BigDL) on Apache Spark\n","isFork":true},{"name":"spark","url":"https://github.com/drabastomek/spark","description":"Mirror of Apache Spark","lang":["Shell","Batchfile","R","Makefile","C","Java","Scala","JavaScript","CSS","HTML","PowerShell","Python","Roff","ANTLR","PLpgSQL","SQLPL","Thrift"],"readme":"# Apache Spark\n\nSpark is a fast and general cluster computing system for Big Data. It provides\nhigh-level APIs in Scala, Java, Python, and R, and an optimized engine that\nsupports general computation graphs for data analysis. It also supports a\nrich set of higher-level tools including Spark SQL for SQL and DataFrames,\nMLlib for machine learning, GraphX for graph processing,\nand Spark Streaming for stream processing.\n\n<http://spark.apache.org/>\n\n\n## Online Documentation\n\nYou can find the latest Spark documentation, including a programming\nguide, on the [project web page](http://spark.apache.org/documentation.html).\nThis README file only contains basic setup instructions.\n\n## Building Spark\n\nSpark is built using [Apache Maven](http://maven.apache.org/).\nTo build Spark and its example programs, run:\n\n    build/mvn -DskipTests clean package\n\n(You do not need to do this if you downloaded a pre-built package.)\n\nYou can build Spark using more than one thread by using the -T option with Maven, see [\"Parallel builds in Maven 3\"](https://cwiki.apache.org/confluence/display/MAVEN/Parallel+builds+in+Maven+3).\nMore detailed documentation is available from the project site, at\n[\"Building Spark\"](http://spark.apache.org/docs/latest/building-spark.html).\n\nFor general development tips, including info on developing Spark using an IDE, see [\"Useful Developer Tools\"](http://spark.apache.org/developer-tools.html).\n\n## Interactive Scala Shell\n\nThe easiest way to start using Spark is through the Scala shell:\n\n    ./bin/spark-shell\n\nTry the following command, which should return 1000:\n\n    scala> sc.parallelize(1 to 1000).count()\n\n## Interactive Python Shell\n\nAlternatively, if you prefer Python, you can use the Python shell:\n\n    ./bin/pyspark\n\nAnd run the following command, which should also return 1000:\n\n    >>> sc.parallelize(range(1000)).count()\n\n## Example Programs\n\nSpark also comes with several sample programs in the `examples` directory.\nTo run one of them, use `./bin/run-example <class> [params]`. For example:\n\n    ./bin/run-example SparkPi\n\nwill run the Pi example locally.\n\nYou can set the MASTER environment variable when running examples to submit\nexamples to a cluster. This can be a mesos:// or spark:// URL,\n\"yarn\" to run on YARN, and \"local\" to run\nlocally with one thread, or \"local[N]\" to run locally with N threads. You\ncan also use an abbreviated class name if the class is in the `examples`\npackage. For instance:\n\n    MASTER=spark://host:7077 ./bin/run-example SparkPi\n\nMany of the example programs print usage help if no params are given.\n\n## Running Tests\n\nTesting first requires [building Spark](#building-spark). Once Spark is built, tests\ncan be run using:\n\n    ./dev/run-tests\n\nPlease see the guidance on how to\n[run tests for a module, or individual tests](http://spark.apache.org/developer-tools.html#individual-tests).\n\n## A Note About Hadoop Versions\n\nSpark uses the Hadoop core library to talk to HDFS and other Hadoop-supported\nstorage systems. Because the protocols have changed in different versions of\nHadoop, you must build Spark against the same version that your cluster runs.\n\nPlease refer to the build documentation at\n[\"Specifying the Hadoop Version\"](http://spark.apache.org/docs/latest/building-spark.html#specifying-the-hadoop-version)\nfor detailed guidance on building for a particular distribution of Hadoop, including\nbuilding for particular Hive and Hive Thriftserver distributions.\n\n## Configuration\n\nPlease refer to the [Configuration Guide](http://spark.apache.org/docs/latest/configuration.html)\nin the online documentation for an overview on how to configure Spark.\n\n## Contributing\n\nPlease review the [Contribution to Spark guide](http://spark.apache.org/contributing.html)\nfor information on how to get started contributing to the project.\n","isFork":true},{"name":"Python-Suffix-Tree","url":"https://github.com/drabastomek/Python-Suffix-Tree","description":"Suffix tree for string searching","lang":["Python"],"readme":"Suffix Trees in Python\n================================\n\nBased off of Mark Nelson's C++ implementation of Ukkonen's algorithm. Ukkonen's\nalgorithm gives a O(n) + O(k) contruction time for a suffix tree, where n is \nthe length of the string and k is the size of the alphabet of that string. \nUkkonen's is an online algorithm, processing the input sequentially and producing \na valid suffix tree at each character.\n\nHow to use\n----------\n\n\tstring = \"I need to be searched!\"\n    tree = SuffixTree(string)\n\tindex_of_need = tree.find_substring(\"need\")\n\nUsage note\n----------\n\nThis library is mostly an academic exercise. \nIf you need an efficient library\nI would recommend a python-wrapped c implementation, \nsuch as [this one](http://www.daimi.au.dk/~mailund/suffix_tree.html).\n","isFork":true},{"name":"SE_OTCalculator","url":"https://github.com/drabastomek/SE_OTCalculator","description":"Single ended output transformer calculator","lang":["Python","Shell"],"readme":null,"isFork":null},{"name":"OTDesigner","url":"https://github.com/drabastomek/OTDesigner","description":"Designing output transformers for tube amplifiers","lang":["Python"],"readme":"# OTDesigner\nDesigning output transformers for tube amplifiers\n","isFork":null},{"name":"gpusandbox","url":"https://github.com/drabastomek/gpusandbox","description":"A collection of random GPU projects utilising a mix of CUDA, OpenCL, OpenGL, DirectX and Compute shaders.","lang":["C","C++"],"readme":"gpu-sandbox\n=======\n\nA collection of random GPU projects utilising a mix of CUDA, OpenCL, OpenGL and DirectX.\n\n**CMake**:\n\n  The C/C++ code uses cmake to create the project files / makefile for your desired platform. Be sure to install cmake and either use the cmake GUI program to generate the files, or use the command-line:\n  \n    cmake .\n\n**OpenCL**:\n\n  On Windows and Linux you will need to download an OpenCL library from your device manufacturer, either AMD, Nvidia or Intel.\n  \n**CUDA**:\n\n  Requires Nvidia hardware. Download the CUDA SDK from Nvidia's website.\n  \n**OpenGL**:\n\n  Current examples are written for OpenGL 4.1 (OSX supported). Most modern GPU hardware supports GL4.3 which allows for Compute shaders. Future example projects will include 4.3 and 4.4 samples to demonstrate Compute.\n  \n**DirectX**:\n\n  Windows only.\n  \n**Future Plans**\n\n  This repo will eventually contain examples of various GPU-related techniques including computation and rendering, written in various languages including C, C++, C# and Python.\n  WebGL may also be included for some samples.\n","isFork":true},{"name":"graphhack_flights","url":"https://github.com/drabastomek/graphhack_flights","description":"Flight Delays (GraphHack project @ GraphConnect 2014 SF)","lang":[],"readme":"# Flight Delays (GraphHack project @ GraphConnect 2014 SF)\n\nHack project from [GraphHack meetup](http://www.meetup.com/graphdb-sf/events/210546152/) @ GraphConnect 2014 \n\n![Denver flights](https://raw.github.com/allanglen/graphhack_flights/master/screenshots/denver_flights.png)\n\n## Setup\n\n * Install Neo4j and load graph data from https://github.com/nicolewhite/flight_graph\n\n * Download CSV file with airport codes and latitude/longitude and merge into the graph\n   https://raw.github.com/allanglen/graphhack_flights/master/data/Airport_loc.csv\n\n  ```\n  LOAD CSV WITH HEADERS FROM \"file:///Users/aglen/Downloads/Airport_loc.csv\" AS csv\n  \n  MATCH (a:Airport)\n  WHERE a.abbr = csv.abbr\n  SET a.latitude = csv.Latitude,\n          a.longitude = csv.Longitude\n  ```\n\n* Run\n\n  ```\n  npm install\n  npm start\n  ```\n","isFork":true},{"name":"flight_graph","url":"https://github.com/drabastomek/flight_graph","description":null,"lang":[],"readme":"flight_graph\n=============\n\nA Neo4j graph database of flight data.\n\n## Create the DB\n\nData is located [here](http://www.transtats.bts.gov/DL_SelectFields.asp?Table_ID=236&DB_Short_Name=On-Time). Select the pre-zipped checkbox and download. Unzip the file. Make sure you're pointing to the correct file name at line 8 of `import.py`.\n\nAlso download the lookup tables for `UniqueCarrier` and `OriginAirportID`. Save these as `.csv`, not `.csv-`. They should be called `L_UNIQUE_CARRIERS.csv` and `L_AIRPORT_ID.csv`.\n\n```\npython schema.py\npython import.py\npython import_lookups.py\n```\n\n## Download the DB\n\nAlternatively, download the zip file [here](https://www.dropbox.com/s/qq1ll7nwjmtt29j/flights.db.zip?dl=0).\n\n## Query\n\nWatch Intro to Cypher with this dataset [here](https://www.youtube.com/watch?v=VdivJqlPzCI). Queries are located in `queries`.\n","isFork":true},{"name":"metasim","url":"https://github.com/drabastomek/metasim","description":"Wrapper around the airline simulator components, so as to ease their building","lang":[],"readme":null,"isFork":true},{"name":"travelccm","url":"https://github.com/drabastomek/travelccm","description":"C++ Simulation Travel Customer Choice Model (CCM) Library","lang":[],"readme":null,"isFork":true}]}
,{"match":1,"linkedin_id":213964086,"gid":17517,"git_name":"Christian Berkhoff","git_login":"cberkhoff","git_location":"Seattle, WA","git_company":"Amazon LLC","git_org":[],"git_email":"christian.berkhoff@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/cberkhoff","bio":null,"repos":[{"name":"howishell","url":"https://github.com/imella/howishell","description":"How I shell NASA Project","lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"buho","url":"https://github.com/cberkhoff/buho","description":null,"lang":[],"readme":"# buho","isFork":null},{"name":"mine.js","url":"https://github.com/cberkhoff/mine.js","description":"A simple game concept written in coffeescript","lang":["CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"winlepp","url":"https://github.com/cberkhoff/winlepp","description":"Winlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","lang":["Prolog","C++"],"readme":"winlepp\n=======\n\nWinlepp was created as a part of a course at the Universidad de Chile. The application is focused in parallel triangle mesh refinement algorithms. It is written in C++ using QT Framework and the Eclipse IDE","isFork":null},{"name":"android-location-picker","url":"https://github.com/cberkhoff/android-location-picker","description":"Dynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.","lang":["Groovy","Shell","Java"],"readme":"android-location-picker\n=======================\n\nDynamic Android control which first shows a list of countries and then, depending on the selected values, shows the corresponding child regions using dropdowns. Contains Chilean regional subdivisions. Uses Gradle.\n","isFork":null},{"name":"facebook-android-sdk","url":"https://github.com/cberkhoff/facebook-android-sdk","description":"Facebook SDK for Android","lang":["Groovy","Java","Shell"],"readme":null,"isFork":true},{"name":"blackjack","url":"https://github.com/cberkhoff/blackjack","description":"Clojure example for an introductory worshop. It's the classic carioca card game.","lang":["Clojure"],"readme":"Blackjack\n=========\n\nClojure example for an introductory worshop. It's a simplification of the classic Blackjack card game.\n\nFor a game explanation go to [this links](http://www.pagat.com/banking/blackjack.html).\n","isFork":null},{"name":"hunchator","url":"https://github.com/imella/hunchator","description":null,"lang":["Ruby","CoffeeScript","JavaScript"],"readme":null,"isFork":null},{"name":"team11","url":"https://github.com/spaceappchile/team11","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# How I Shell NASA Project\n\n* Daniel Aguilar\n* Christian Berkhoff\n* Joaquín Jaramillo\n* Ignacio Mella\n* Sebastían Rokas\n\n## Instalación\n\nEl único requisito es _node.js_\n\n    npm -g install handlebars coffee-script\n\n## Compilación\n\n    make\n\nEste comando compila `coffe/*.coffee` a `js/app.js` y `views\\*.hb` a `js/templates.js`\n\n# Moon Harvest\n\n## Overview\n\n### Do you have what's it takes to establish a colony on the Moon? What do you think it's best for the Moon?\n\nMan have always been fascinated with our natural satellite and there are a number of reasons to create a habitable or productive environment there.\n\nMoon Harvest is a game where you take the role of a Chief Operating Officer in charge of the Moon Colony Mission. \n\nThis game is powered by a complex (still in development) moon environment simulator. This complexity along with the hosts variables involved should create some awareness of how hard your quest will be.\n\nYour final goal is to create a sustainable space industry on the surface of the Moon using all resources available.\n\nYour main objetives will be:\n  - Create a sustainable process in terms of Energy.\n  - Install observatory instruments to take Astronomy to the next level.\n  - Install defensive mechanisms to protect your colony and Earth from Meteor Showers.\n  - And finally send living beings and Humans from Earth to test the environment you've created.\n\nBuild a Robot Factory, extract moon rocks, retrieve other resources such as Alumina, Silica and  He-3 to create other buildings that will help you through your journey.\n\nDuring this mission you'll get the counsel of five advisors that will guide you to achieve your goal. Each one with his own perspective of what's best. Which one will you follow?\n\n## Think, build, become the first man to successfully establish a colony on the Moon and have lots of Fun ! That's what Moon Harvest has for you!\n ","isFork":null},{"name":"schnaps","url":"https://github.com/imella/schnaps","description":null,"lang":["CoffeeScript","JavaScript"],"readme":"# Schnaps\n\nSchaps, what could I drink tonight?","isFork":null},{"name":"euler","url":"https://github.com/cberkhoff/euler","description":"Solution to ProjectEuler problems using Java","lang":["Java"],"readme":"euler\n=====\n\nSolution to ProjectEuler problems using Java\n","isFork":null},{"name":"cc51s","url":"https://github.com/cberkhoff/cc51s","description":"A simple game written in Java using RMI for the CC51S course","lang":["Java"],"readme":"cc51s\n=====\n\nA simple game written in Java using RMI for the CC51S course","isFork":null},{"name":"UrlImageViewHelper","url":"https://github.com/cberkhoff/UrlImageViewHelper","description":"Android library that sets an ImageView's contents from a url. Manages image downloading, caching, and makes your coffee too.","lang":["Groovy","Java"],"readme":"## UrlImageViewHelper\nUrlImageViewHelper will fill an ImageView with an image that is found at a URL.\n\n### Sample Project\n\nThe sample will do a Google Image Search and load/show the results asynchronously.\n\n![](https://raw.github.com/koush/UrlImageViewHelper/master/helper2.png)\n\n### Download\n\nDownload [the latest JAR](http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.koushikdutta.urlimageviewhelper&a=urlimageviewhelper&v=LATEST\n) or grab via Maven:\n\n```xml\n<dependency>\n    <groupId>com.koushikdutta.urlimageviewhelper</groupId>\n    <artifactId>urlimageviewhelper</artifactId>\n    <version>(insert latest version)</version>\n</dependency>\n```\n\n### Usage\n\nUrlImageViewHelper will automatically download and manage all the web images and ImageViews.\nDuplicate urls will not be loaded into memory twice. Bitmap memory is managed by using\na weak reference hash table, so as soon as the image is no longer used by you,\nit will be garbage collected automatically.\n\nUsage is simple:\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\");\n```\n\n\nWant a placeholder image while it is being downloaded?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", R.drawable.placeholder);\n```\n\n\nDon't want to use a placeholder resource, but a drawable instead?\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", drawable);\n```\n\n\nWhat if you want to preload images for snazzy fast loading?\n\n```java\nUrlImageViewHelper.loadUrlDrawable(context, \"http://example.com/image.png\");\n```\n\n\nWhat if you only want to cache the images for a minute?\n\n```java\n// Note that the 3rd argument \"null\" is an optional interstitial\n// placeholder image.\nUrlImageViewHelper.setUrlDrawable(imageView, \"http://example.com/image.png\", null, 60000);\n```\n\nUrlImageViewHelper is pretty smart. It can even load the photo for an Android contact\nif given a Contact Content Provider URI.\n\n```java\nUrlImageViewHelper.setUrlDrawable(imageView, \"content://com.android.contacts/contacts/1115\", R.drawable.dummy_contact_photo);\n```\n\n### FAQ\n\n**Does it work in list adapters when views are reused? (convertView)**\n\nYes.\n\n\n### Featured Implementations\n\n * [ROM Manager](https://play.google.com/store/apps/details?id=com.koushikdutta.rommanager&hl=en)\n * [Carbon](https://play.google.com/store/apps/details?id=com.koushikdutta.backup&hl=en)\n * Let me know if you use this library, so I can add it to the list!\n","isFork":true},{"name":"ActionBarSherlock","url":"https://github.com/cberkhoff/ActionBarSherlock","description":"Library for implementing the action bar design pattern using the native action bar on Android 4.0+ and a custom implementation on pre-4.0 through a single API and theme.","lang":[],"readme":"ActionBarSherlock\n=================\n\nActionBarSherlock is an standalone library designed to facilitate the use of\nthe action bar design pattern across all versions of Android through a single\nAPI.\n\nThe library will automatically use the [native ActionBar][2] implementation on\nAndroid 4.0 or later. For previous versions which do not include ActionBar, a\ncustom action bar implementation based on the sources of Ice Cream Sandwich\nwill automatically be wrapped around the layout. This allows you to easily\ndevelop an application with an action bar for every version of Android from 2.x\nand up.\n\n**See http://actionbarsherlock.com for more information.**\n\n![Example Image][3]\n\nTry out the sample applications on the Android Market: [Feature Demos][4],\n[Fragments][5], and [RoboGuice][6].\n\nContinuous integration is provided by [Travis CI][7].\n\n\n\nDeveloped By\n============\n\n* Jake Wharton - <jakewharton@gmail.com>\n\n\n\nLicense\n=======\n\n    Copyright 2012 Jake Wharton\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n\n\n\n\n [1]: http://android-developers.blogspot.com/2011/03/fragments-for-all.html\n [2]: http://developer.android.com/guide/topics/ui/actionbar.html\n [3]: http://actionbarsherlock.com/static/feature.png\n [4]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.demos\n [5]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.fragments\n [6]: https://play.google.com/store/apps/details?id=com.actionbarsherlock.sample.roboguice\n [7]: https://travis-ci.org/JakeWharton/ActionBarSherlock\n","isFork":true},{"name":"emacs-clojure-vagrant","url":"https://github.com/cberkhoff/emacs-clojure-vagrant","description":"A simple dev environment for clojure.","lang":["Ruby","Shell","Emacs Lisp"],"readme":"Vagrant setup for Clojure\n=========================\n\nStrated as a simple fork from [https://github.com/Seajure/emacs-clojure-vagrant](Seajure) but ended being a completedly different thing.\n\nSetup\n=====\n   - Install Vagrant following the instructions [http://vagrantup.com/docs/getting-started/index.html](Vagrant Getting Started).\n   - Download this\n   - `vagrant up` inside the directory containing this readme\n\nUsage\n-----\n\nContents\n--------\n- Java\n- Git\n- Leiningen\n- Emacs\n- Postgresql","isFork":true},{"name":"node-vagrant","url":"https://github.com/cberkhoff/node-vagrant","description":"A quick and dirty node setup using vagrant and chef","lang":["Ruby"],"readme":null,"isFork":true},{"name":"express-lingua","url":"https://github.com/cberkhoff/express-lingua","description":"A i18n middleware for the Express.js framework.","lang":["JavaScript"],"readme":"# Lingua and Lengua\n\n[Lingua](https://github.com/akoenig/express-lingua) is a middleware for the Express.js framework that helps you to internationalise your webapp easily. It determines the language of the user agent and pushes the i18n resources to your views.\n\nLengua is a fork form Lingua which introduces some features.\n\n## Installation\n\n    $ npm install lengua\n\n## Show me the code!\n\nTo translate somenthig (Coffeekup)\n\n<pre>\n@t 'Name'\n@t 'navigation.german'\n</pre>\n\nTo get the current country code, language and locale respectively\n\n<pre>\n@currentCountry\n@currentCountryLanguage\n@currentLocale\n</pre>\n\n## Added features\n\n### For the common mortal\n\n1. User locale stored in session instead of cookie\n\n2. Not case sensitive\n\n3. Country Code\n\n4. If the current locale (e.g. en-US) doesnt define a key, Lengua does a lookup in the global locale (e.g. en).\n\n### Other Stuff\n\n1. Tests :)\n\n## TODO\n\n1. Locale storage as strategy (Cookie, Session, Azure, etc).\n\n2. Cache update (when all fallbacks fail).\n\n## Dev\n\n### Tests\n\n<pre>\nnpm install jasmine-node\ncd spec/\njasmine-node.cmd .\\guru.spec.js\njasmine-node.cmd .\\lingua.spec.js\n</pre>\n\n## License\n\n[MIT License](http://www.opensource.org/licenses/mit-license.php)\n\n## Author\n\nCopyright (c) 2011,\n \n[André König](http://lochkartenstanzer.de) ([Google+](http://profile.lochkartenstanzer.de)) (andre.koenig -[at]- gmail [*dot*] com)\n\n[Christian Berkhoff](#) (christian.berkhoff - [at] - gmail [#dot#] com)\n","isFork":true},{"name":"paperclipdb","url":"https://github.com/cberkhoff/paperclipdb","description":"Database storage support for paperclip file attachment plugin.","lang":["Ruby"],"readme":null,"isFork":true}]}
,{"match":1,"linkedin_id":213954281,"gid":15986,"git_name":"Erin Krengel","git_login":"ekrengel","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/ekrengel","bio":null,"repos":[{"name":"introk8s","url":"https://github.com/ekrengel/introk8s","description":"ACT-W Introduction to K8s","lang":["Dockerfile","Go"],"readme":"# ACT-W Introduction to K8s\n\nThis workshop was developed for ACT-W Seattle 2018.\n\n## Pre-Workshop Installations\n\nThere is a number of open-source software you will need to install to follow along with the workshop.\n\n### Minikube\n\nMinikube is a tool that allows you to run Kubernetes locally on your computer.\n\nYou can find install instructions for minikube [here](https://github.com/kubernetes/minikube/releases). If you use homebrew the easiest thing to do is run this command:\n\n```bash\nbrew cask install minikube\n```\n\nYou can verify you have installed minikube by running:\n\n```bash\nminikube version\n```\n\n### Kubectl\n\nKubectl is the command-line tool for interfacing with Kubernetes. It allows you to deploy and manage your apps.\n\nInstallation instructions can be found [here](https://kubernetes.io/docs/tasks/tools/install-kubectl/). Once again our recommendation is to use homebrew for this:\n\n```bash\nbrew install kubernetes-cli\n```\n\nYou can verify you have installed kubectl by running:\n\n```bash\nkubectl version\n```\n\n## Getting Started\n\n1. Start your minikube by running:\n\n    ```bash\n    minikube start\n    ```\n\n2. Make sure your context is set to minikube.\n\n    ```bash\n    kubectl config get-contexts\n    ```\n\n    `minikube` should have a star next to it when you run this command. If it doesn't, you can set minikube to your context by running:\n\n    ```bash\n    kubectl config use-context minikube\n    ```","isFork":null},{"name":"kubernetes","url":"https://github.com/ekrengel/kubernetes","description":"Production-Grade Container Scheduling and Management","lang":["Python","Makefile","Shell","C","Go","Ruby","Nginx","SaltStack","PowerShell","Protocol Buffer","HTML"],"readme":"# Kubernetes\n\n[![Submit Queue Widget]][Submit Queue] [![GoDoc Widget]][GoDoc]\n\n<img src=\"https://github.com/kubernetes/kubernetes/raw/master/logo/logo.png\" width=\"100\">\n\n----\n\nKubernetes is an open source system for managing [containerized applications]\nacross multiple hosts, providing basic mechanisms for deployment, maintenance,\nand scaling of applications.\n\nKubernetes builds upon a decade and a half of experience at Google running\nproduction workloads at scale using a system called [Borg],\ncombined with best-of-breed ideas and practices from the community.\n\nKubernetes is hosted by the Cloud Native Computing Foundation ([CNCF]).\nIf you are a company that wants to help shape the evolution of\ntechnologies that are container-packaged, dynamically-scheduled\nand microservices-oriented, consider joining the CNCF.\nFor details about who's involved and how Kubernetes plays a role,\nread the CNCF [announcement].\n\n----\n\n## To start using Kubernetes\n\nSee our documentation on [kubernetes.io].\n\nTry our [interactive tutorial].\n\nTake a free course on [Scalable Microservices with Kubernetes].\n\n## To start developing Kubernetes\n\nThe [community repository] hosts all information about\nbuilding Kubernetes from source, how to contribute code\nand documentation, who to contact about what, etc.\n\nIf you want to build Kubernetes right away there are two options:\n\n##### You have a working [Go environment].\n\n```\n$ go get -d k8s.io/kubernetes\n$ cd $GOPATH/src/k8s.io/kubernetes\n$ make\n```\n\n##### You have a working [Docker environment].\n\n```\n$ git clone https://github.com/kubernetes/kubernetes\n$ cd kubernetes\n$ make quick-release\n```\n\nIf you are less impatient, head over to the [developer's documentation].\n\n## Support\n\nIf you need support, start with the [troubleshooting guide]\nand work your way through the process that we've outlined.\n\nThat said, if you have questions, reach out to us\n[one way or another][communication].\n\n[announcement]: https://cncf.io/news/announcement/2015/07/new-cloud-native-computing-foundation-drive-alignment-among-container\n[Borg]: https://research.google.com/pubs/pub43438.html\n[CNCF]: https://www.cncf.io/about\n[communication]: https://github.com/kubernetes/community/blob/master/communication.md\n[community repository]: https://github.com/kubernetes/community\n[containerized applications]: https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/\n[developer's documentation]: https://github.com/kubernetes/community/tree/master/contributors/devel\n[Docker environment]: https://docs.docker.com/engine\n[Go environment]: https://golang.org/doc/install\n[GoDoc]: https://godoc.org/k8s.io/kubernetes\n[GoDoc Widget]: https://godoc.org/k8s.io/kubernetes?status.svg\n[interactive tutorial]: http://kubernetes.io/docs/tutorials/kubernetes-basics\n[kubernetes.io]: http://kubernetes.io\n[Scalable Microservices with Kubernetes]: https://www.udacity.com/course/scalable-microservices-with-kubernetes--ud615\n[Submit Queue]: http://submit-queue.k8s.io/#/ci\n[Submit Queue Widget]: http://submit-queue.k8s.io/health.svg?v=1\n[troubleshooting guide]: https://kubernetes.io/docs/tasks/debug-application-cluster/troubleshooting/ \n\n[![Analytics](https://kubernetes-site.appspot.com/UA-36037335-10/GitHub/README.md?pixel)]()\n","isFork":true},{"name":"corvus","url":"https://github.com/pavmohan/corvus","description":"Track and share your favorite cheeses","lang":["Python","CSS","JavaScript","C","HTML"],"readme":"# Corvus\nTrack and share your favorite cheeses","isFork":null},{"name":"cs290-assignment4-part1","url":"https://github.com/ekrengel/cs290-assignment4-part1","description":"Basic PHP Assignment","lang":["PHP"],"readme":null,"isFork":null},{"name":"cs290-assignment1","url":"https://github.com/ekrengel/cs290-assignment1","description":"CS290 Assignment 1 Into to Git","lang":[],"readme":null,"isFork":null},{"name":"271-Assignments","url":"https://github.com/ekrengel/271-Assignments","description":"Assembly Language Assignments","lang":["Assembly"],"readme":null,"isFork":null},{"name":"cs290-assignment3","url":"https://github.com/ekrengel/cs290-assignment3","description":"Basic JavaScript Assignment","lang":["JavaScript","CSS","HTML"],"readme":"Basic JavaScript Assignment\n===========================\n\nThis part of the assignment will cover fundamental JavaScript topics outside the context of web development. Fully automated tests will be provided for all assignment components. These are a tool to help you assess if your code is working as intended. Passing the tests does not guarantee a good grade nor does failing them guarantee a poor grade. The grade will be based on the extent to which you meet the requirements for code in this class and the extent to which the requirements in the source files are met.\n\nWork Log\n--------\nIn order to be eligible to receive an A you must submit a work log. It will not contribute points directly to the assignment, but without it the maximum grade you will be eligible for is an 89%. The purpose is to allow me to tune the difficulty of assignments to ensure that you are getting the amount of practice needed without spending too much time on any given topic.\n\nThe format is as follows:\n\n```\nStart: Wed, 7 Jan 2015 21:42:26 -0800\nEnd: Wed, 7 Jan 2015 22:42:26 -0800\nTasks: During this period I drew a diagram of the classes I will be using to implement the message passing portion of the assignment.\n\nStart: Fri, 9 Jan 2015 18:00:00 -0800\nEnd: Fri, 9 Jan 2015 20:42:26 -0800\nTasks: During this period I debugged for 1 hour to find a type and implement the send function of the cleint.\n```\n\nYou can get most of this information from the git log if you run:\n`git log --pretty=format:\"Start: %nEnd: %ad %nTasks: %s\" --date=rfc`\nYou just need to fill in the Start: time. Use the same date format. I would suggest copying and pasting the End time and just editing the time (or day if you went through midnight in a work session).\n\nHave one entry per work session.\n\nPut this log in log.txt.\n\nInstructions\n------------\n- Create a new repository called cs290-assignment3 at the location you specified in week 1.\n- Clone this repository and copy all of the contents to that repository\n  - The directory structure should look like this:\n    - cs290-assignment3\n      - log.txt\n      - qunit_runner.html\n      - qunit\n      - src\n      - tests\n- **You are only allowed to modify the files in the src directory.**\n  - There are some additional files, those are just a hook for us to eventually support a better testing system.\n  - The comments in the files in the src directory describe the intended behavior of the functions that you need to fill in. Please ask on the discussion boards if you are confused about the intended functionality of any function.\n  - Within those files, your code should go between the `//your code here` comments.\n  - You should replace `return undefined;` with appropriate return statements.\n- Add **cs290osu** as a collaborator. This will be an account that myself and the TAs share to access your repos.\n- To test your code open the `qunit_runner.html` web page locally. Along with the red errors check for statements saying something like `Expected 4 assertions, but 2 were run`. This means that the test had to abort early due to a error it could not recover from. That means there are two additional tests that are not even getting run.\n  - Given the nature of automated tests, it is easy to see what the expected values are and simply hard code those returns. If you do this for any portion of the assignment, you will get a 0 for the whole assignment. (For example, variableModification should work for any value, not just 42, but we are only testing the value 42. If you hardcode the values `47`, `'42'` and `'42foo'` that is a violation of this rule. )\n","isFork":null},{"name":"donneler.github.io","url":"https://github.com/ekrengel/donneler.github.io","description":null,"lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"cs290-assignment3p2","url":"https://github.com/ekrengel/cs290-assignment3p2","description":"Assignment 3 Part 2: Adding AJAX and HTML","lang":["JavaScript","HTML"],"readme":null,"isFork":null},{"name":"cs290-assignment2","url":"https://github.com/ekrengel/cs290-assignment2","description":"HTML and CSS","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CS161","url":"https://github.com/ekrengel/CS161","description":"Intro to Programming in C++","lang":["C++"],"readme":"CS161\n=====\n\nIntro to Programming in C++\n","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149337,"git_name":"BrianChang","git_login":"ZAYINGAMNE","git_location":null,"git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/ZAYINGAMNE","bio":null,"repos":[]}
,{"match":0,"linkedin_id":213948881,"gid":3149332,"git_name":"Brian Chang","git_login":"byalec","git_location":"Cambridge, MA","git_company":"Edelman Lab","git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/byalec","bio":null,"repos":[]}
,{"match":0,"linkedin_id":213948881,"gid":3149329,"git_name":"Brian Chang","git_login":"bchanglezz","git_location":null,"git_company":"Liferay Inc.","git_org":[],"git_email":"brian.chang@liferay.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/bchanglezz","bio":null,"repos":[{"name":"datasharing","url":"https://github.com/bchanglezz/datasharing","description":"The Leek group guide to data sharing ","lang":[],"readme":"How to share data with a statistician\n===========\n\nThis is a guide for anyone who needs to share data with a statistician. The target audiences I have in mind are:\n\n* Scientific collaborators who need statisticians to analyze data for them\n* Students or postdocs in scientific disciplines looking for consulting advice\n* Junior statistics students whose job it is to collate/clean data sets\n\nThe goals of this guide are to provide some instruction on the best way to share data to avoid the most common pitfalls\nand sources of delay in the transition from data collection to data analysis. The [Leek group](http://biostat.jhsph.edu/~jleek/) works with a large\nnumber of collaborators and the number one source of variation in the speed to results is the status of the data\nwhen they arrive at the Leek group. Based on my conversations with other statisticians this is true nearly universally.\n\nMy strong feeling is that statisticians should be able to handle the data in whatever state they arrive. It is important\nto see the raw data, understand the steps in the processing pipeline, and be able to incorporate hidden sources of\nvariability in one's data analysis. On the other hand, for many data types, the processing steps are well documented\nand standardized. So the work of converting the data from raw form to directly analyzable form can be performed \nbefore calling on a statistician. This can dramatically speed the turnaround time, since the statistician doesn't\nhave to work through all the pre-processing steps first. \n\n\nWhat you should deliver to the statistician\n====================\n\nFor maximum speed in the analysis this is the information you should pass to a statistician:\n\n1. The raw data.\n2. A [tidy data set](http://vita.had.co.nz/papers/tidy-data.pdf) \n3. A code book describing each variable and its values in the tidy data set.  \n4. An explicit and exact recipe you used to go from 1 -> 2,3 \n\nLet's look at each part of the data package you will transfer. \n\n\n### The raw data\n\nIt is critical that you include the rawest form of the data that you have access to. Here are some examples of the\nraw form of data:\n\n* The strange [binary file](http://en.wikipedia.org/wiki/Binary_file) your measurement machine spits out\n* The unformatted Excel file with 10 worksheets the company you contracted with sent you\n* The complicated [JSON](http://en.wikipedia.org/wiki/JSON) data you got from scraping the [Twitter API](https://twitter.com/twitterapi)\n* The hand-entered numbers you collected looking through a microscope\n\nYou know the raw data is in the right format if you: \n\n1. Ran no software on the data\n1. Did not manipulate any of the numbers in the data\n1. You did not remove any data from the data set\n1. You did not summarize the data in any way\n\nIf you did any manipulation of the data at all it is not the raw form of the data. Reporting manipulated data\nas raw data is a very common way to slow down the analysis process, since the analyst will often have to do a\nforensic study of your data to figure out why the raw data looks weird. \n\n### The tidy data set\n\nThe general principles of tidy data are laid out by [Hadley Wickham](http://had.co.nz/) in [this paper](http://vita.had.co.nz/papers/tidy-data.pdf)\nand [this video](http://vimeo.com/33727555). The paper and the video are both focused on the [R](http://www.r-project.org/) package, which you\nmay or may not know how to use. Regardless the four general principles you should pay attention to are:\n\n1. Each variable you measure should be in one column\n1. Each different observation of that variable should be in a different row\n1. There should be one table for each \"kind\" of variable\n1. If you have multiple tables, they should include a column in the table that allows them to be linked\n\nWhile these are the hard and fast rules, there are a number of other things that will make your data set much easier\nto handle. First is to include a row at the top of each data table/spreadsheet that contains full row names. \nSo if you measured age at diagnosis for patients, you would head that column with the name `AgeAtDiagnosis` instead\nof something like `ADx` or another abbreviation that may be hard for another person to understand. \n\n\nHere is an example of how this would work from genomics. Suppose that for 20 people you have collected gene expression measurements with \n[RNA-sequencing](http://en.wikipedia.org/wiki/RNA-Seq). You have also collected demographic and clinical information\nabout the patients including their age, treatment, and diagnosis. You would have one table/spreadsheet that contains the clinical/demographic\ninformation. It would have four columns (patient id, age, treatment, diagnosis) and 21 rows (a row with variable names, then one row\nfor every patient). You would also have one spreadsheet for the summarized genomic data. Usually this type of data\nis summarized at the level of the number of counts per exon. Suppose you have 100,000 exons, then you would have a\ntable/spreadsheet that had 21 rows (a row for gene names, and one row for each patient) and 100,001 columns (one row for patient\nids and one row for each data type). \n\nIf you are sharing your data with the collaborator in Excel, the tidy data should be in one Excel file per table. They\nshould not have multiple worksheets, no macros should be applied to the data, and no columns/cells should be highlighted. \nAlternatively share the data in a [CSV](http://en.wikipedia.org/wiki/Comma-separated_values) or [TAB-delimited](http://en.wikipedia.org/wiki/Tab-separated_values) text file.\n\n\n### The code book\n\nFor almost any data set, the measurements you calculate will need to be described in more detail than you will sneak\ninto the spreadsheet. The code book contains this information. At minimum it should contain:\n\n1. Information about the variables (including units!) in the data set not contained in the tidy data \n1. Information about the summary choices you made\n1. Information about the experimental study design you used\n\nIn our genomics example, the analyst would want to know what the unit of measurement for each\nclinical/demographic variable is (age in years, treatment by name/dose, level of diagnosis and how heterogeneous). They \nwould also want to know how you picked the exons you used for summarizing the genomic data (UCSC/Ensembl, etc.). They\nwould also want to know any other information about how you did the data collection/study design. For example,\nare these the first 20 patients that walked into the clinic? Are they 20 highly selected patients by some characteristic\nlike age? Are they randomized to treatments? \n\nA common format for this document is a Word file. There should be a section called \"Study design\" that has a thorough\ndescription of how you collected the data. There is a section called \"Code book\" that describes each variable and its\nunits. \n\n### How to code variables\n\nWhen you put variables into a spreadsheet there are several main categories you will run into depending on their [data type](http://en.wikipedia.org/wiki/Statistical_data_type):\n\n1. Continuous\n1. Ordinal\n1. Categorical\n1. Missing \n1. Censored\n\nContinuous variables are anything measured on a quantitative scale that could be any fractional number. An example\nwould be something like weight measured in kg. [Ordinal data](http://en.wikipedia.org/wiki/Ordinal_data) are data that have a fixed, small (< 100) number of levels but are ordered. \nThis could be for example survey responses where the choices are: poor, fair, good. [Categorical data](http://en.wikipedia.org/wiki/Categorical_variable) are data where there\nare multiple categories, but they aren't ordered. One example would be sex: male or female. [Missing data](http://en.wikipedia.org/wiki/Missing_data) are data\nthat are missing and you don't know the mechanism. You should code missing values as `NA`. [Censored data](http://en.wikipedia.org/wiki/Censoring_(statistics\\)) are data\nwhere you know the missingness mechanism on some level. Common examples are a measurement being below a detection limit\nor a patient being lost to follow-up. They should also be coded as `NA` when you don't have the data. But you should\nalso add a new column to your tidy data called, \"VariableNameCensored\" which should have values of `TRUE` if censored \nand `FALSE` if not. In the code book you should explain why those values are missing. It is absolutely critical to report\nto the analyst if there is a reason you know about that some of the data are missing. You should also not [impute](http://en.wikipedia.org/wiki/Imputation_(statistics\\))/make up/\nthrow away missing observations.\n\nIn general, try to avoid coding categorical or ordinal variables as numbers. When you enter the value for sex in the tidy\ndata, it should be \"male\" or \"female\". The ordinal values in the data set should be \"poor\", \"fair\", and \"good\" not 1, 2 ,3.\nThis will avoid potential mixups about which direction effects go and will help identify coding errors. \n\nAlways encode every piece of information about your observations using text. For example, if you are storing data in Excel and use a form of colored text or cell background formatting to indicate information about an observation (\"red variable entries were observed in experiment 1.\") then this information will not be exported (and will be lost!) when the data is exported as raw text.  Every piece of data should be encoded as actual text that can be exported.  \n\n### The instruction list/script\n\nYou may have heard this before, but [reproducibility is kind of a big deal in computational science](http://www.sciencemag.org/content/334/6060/1226).\nThat means, when you submit your paper, the reviewers and the rest of the world should be able to exactly replicate\nthe analyses from raw data all the way to final results. If you are trying to be efficient, you will likely perform\nsome summarization/data analysis steps before the data can be considered tidy. \n\nThe ideal thing for you to do when performing summarization is to create a computer script (in `R`, `Python`, or something else) \nthat takes the raw data as input and produces the tidy data you are sharing as output. You can try running your script\na couple of times and see if the code produces the same output. \n\nIn many cases, the person who collected the data has incentive to make it tidy for a statistician to speed the process\nof collaboration. They may not know how to code in a scripting language. In that case, what you should provide the statistician\nis something called [pseudocode](http://en.wikipedia.org/wiki/Pseudocode). It should look something like:\n\n1. Step 1 - take the raw file, run version 3.1.2 of summarize software with parameters a=1, b=2, c=3\n1. Step 2 - run the software separately for each sample\n1. Step 3 - take column three of outputfile.out for each sample and that is the corresponding row in the output data set\n\nYou should also include information about which system (Mac/Windows/Linux) you used the software on and whether you \ntried it more than once to confirm it gave the same results. Ideally, you will run this by a fellow student/labmate\nto confirm that they can obtain the same output file you did. \n\n\n\n\nWhat you should expect from the analyst\n====================\n\nWhen you turn over a properly tidied data set it dramatically decreases the workload on the statistician. So hopefully\nthey will get back to you much sooner. But most careful statisticians will check your recipe, ask questions about\nsteps you performed, and try to confirm that they can obtain the same tidy data that you did with, at minimum, spot\nchecks.\n\nYou should then expect from the statistician:\n\n1. An analysis script that performs each of the analyses (not just instructions)\n1. The exact computer code they used to run the analysis\n1. All output files/figures they generated. \n\nThis is the information you will use in the supplement to establish reproducibility and precision of your results. Each\nof the steps in the analysis should be clearly explained and you should ask questions when you don't understand\nwhat the analyst did. It is the responsibility of both the statistician and the scientist to understand the statistical\nanalysis. You may not be able to perform the exact analyses without the statistician's code, but you should be able\nto explain why the statistician performed each step to a labmate/your principal investigator. \n\n\nContributors\n====================\n\n* [Jeff Leek](http://biostat.jhsph.edu/~jleek/) - Wrote the initial version.\n* [L. Collado-Torres](http://bit.ly/LColladoTorres) - Fixed typos, added links.\n* [Nick Reich](http://people.umass.edu/nick/) - Added tips on storing data as text.\n\n\n","isFork":true}]}
,{"match":0,"linkedin_id":213948881,"gid":3149322,"git_name":"Brian Chang","git_login":"bchanged","git_location":null,"git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/bchanged","bio":null,"repos":[{"name":"cotta","url":"https://github.com/wolfdancer/cotta","description":"A light weight file IO library to ease the use of Java File IO related API and enable the testability. ","lang":["Java","Ruby","CSS","HTML"],"readme":"cotta\n=====\n\n[![Build Status](https://travis-ci.org/wolfdancer/cotta.png?branch=master)](https://travis-ci.org/wolfdancer/cotta)\n\nA light weight file IO library to ease the use of Java File IO related API and enable the testability.\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/4b75fc7f24bb13667f5902733ac0c044 \"githalytics.com\")](http://githalytics.com/wolfdancer/cotta)\n","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149317,"git_name":"Brianz Chang","git_login":"brianz6715","git_location":"Taiwan","git_company":null,"git_org":[],"git_email":"brianz6715@gmail.com","git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/brianz6715","bio":null,"repos":[{"name":"LeetCodePractice","url":"https://github.com/brianz6715/LeetCodePractice","description":"Source code for my Leet Code practice","lang":["Python","C++"],"readme":"# LeetCodePractice\nSource code for my Leet Code practice\n","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149313,"git_name":"Brian Chang","git_login":"brianchang071899","git_location":null,"git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/brianchang071899","bio":null,"repos":[{"name":"1A-Final-Project-Gimbal","url":"https://github.com/david-xliu/1A-Final-Project-Gimbal","description":"code for a camera stabilizer, 1A Mechatronics Final Project","lang":["C"],"readme":"# 1A-Final-Project\n","isFork":null},{"name":"1A-Final-Project","url":"https://github.com/brianchang071899/1A-Final-Project","description":"code for a camera stabilizer, 1A Mechatronics Final Project","lang":["C"],"readme":"# 1A-Final-Project\n","isFork":true}]}
,{"match":0,"linkedin_id":213948881,"gid":3149311,"git_name":"Brian Chang","git_login":"bchangz","git_location":null,"git_company":"Zobrist Consulting","git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/bchangz","bio":null,"repos":[{"name":"parent","url":"https://github.com/bchangz/parent","description":null,"lang":[],"readme":"Parent Test Repo\n================\n\n","isFork":null},{"name":"child","url":"https://github.com/bchangz/child","description":null,"lang":[],"readme":"Child test repo\n===============\n\n","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149309,"git_name":"Brian Chang","git_login":"brainchong","git_location":null,"git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/brainchong","bio":null,"repos":[{"name":"Website","url":"https://github.com/brainchong/Website","description":null,"lang":["HTML"],"readme":"# funfun\n","isFork":null},{"name":"CRC-Map","url":"https://github.com/brainchong/CRC-Map","description":null,"lang":["HTML"],"readme":"# CRC Map\n","isFork":null},{"name":"test","url":"https://github.com/brainchong/test","description":null,"lang":["HTML"],"readme":"# CRC-Map","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149306,"git_name":"Brian Chang","git_login":"bchangg","git_location":"Vancouver, Canada","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/bchangg","bio":null,"repos":[{"name":"transit-survey","url":"https://github.com/ubyssey/transit-survey","description":null,"lang":["JavaScript","CSS","HTML","Python"],"readme":null,"isFork":null},{"name":"school_labs_projects","url":"https://github.com/bchangg/school_labs_projects","description":null,"lang":["HTML"],"readme":null,"isFork":null},{"name":"code_experiments","url":"https://github.com/bchangg/code_experiments","description":null,"lang":["Java","Processing","C"],"readme":null,"isFork":null},{"name":"Craft","url":"https://github.com/AshesUponTheSeine/Craft","description":"A simple Minecraft clone written in C using modern OpenGL (shaders).","lang":["CMake","Python","GLSL","C"],"readme":"## Craft\n\nMinecraft clone for Windows, Mac OS X and Linux. Just a few thousand lines of C using modern OpenGL (shaders). Online multiplayer support is included using a Python-based server.\n\nhttp://www.michaelfogleman.com/craft/\n\n![Screenshot](http://i.imgur.com/SH7wcas.png)\n\n### Features\n\n* Simple but nice looking terrain generation using perlin / simplex noise.\n* More than 10 types of blocks and more can be added easily.\n* Supports plants (grass, flowers, trees, etc.) and transparency (glass).\n* Simple clouds in the sky (they don't move).\n* Day / night cycles and a textured sky dome.\n* World changes persisted in a sqlite3 database.\n* Multiplayer support!\n\n### Download\n\nMac and Windows binaries are available on the website.\n\nhttp://www.michaelfogleman.com/craft/\n\nSee below to run from source.\n\n### Install Dependencies\n\n#### Mac OS X\n\nDownload and install [CMake](http://www.cmake.org/cmake/resources/software.html)\nif you don't already have it. You may use [Homebrew](http://brew.sh) to simplify\nthe installation:\n\n    brew install cmake\n\n#### Linux (Ubuntu)\n\n    sudo apt-get install cmake libglew-dev xorg-dev libcurl4-openssl-dev\n    sudo apt-get build-dep glfw\n\n#### Windows\n\nDownload and install [CMake](http://www.cmake.org/cmake/resources/software.html)\nand [MinGW](http://www.mingw.org/). Add `C:\\MinGW\\bin` to your `PATH`.\n\nDownload and install [cURL](http://curl.haxx.se/download.html) so that\nCURL/lib and CURL/include are in your Program Files directory.\n\nUse the following commands in place of the ones described in the next section.\n\n    cmake -G \"MinGW Makefiles\"\n    mingw32-make\n\n### Compile and Run\n\nOnce you have the dependencies (see above), run the following commands in your\nterminal.\n\n    git clone https://github.com/fogleman/Craft.git\n    cd Craft\n    cmake .\n    make\n    ./craft\n\n### Multiplayer\n\nRegister for an account!\n\nhttps://craft.michaelfogleman.com/\n\n#### Client\n\nYou can connect to a server with command line arguments...\n\n    ./craft craft.michaelfogleman.com\n\nOr, with the \"/online\" command in the game itself.\n\n    /online craft.michaelfogleman.com\n\n#### Server\n\nYou can run your own server or connect to mine. The server is written in Python\nbut requires a compiled DLL so it can perform the terrain generation just like\nthe client.\n\n    gcc -std=c99 -O3 -fPIC -shared -o world -I src -I deps/noise deps/noise/noise.c src/world.c\n    python server.py [HOST [PORT]]\n\n### Controls\n\n- WASD to move forward, left, backward, right.\n- Space to jump.\n- Left Click to destroy a block.\n- Right Click or Cmd + Left Click to create a block.\n- 1-9 to select the block type to create.\n- E to cycle through the block types.\n- Tab to toggle between walking and flying.\n- ZXCVBN to move in exact directions along the XYZ axes.\n- Left shift to zoom.\n- F to show the scene in orthographic mode.\n- O to observe players in the main view.\n- P to observe players in the picture-in-picture view.\n- Arrow keys emulate mouse movement.\n- Enter emulates mouse click.\n\n### Chat Commands\n\n    /goto [NAME]\n\nTeleport to another user.\nIf NAME is unspecified, a random user is chosen.\n\n    /list\n\nDisplay a list of connected users.\n\n    /login NAME\n\nSwitch to another registered username.\nThe login server will be re-contacted. The username is case-sensitive.\n\n    /logout\n\nUnauthenticate and become a guest user.\nAutomatic logins will not occur again until the /login command is re-issued.\n\n    /offline [FILE]\n\nSwitch to offline mode.\nFILE specifies the save file to use and defaults to \"craft\".\n\n    /online HOST [PORT]\n\nConnect to the specified server.\n\n    /pq P Q\n\nTeleport to the specified chunk.\n\n    /spawn\n\nTeleport back to the spawn point.\n\n### Screenshot\n\n![Screenshot](http://i.imgur.com/foYz3aN.png)\n\n### Implementation Details\n\n#### Terrain Generation\n\nThe terrain is generated using Simplex noise - a deterministic noise function seeded based on position. So the world will always be generated the same way in a given location.\n\nThe world is split up into 32x32 block chunks in the XZ plane (Y is up). This allows the world to be “infinite” (floating point precision is currently a problem at large X or Z values) and also makes it easier to manage the data. Only visible chunks need to be queried from the database.\n\n#### Rendering\n\nOnly exposed faces are rendered. This is an important optimization as the vast majority of blocks are either completely hidden or are only exposing one or two faces. Each chunk records a one-block width overlap for each neighboring chunk so it knows which blocks along its perimeter are exposed.\n\nOnly visible chunks are rendered. A naive frustum-culling approach is used to test if a chunk is in the camera’s view. If it is not, it is not rendered. This results in a pretty decent performance improvement as well.\n\nChunk buffers are completely regenerated when a block is changed in that chunk, instead of trying to update the VBO.\n\nText is rendered using a bitmap atlas. Each character is rendered onto two triangles forming a 2D rectangle.\n\n“Modern” OpenGL is used - no deprecated, fixed-function pipeline functions are used. Vertex buffer objects are used for position, normal and texture coordinates. Vertex and fragment shaders are used for rendering. Matrix manipulation functions are in matrix.c for translation, rotation, perspective, orthographic, etc. matrices. The 3D models are made up of very simple primitives - mostly cubes and rectangles. These models are generated in code in cube.c.\n\nTransparency in glass blocks and plants (plants don’t take up the full rectangular shape of their triangle primitives) is implemented by discarding magenta-colored pixels in the fragment shader.\n\n#### Database\n\nUser changes to the world are stored in a sqlite database. Only the delta is stored, so the default world is generated and then the user changes are applied on top when loading.\n\nThe main database table is named “block” and has columns p, q, x, y, z, w. (p, q) identifies the chunk, (x, y, z) identifies the block position and (w) identifies the block type. 0 represents an empty block (air).\n\nIn game, the chunks store their blocks in a hash map. An (x, y, z) key maps to a (w) value.\n\nThe y-position of blocks are limited to 0 <= y < 256. The upper limit is mainly an artificial limitation to prevent users from building unnecessarily tall structures. Users are not allowed to destroy blocks at y = 0 to avoid falling underneath the world.\n\n#### Multiplayer\n\nMultiplayer mode is implemented using plain-old sockets. A simple, ASCII, line-based protocol is used. Each line is made up of a command code and zero or more comma-separated arguments. The client requests chunks from the server with a simple command: C,p,q,key. “C” means “Chunk” and (p, q) identifies the chunk. The key is used for caching - the server will only send block updates that have been performed since the client last asked for that chunk. Block updates (in realtime or as part of a chunk request) are sent to the client in the format: B,p,q,x,y,z,w. After sending all of the blocks for a requested chunk, the server will send an updated cache key in the format: K,p,q,key. The client will store this key and use it the next time it needs to ask for that chunk. Player positions are sent in the format: P,pid,x,y,z,rx,ry. The pid is the player ID and the rx and ry values indicate the player’s rotation in two different axes. The client interpolates player positions from the past two position updates for smoother animation. The client sends its position to the server at most every 0.1 seconds (less if not moving).\n\nClient-side caching to the sqlite database can be performance intensive when connecting to a server for the first time. For this reason, sqlite writes are performed on a background thread. All writes occur in a transaction for performance. The transaction is committed every 5 seconds as opposed to some logical amount of work completed. A ring / circular buffer is used as a queue for what data is to be written to the database.\n\nIn multiplayer mode, players can observe one another in the main view or in a picture-in-picture view. Implementation of the PnP was surprisingly simple - just change the viewport and render the scene again from the other player’s point of view.\n\n#### Collision Testing\n\nHit testing (what block the user is pointing at) is implemented by scanning a ray from the player’s position outward, following their sight vector. This is not a precise method, so the step rate can be made smaller to be more accurate.\n\nCollision testing simply adjusts the player’s position to remain a certain distance away from any adjacent blocks that are obstacles. (Clouds and plants are not marked as obstacles, so you pass right through them.)\n\n#### Sky Dome\n\nA textured sky dome is used for the sky. The X-coordinate of the texture represents time of day. The Y-values map from the bottom of the sky sphere to the top of the sky sphere. The player is always in the center of the sphere. The fragment shaders for the blocks also sample the sky texture to determine the appropriate fog color to blend with based on the block’s position relative to the backing sky.\n\n#### Ambient Occlusion\n\nAmbient occlusion is implemented as described on this page:\n\nhttp://0fps.wordpress.com/2013/07/03/ambient-occlusion-for-minecraft-like-worlds/\n\n#### Dependencies\n\n* GLEW is used for managing OpenGL extensions across platforms.\n* GLFW is used for cross-platform window management.\n* CURL is used for HTTPS / SSL POST for the authentication process.\n* lodepng is used for loading PNG textures.\n* sqlite3 is used for saving the blocks added / removed by the user.\n* tinycthread is used for cross-platform threading.\n","isFork":true},{"name":"ti2210","url":"https://github.com/bchangg/ti2210","description":null,"lang":["Java"],"readme":"jpacman-template\n================\n\nTemplate to start working on a solution for JPacman software testing exercises.","isFork":true}]}
,{"match":0,"linkedin_id":213948881,"gid":3149297,"git_name":"Brian Chang","git_login":"blchang","git_location":null,"git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/blchang","bio":null,"repos":[{"name":"hw3_rottenpotatoes","url":"https://github.com/blchang/hw3_rottenpotatoes","description":"HW 3 skeleton for doing BDD with RottenPotatoes","lang":[],"readme":null,"isFork":true},{"name":"roomade2","url":"https://github.com/deelin/roomade2","description":"Version 2.0","lang":["Scala","HTML","ApacheConf","JavaScript"],"readme":null,"isFork":null},{"name":"Community-Forum","url":"https://github.com/blchang/Community-Forum","description":"To test refreshing and creating a one-page app. Has nothing to do with a forum at this point.","lang":["Ruby","CoffeeScript","JavaScript"],"readme":"Hi\nThere is repo is solely for testing/learning purposes \nand thus this will probably be a waste of your time to look through.\n","isFork":null},{"name":"split-server","url":"https://github.com/DownSpiral/split-server","description":null,"lang":["Ruby","JavaScript","CoffeeScript"],"readme":"split-server\n============","isFork":null},{"name":"splist","url":"https://github.com/blchang/splist","description":"An android application to buy groceries in bulk and then share with your friends.","lang":["Java"],"readme":null,"isFork":null},{"name":"test_sinatra","url":"https://github.com/blchang/test_sinatra","description":"Testing Sinatra with an ORM","lang":["Ruby"],"readme":null,"isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149287,"git_name":"Brian Chang","git_login":"gitbchang","git_location":null,"git_company":null,"git_org":[],"git_email":"brian.h.chang1@gmail.com","git_blog":"https://www.linkedin.com/in/brian-chang-a7965754","git_websiteUrl":"https://www.linkedin.com/in/brian-chang-a7965754","github_url":"https://github.com/gitbchang","bio":null,"repos":[{"name":"React-Redux-Flask","url":"https://github.com/gitbchang/React-Redux-Flask","description":"Boilerplate application for a Python/Flask JWT Backend and a Javascript/React/Redux Front-End with Material UI.","lang":["Python","Mako","JavaScript","HTML","CSS"],"readme":"# React-Redux-Flask #\n\nBoilerplate application for a Flask JWT Backend and a React/Redux Front-End with Material UI.\n\n* Python 2.7+ or 3.x\n* Pytest\n* Heroku\n* Flask\n* React\n* Redux\n* React-Router 2.0\n* React-Router-Redux\n* Babel 6\n* SCSS processing\n* Webpack\n\n![screenshot](http://i.imgur.com/ZIS4qkw.png)\n\n### Create DB\n```sh\n$ export DATABASE_URL=\"postgresql://username:password@localhost/mydatabase\"\n\nor\n\n$ export DATABASE_URL=\"mysql+mysqlconnector://username:password@localhost/mydatabase\"\n\nor\n\n$ export DATABASE_URL=\"sqlite:///your.db\"\n```\n(More about connection strings in this [flask config guide](http://flask-sqlalchemy.pocoo.org/2.1/config/).)\n```\n$ python manage.py create_db\n$ python manage.py db upgrade\n$ python manage.py db migrate\n```\n\nTo update database after creating new migrations, use:\n\n```sh\n$ python manage.py db upgrade\n```\n\n### Install Front-End Requirements\n```sh\n$ cd static\n$ npm install\n```\n\n### Run Back-End\n\n```sh\n$ python manage.py runserver\n```\n\n### Test Back-End\n\n```sh\n$ python test.py --cov-report=term --cov-report=html --cov=application/ tests/\n```\n\n### Run Front-End\n\n```sh\n$ cd static\n$ npm start\n```\n\n### Build Front-End\n\n```sh\n$ npm run build:production\n```\n\n### New to Python?\n\nIf you are approaching this demo as primarily a frontend dev with limited or no python experience, you may need to install a few things that a seasoned python dev would already have installed.\n\nMost Macs already have python 2.7 installed but you may not have pip install. You can check to see if you have them installed:\n\n```\n$ python --version\n$ pip --version \n```\n\nIf pip is not installed, you can follow this simple article to [get both homebrew and python](https://howchoo.com/g/mze4ntbknjk/install-pip-on-mac-os-x)\n\nAfter you install python, you can optionally also install python 3\n\n```\n$ brew install python3\n```\n\nNow you can check again to see if both python and pip are installed. Once pip is installed, you can download the required flask modules:\n\n```\n$ sudo pip install flask flask_script flask_migrate flask_bcrypt \n```\n\nNow, you can decide on which database you wish to use. \n\n#### New to MySQL? \n\nIf you decide on MySQL, install the free community edition of [MySQL](https://dev.mysql.com/downloads/mysql/) and [MySQL Workbench](https://www.mysql.com/products/workbench/)\n\n1. start MySQL from the System Preferences\n2. open MySQL Workbench and [create a database](http://stackoverflow.com/questions/5515745/create-a-new-database-with-mysql-workbench) called mydatabase but don't create the tables since python will do that for you\n3. Install the MySQL connector for Python, add the DATABASE_URL configuration, and create the database and tables\n\n```\n$ sudo pip install mysql-connector-python-rf\n$ export DATABASE_URL=\"mysql+mysqlconnector://username:password@localhost/mydatabase\"\n$ python manage.py create_db\n```\n\nNote: you do not need to run \"python manage.py db upgrade\" or \"python manage.py db migrate\" if its your first go at it\n\n4. Run Back-End\n\n```\n$ python manage.py runserver\n```\n\nIf all goes well, you should see ```* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)``` followed by a few more lines in the terminal.\n\n5. open a new tab to the same directory and run the front end\n\n```\n$ cd static\n$ npm install\n$ npm start\n```\n\n6. open your browser to http://localhost:3000/register and setup your first account\n7. enjoy! By this point, you should be able to create an account and login without errors. \n\n\n\n\n","isFork":true},{"name":"flask_lynda","url":"https://github.com/gitbchang/flask_lynda","description":null,"lang":["Python","CSS","HTML"],"readme":"# flask_lynda\n","isFork":null},{"name":"redux-wb-2018","url":"https://github.com/gitbchang/redux-wb-2018","description":null,"lang":["JavaScript","CSS","HTML"],"readme":null,"isFork":null},{"name":"Learn-Redux-Starter-Files","url":"https://github.com/gitbchang/Learn-Redux-Starter-Files","description":"⚛ Starter files and solutions for the LearnRedux.com video series","lang":["JavaScript","CSS","HTML"],"readme":null,"isFork":true},{"name":"magento_sandbox","url":"https://github.com/gitbchang/magento_sandbox","description":null,"lang":["PHP","JavaScript","CSS","HTML","VCL","XSLT","Shell"],"readme":"# magento_sandbox","isFork":null},{"name":"webpack-simple-starter","url":"https://github.com/gitbchang/webpack-simple-starter","description":"A simple webpack starter without framework (Like Vue, React, Angular, etc.)","lang":["JavaScript","CSS","HTML"],"readme":"# Webpack Simple Starter\nA simple webpack starter without framework (Like Vue, React, Angular, etc.). This project is inspired from [**vue-cli webpack project**](https://github.com/vuejs/vue-cli#vue-build)\n\n## Getting Started\nFirst, install the modules that the project needs.\n```bash\n$ npm install\n```\n\nNow, let's start developing.\n```bash\n$ npm run dev\n```\n\nFinally development process done. Let's export for production.\n```bash\n$ npm run build\n```\n\nThat's it!. Files are ready to under the `dist/` directory for production.\n\n## What's in this project?\n\n### Directories\nThere are four main directories in project. This directories like below:\n```\nbuild/\t\t# Webpack configurations\nconfig/\t\t# Dev and prod configurations\nsrc/ \t\t# Project development files\n|_ scripts/\t# Javascript files\n|_ styles/\t# Style files (scss)\n|_ views/\t# HTML templates (pug)\nstatic/\t\t# Static files (Like fonts, images)\n```\n\n### Used Frameworks\n- Bootstrap and depended javascript frameworks like jquery. (Client)\n- Babel.js for ES6 compile\n- Sass for CSS\n- Pug for HTML template\n\nAlso, this project is supporting hot reload and include **eslint**\n\n## License\nThis project is under the MIT license.\n","isFork":true},{"name":"wallpost-fb","url":"https://github.com/gitbchang/wallpost-fb","description":null,"lang":["Python"],"readme":"# wallpost-fb\n","isFork":null},{"name":"scotch-bot","url":"https://github.com/gitbchang/scotch-bot","description":null,"lang":["JavaScript","Shell"],"readme":"# norrisbot\n\n[![CircleCI](https://circleci.com/gh/lmammino/norrisbot.svg?style=shield)](https://circleci.com/gh/lmammino/norrisbot) [![npm version](https://badge.fury.io/js/norrisbot.svg)](http://badge.fury.io/js/norrisbot) [![codecov](https://codecov.io/gh/lmammino/norrisbot/branch/master/graph/badge.svg)](https://codecov.io/gh/lmammino/norrisbot)\n[![Known Vulnerabilities](https://snyk.io/test/github/lmammino/norrisbot/badge.svg)](https://snyk.io/test/github/lmammino/norrisbot)\n\n## Make your team hyper-productive with cutting Chuck Norris jokes\n\nThe NorrisBot is a Slack bot that kicks asses, roundhouse-kicks to be precise... It's super-powered with Chuck Norris jokes and it aims to make your Slack channel even more \"slacker\" and enjoyable.\n\n![Chuck Norris face](assets/norrisbot-logo-small.png)\n\nNorrisBot is loaded with guns and jokes about Chuck Norris and it will tell a random joke every time that someone says “Chuck Norris” or \"norrisbot\" in a slack channel.\n\n![Norrisbot in action](assets/screenshot.png)\n\n\n## Installation\n\nAs simple as installing any other global node package. Be sure to have npm and node (`>= 4.3.2` version) installed and launch:\n\n```bash\n$ npm install -g norrisbot\n```\n\n\n### Alternative Installation (binaries)\n\nFrom release 2.0.3, every release comes also with dependency-free binaries for linux, mac and windows that can be downloaded in the [Releases page on GitHub](https://github.com/lmammino/norrisbot/releases).\n\n\n## Running the NorrisBot\n\nTo run the NorrisBot you must have a valid Slack [BOT token](#getting-the-bot-token-for-your-slack-channel) to authenticate the bot on your slack organization. Once you get it (instructions on the next paragraph) you just have to run:\n\n\n```bash\nNORRISBOT_TOKEN=somesecretkey norrisbot\n```\n\nOnce the bot is up and running, you need to invite him into the channels you want it to be available in.\n\n\n## Getting the BOT token for your Slack channel\n\nTo allow the NorrisBot to connect your Slack channel you must provide him a BOT token. To retrieve it you need to add a new Bot in your Slack organization by visiting the following url: https://*yourorganization*.slack.com/services/new/bot, where *yourorganization* must be substituted with the name of your organization (e.g. https://**loige**.slack.com/services/new/bot). Ensure you are logged to your Slack organization in your browser and you have the admin rights to add a new bot.\n\nYou will find your BOT token under the field `API Token`, copy it in a safe place and get ready to use it.\n\nAs an alternative you can create a bot by creating a custom application in the [Slack developer portal](https://api.slack.com/apps). Inside the application settings you will be able to add a bot user and retrieve a OAUTH BOT token for it.\n\n\n## Configuration\n\nThe NorrisBot is configurable through environment variables. There are several variable available:\n\n\n| Environment variable | Description |\n|----------------------|-------------|\n| `NORRISBOT_TOKEN` | The Slack Bot User OAuth Access Token for your organisation/team *(mandatory)* |\n| `NORRISBOT_TRIGGERS` |  A coma separated list of words that triggers the bot to reply with a joke *(default: `\"Chuck Norris,norrisbot\"`)* |\n| `NORRISBOT_CATEGORIES` | A coma separated list to enable special joke categories like \"explicit\" and \"nerdy\" *(default: `\"nerdy\"`)* |\n| `NORRISBOT_NO_PICTURES` | If set to TRUE will disable pictures in jokes *(default: `FALSE`)* |\n| `NORRISBOT_MESSAGE_COLOR` | The hex color used by the bot to mark it's messages *(default: `\"#590088\"`)* |\n\n\n## Installing on Heroku\n\nA great place where to deploy our lovely NorrisBot is [Heroku](https://heroku.com). We can go reasonably well with their free worker tier and the deploy process is reasonably easy and convenient. Let’s see how we can do that.\n\nI am assuming you already have and account on Heroku and that you have installed and configured the [Heroku toolbelt](https://devcenter.heroku.com/articles/heroku-cli) on your machine.\n\n### 1. Create a new Heroku app\n\nCreate a local folder and install norrisbot on it:\n\n```bash\nmkdir norrisbot-myorg\ncd norrisbot-myorg\nnpm init -y\nnpm i --save norrisbot\n```\n\nThen create a new app on heroku:\n\n```bash\nheroku create norrisbot-myorg\n```\n\n### 2. Configure your Heroku app:\n\n```bash\nheroku config:set --app norrisbot-myorg NORRISBOT_TOKEN=xoxb-YOUR-AWESOME-BOT-TOKEN\n```\n\n(of course you need to replace `xoxb-YOUR-AWESOME-BOT-TOKEN` with your actual token).\n\nYou can add extra configuration by defining values for the [other supported environment variables](#configuration) if you want to customize the behavior of the bot.\n\n### 3. Initialize your Heroku app\n\nCreate an Heroku `Procfile` (service definition)\n\n```bash\necho \"worker: node_modules/.bin/norrisbot\" >> Procfile\n```\n\nThen prepare the project to be published through git:\n\n```bash\ngit init\necho \"node_modules/\" >> .gitignore\ngit add --all\ngit commit -am \"first version\"\nheroku git:remote --app norrisbot-myorg\n```\n\n### 4. Publish and launch the Heroku app\n\nThrough heroku git\n\n```bash\ngit push heroku master\n```\n\nStop the web app (not present but started by default by Heroku) and run the worker:\n\n```bash\nheroku ps:scale web=0 worker=1\n```\n\nThat's it, now go on your Slack organization and start enjoying Chuck Norris jokes! 😂\n\n\n## Building the bot from source\n\nIf you downloaded the source code of the bot you can build the bot with\n\n```bash\nnpm run build\n```\n\nThen you can run it with:\n\n```bash\n$ npm start\n```\n\nDon't forget to set your `NORRISBOT_TOKEN` environment variable bedore doing so and to install all the dependencies (including dev ones with NPM or Yarn).\n\n\n## Bugs and improvements\n\nIf you find a bug or have an idea about how to improve the NorrisBot you can [open an issue](https://github.com/lmammino/norrisbot/issues) or [submit a pull request](https://github.com/lmammino/norrisbot/pulls), it will definitely make you a better person! :P\n\n\n## The Making of\n\nVersion 1 of NorrisBot has been developed in collaboration with [Scotch.io](https://scotch.io). A [very detailed article](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers) has been published to explain every single line of code. It also explains you how to deploy the bot on a free Heroku instance, so you should give it a shot!\n\n[![Building a Slack Bot with Node.js and Chuck Norris Super Powers](https://scotch.io/wp-content/uploads/2015/09/build-a-slack-bot-with-node-and-chuck-norris-super-powers.png)](https://scotch.io/tutorials/building-a-slack-bot-with-node-js-and-chuck-norris-super-powers)\n\nEnjoy your reading!\n\n\n## License\n\nLicensed under [MIT License](LICENSE). © Luciano Mammino.\n","isFork":null},{"name":"slackbot2","url":"https://github.com/gitbchang/slackbot2","description":null,"lang":["JavaScript","HTML","CSS"],"readme":null,"isFork":null},{"name":"basecamp-slackbot","url":"https://github.com/gitbchang/basecamp-slackbot","description":null,"lang":["JavaScript","CSS"],"readme":"# basecamp-slackbot\n\nUse basecamp2 API to query for specific messages and update slack channel","isFork":null},{"name":"beautiful-soup-parser","url":"https://github.com/gitbchang/beautiful-soup-parser","description":null,"lang":["Python"],"readme":"# beautiful-soup-parser","isFork":null},{"name":"image-scraper-site-map","url":"https://github.com/gitbchang/image-scraper-site-map","description":null,"lang":["JavaScript","Python"],"readme":"# image-scraper-site-map\n\n1. In terminal, run `node mapperv2.js` to generate a website's site map.\n  * See the site mapping options for output. \n  * The script will write all URLs to an xml file AFTER it is done. If cancelled before finish, xml will not be created.\n  * To add: write to file as stream.\n\n2. `pull_url.py` Use python script to pull all urls from the generated xml file\n  * Working - should use a xml parser and XPATH query to pull all values\n  * ~Workaround - find and replace opening tags with blank strings~\n\n3. In terminal, run `get_info.js` to scrape data from URL's gathered in step 2\n  * Wrap all URL's into an array and feed it into the .forEach function\n  * ```javascript\n    testUrls.forEach(function (url) {\n      getProductDetailsSync(url);\n    });\n    ```\n","isFork":null},{"name":"python2gmail","url":"https://github.com/gitbchang/python2gmail","description":null,"lang":["Python"],"readme":"# python2gmail","isFork":null},{"name":"xml-py-bchang","url":"https://github.com/gitbchang/xml-py-bchang","description":null,"lang":["Python"],"readme":"# xml-py-bchang\n","isFork":null},{"name":"bounti","url":"https://github.com/currychern/bounti","description":"Connecting neighbors to end food waste. A food recovery app.","lang":["JavaScript"],"readme":"# Bounti\n\n![AppMockup](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/app_mockup.png)\n\n> Bounti is an app that allows neighbors to share surplus food so it won't go to waste. We hope to foster community and help end food waste.\n\n## Contents\n\n- [Welcome!](#welcome)\n- [Project Description](#project-description)\n- [Recent News](#recent-news)\n- [Roadmap](#roadmap)\n- [Our Team](#our-team)\n- [Contributing](#contributing)\n  - [Design](#design)\n  - [Development](#development)\n\n## Welcome!\n\nWe're Bounti! Our team includes developers and designers. We are looking for more stakeholders in the community to be involved in the project. We are also looking for a project co-lead to help onboard new members, prioritize tasks, help with documentation, and conduct community outreach.\n\nWe are interested in bringing attention to the issue of wasted food and we are excited about the potential to get everyone in the community benefiting from less waste.\n\nThanks for coming here to learn more!\n\n## Project Description\n\nWe are a team of developers and designers working to build an app that allows neighbors to share surplus food to help alleviate hunger and end food waste.\n\nHere in the United States, we waste about 40% of the food we produce. Meanwhile, 1 out of every 6 households in here in Texas suffers from food insecurity. Teenagers and college students avoid asking for food assistance due to the social stigma around hunger and poverty. We hope to engage this audience and the broader community by making a network where sharing food is not only acceptable, but encouraged. :grinning::clap:\n\nOur app complements the efforts of food recovery organizations by focusing on the food we as individuals waste everyday. We are creating a peer-to-peer network to make everyone an active stakeholder in helping solve the problem of wasted food! :yum::fork_and_knife:\n\n## Recent News\n\nBounti was started at [ATX Hack for Change](atxhackforchange.org). We got a lot done during the hackathon and are trying to continue the momentum for a MVP rollout.\n\nWe're currently meeting in real life twice a month at [Open Austin's](https://www.open-austin.org/) Civic Hack Nights, check [Meetup](https://www.meetup.com/Open-Austin/) for upcoming hack nights.\n\n## Roadmap\n\nAt this stage, we have:\n\n1. v2 designs of Bounti. See examples [here](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/mockup_hackathon_final.png) and [here](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/mockup_hackathon_final_2.png) and [here](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/mockup_hackathon_final_3.png).\n\n2. A prototype that still needs a fair amount of work to get to version 1.0.\n\nWe are currently working on:\n\n1. Implementing the v2 designs of Bounti.\n![AppMockup](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/mockup_hackathon_final.png)\n\n2. Pulling data from Firebase.\n\n3. Creating the form submission page.\n![AppMockup](https://raw.githubusercontent.com/currychern/bounti/master/public/assets/mockup_hackathon_final_2.png)\n\nWe are looking for more developers with React Native and Firebase experience and a project co-lead to help us achieve our goal.\n\n## Our Team\n\n- Project Lead:\n  - [Curry Chern](https://github.com/currychern)\n- Planning:\n  - Jennifer Jiang\n- Design:\n  - John Dowd\n- Development:\n  - Kristin Faner\n  - Jimmy Hsu\n  - Aunteek Naser\n  - Christina Nick\n  - Bryan Chang\n  - Shelby\n  - William\n  - John\n\n## Contributing\n\nThis project has received contributions from some wonderful volunteers. We would love to add your name to the list below. Over the course of this project, we have opportunities to help with design, development, QA & testing, writing, and more. To contribute, you can:\n\n- Report a bug or request a feature by opening a new issue.\n- Review open issues and leave a comment if you'd like to help or if you need more information.\n\nFor more information, check out [CONTRIBUTING.md](/CONTRIBUTING.md)\n\n### Additional Contributors\n- [Bryan Chang](https://github.com/gitbchang) - React Native\n\n### Design\n\nHere is a link to our [design assets and documentation](./design). Here are [open issues labeled \"Design\"](https://github.com/currychern/bounti/issues?q=is%3Aissue%20is%3Aopen%20label%3Adesign) where you can discuss, provide feedback or volunteer to help.\n\n### Development\n\nThe Bounti app is primarily written in javascript and uses the [React Native](https://facebook.github.io/react-native/) library. We have future plans to implement [Redux](http://redux.js.org/). Data submitted to the server lives in [Firebase](https://www.firebase.com/), a Google cloud service.\n\n**Getting started**\n\nThis project has a dependency on Node and npm. Make sure they are install on your machine by running the following commands:\n`node -v`\n`npm -v`\n\nThis should return the version number of your install.\nIf it doesn't Google how to install Node & npm for your operating system.\n_Maybe these links could help you?_\n- [Ubuntu](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04)\n- [Mac](https://nodesource.com/blog/installing-nodejs-tutorial-mac-os-x/)\n\nWe recommend using the yarn package manager to install the project. You can check if it is on your machine by running: `yarn -v`\n\nYou can run the following command to install yarn:\n\n`npm install -g yarn`\n\nOnce you have cloned this repo to you local machine, open the `bounti` directory in your Terminal.\n\n`cd bounti`\n\n### Installation\n\n1. `yarn install`\n\n### Using Expo\n\nThe project uses [Expo](https://expo.io/), which enables you to view the app directly on your phone instead of an emulator.\n\n1. Download the Expo App on your phone.\n\n2. Make sure your phone and your machine are connected to the same local network. (An easy way to do this is to open a mobile hotspot and connect your computer to your phone's network).\n\n### Starting the App\n\n1. `npm start`\n\n2. scan the QR code using the Expo app OR if you are using an emulator [follow these directions](https://docs.expo.io/versions/v17.0.0/introduction/installation.html)\n___\n\n## Tools\n\n- [Slack](https://bounti-app.slack.com): Slack is messaging platform built for teams. Ask [@currychern](https://github.com/currychern) for access to the slack group. We hope to automate signup at some point in the future.\n- [Github](https://github.com/currychern/bounti): Github is a cloud-based Git repository hosting system. You're here! Hopefully not by mistake.\n- [Waffle](https://waffle.io/currychern/bounti): Waffle is a ticket system for Github issues. It helps teams visualize what's going on. Unfortunately, it doesn't come with a free waffle.\n","isFork":null},{"name":"vue2lara","url":"https://github.com/gitbchang/vue2lara","description":null,"lang":["HTML"],"readme":"# vue2lara","isFork":null},{"name":"php-learning","url":"https://github.com/gitbchang/php-learning","description":null,"lang":[],"readme":"# php-learning","isFork":null},{"name":"football-from-boilerplate","url":"https://github.com/gitbchang/football-from-boilerplate","description":null,"lang":["JavaScript","HTML","CSS"],"readme":"![](http://jpsierens.com/wp-content/uploads/2016/06/react-eco-wp.gif)\n\n# webpack-react-redux\nA boilerplate for playing around with react, redux and react-router with the help of webpack.\n\nContains: \n\n* a working example of a filterable table which you can play around with (look below).\n* ES6 - 7 Support with Babel\n* Redux dev tools to help you keep track of the app's state\n* Routing\n* hot module replacement support so you can change modules or react components without having to reload the browser\n* a webpack production config so you can build the app and make it ready for production\n* Sass support, just import your styles wherever you need them\n* eslint to keep your js readable\n* much more...\n\n\n\n![](http://jpsierens.com/wp-content/uploads/2016/06/filterableTable-1.gif)\n\n\n## Run the app\n\n0. ```npm install```\n0. ```npm start```\n\nOnce running, if you want to hide the redux dev monitor: ```CTRL+H```\n\nYes, it takes a while to load the first time you open the app.\n\n### Is the hot module replacement really working?\n\nYup! Take a look:\n\n![](http://jpsierens.com/wp-content/uploads/2016/06/HMR4.gif)\n\nThe app updates without the browser having to reload. You don't lose state!\n\n## Build the app\n```npm run build```\n\nThis will build the app into the \"dist\" directory in the root of the project. It contains the index.html along with the minified assets, ready for production.\n\n![](http://i.imgur.com/uUg2A3S.png)\n\nIt should look something like the above image.\n\n## I don't understand anything!\n\nI went ahead and wrote a detailed series of posts on this project for you. I hope it helps you understand better:\n\n* [configuring webpack](http://jpsierens.com/tutorial-react-redux-webpack/)\n* [understanding the app, part 1 (index.js, store, reducers)](http://jpsierens.com/simple-react-redux-application/)\n* [understanding the app, part 2 ( Root.js, router and the rest of the app)](http://jpsierens.com/simple-react-redux-application-2/)\n\n## Why doesn't it have async?\nTo keep it unopinionated. You choose what async library you want. If you want to check out a full example with async in it, check this simple [todo-app](https://github.com/jpsierens/todo-app) that uses redux-sagas.\n\"# football-from-boilerplate\" \r\n","isFork":null},{"name":"redux-router-blog","url":"https://github.com/gitbchang/redux-router-blog","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"\"# redux-router-blog\" \r\n","isFork":null},{"name":"twit-bot","url":"https://github.com/gitbchang/twit-bot","description":null,"lang":[],"readme":"# twit-bot","isFork":null},{"name":"weather-redux-demo","url":"https://github.com/gitbchang/weather-redux-demo","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"﻿# weather-redux-demo\r\n","isFork":null},{"name":"sgrider-redux-demo","url":"https://github.com/gitbchang/sgrider-redux-demo","description":null,"lang":["HTML","JavaScript"],"readme":"# ReduxSimpleStarter\n\nInterested in learning [Redux](https://www.udemy.com/react-redux/)?\n\n### Getting Started\n\nThere are two methods for getting started with this repo.\n\n#### Familiar with Git?\nCheckout this repo, install dependencies, then start the gulp process with the following:\n\n```\n> git clone https://github.com/StephenGrider/ReduxSimpleStarter.git\n> cd ReduxSimpleStarter\n> npm install\n> npm start\n```\n\n#### Not Familiar with Git?\nClick [here](https://github.com/StephenGrider/ReactStarter/releases) then download the .zip file.  Extract the contents of the zip file, then open your terminal, change to the project directory, and:\n\n```\n> npm install\n> npm start\n```\n# sgrider-redux-demo\r\n# sgrider-redux-demo\r\n","isFork":null},{"name":"getting-fishy","url":"https://github.com/gitbchang/getting-fishy","description":null,"lang":["HTML"],"readme":null,"isFork":null},{"name":"catch-fish-menu","url":"https://github.com/gitbchang/catch-fish-menu","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"# catch-fish-menu","isFork":null},{"name":"React-Portfolio","url":"https://github.com/gitbchang/React-Portfolio","description":null,"lang":["JavaScript","CSS"],"readme":"﻿# React-Portfolio\r\n","isFork":null},{"name":"React-Football-Stat-Tracker","url":"https://github.com/ChrisSayles/React-Football-Stat-Tracker","description":null,"lang":["JavaScript","CSS"],"readme":null,"isFork":null},{"name":"spotify-groundup","url":"https://github.com/gitbchang/spotify-groundup","description":null,"lang":["JavaScript","CSS"],"readme":"# spotify-groundup","isFork":null},{"name":"yak-yik-demo","url":"https://github.com/gitbchang/yak-yik-demo","description":null,"lang":["JavaScript","CSS"],"readme":"﻿# yak-yik-demo\r\n","isFork":null},{"name":"Learn-Redux","url":"https://github.com/gitbchang/Learn-Redux","description":"A simple, single file implementation of Redux for quick learning ","lang":["JavaScript","CSS","HTML"],"readme":null,"isFork":true},{"name":"spotify-router-project-v2","url":"https://github.com/gitbchang/spotify-router-project-v2","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n# spotify-router-project-v2\r\n","isFork":null},{"name":"spotify-redirect-uri","url":"https://github.com/gitbchang/spotify-redirect-uri","description":null,"lang":["HTML"],"readme":"# spotify-redirect-uri\n","isFork":null},{"name":"React-For-Beginners-Starter-Files","url":"https://github.com/gitbchang/React-For-Beginners-Starter-Files","description":"Starter files for learning React.js with React for Beginners","lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":true},{"name":"base-react-redux-app","url":"https://github.com/gitbchang/base-react-redux-app","description":null,"lang":["HTML","JavaScript"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n# base-react-redux-app\n","isFork":null},{"name":"spotify-router-project","url":"https://github.com/gitbchang/spotify-router-project","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n# spotify-router-project\n","isFork":null},{"name":"hackathon-bchang","url":"https://github.com/gitbchang/hackathon-bchang","description":null,"lang":["JavaScript","HTML","CSS"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n# hackathon-bchang\n","isFork":null},{"name":"spotify-project-test","url":"https://github.com/gitbchang/spotify-project-test","description":null,"lang":["JavaScript","HTML"],"readme":"# spotify-project-test","isFork":null},{"name":"create-react-nytimes","url":"https://github.com/gitbchang/create-react-nytimes","description":null,"lang":["HTML","CSS","JavaScript"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n","isFork":null},{"name":"udemy-redux-react","url":"https://github.com/gitbchang/udemy-redux-react","description":null,"lang":["HTML","CSS","JavaScript"],"readme":"# udemy-redux-react","isFork":null},{"name":"udemy-react-groundup","url":"https://github.com/gitbchang/udemy-react-groundup","description":null,"lang":[],"readme":"# udemy-react-groundup","isFork":null},{"name":"web-api-auth-examples","url":"https://github.com/gitbchang/web-api-auth-examples","description":"Basic examples to authenticate and fetch data using the Spotify Web API","lang":["JavaScript","HTML"],"readme":"# Spotify Accounts Authentication Examples\n\nThis project contains basic demos showing the different OAuth 2.0 flows for [authenticating against the Spotify Web API](https://developer.spotify.com/web-api/authorization-guide/).\n\nThese examples cover:\n\n* Authorization Code flow\n* Client Credentials flow\n* Implicit Grant flow\n\n## Installation\n\nThese examples run on Node.js. On [its website](http://www.nodejs.org/download/) you can find instructions on how to install it. You can also follow [this gist](https://gist.github.com/isaacs/579814) for a quick and easy way to install Node.js and npm.\n\nOnce installed, clone the repository and install its dependencies running:\n\n    $ npm install\n\n## Running the examples\nIn order to run the different examples, open the folder with the name of the flow you want to try out, and run its `app.js` file. For instance, to run the Authorization Code example do:\n\n    $ cd authorization_code\n    $ node app.js\n\nThen, open `http://localhost:8888` in a browser.\n\n### Using your own credentials\nThe examples contains a working client ID and secret key. Note, however, that they might be rate limited if they are used frequently. If you are planning to create an application, we recommend you register your app and get your own credentials instead of using the ones in this project.\n\nGo to [My Applications on Spotify Developer](https://developer.spotify.com/my-applications) and create your application. For the examples, we registered these Redirect URIs:\n\n* http://localhost:8888 (needed for the implicit grant flow)\n* http://localhost:8888/callback\n\nOnce you have created your app, replace the `client_id`, `redirect_uri` and `client_secret` in the examples with the ones you get from My Applications.\n","isFork":true},{"name":"week-19-ny-react","url":"https://github.com/gitbchang/week-19-ny-react","description":null,"lang":["JavaScript","HTML"],"readme":"# week-19-ny-react","isFork":null},{"name":"mern-starter","url":"https://github.com/gitbchang/mern-starter","description":"Boilerplate for getting started with MERN stack","lang":["JavaScript","CSS","HTML"],"readme":"![](http://res.cloudinary.com/hashnode/image/upload/w_200/v1466495663/static_imgs/mern/v2/mernio-logo.png)\n\n# mern-starter\n![title](https://travis-ci.org/Hashnode/mern-starter.svg?branch=v2.0.0)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\n[![Discuss on Hashnode](\nhttps://hashnode.github.io/badges/mern.svg)](https://hashnode.com/n/mern)\n\n\nMERN is a scaffolding tool which makes it easy to build isomorphic apps using Mongo, Express, React and NodeJS. It minimises the setup time and gets you up to speed using proven technologies.\n\n- [Website](http://mern.io)\n- [Documentation](http://mern.io/documentation.html)\n- [Discussions](https://hashnode.com/n/mern)\n\n## Quickstart\n\n```\n  npm install -g mern-cli\n  mern init your_new_app\n  cd your_new_app\n  npm install\n  npm start\n```\n\n**Note : Please make sure your MongoDB is running.** For MongoDB installation guide see [this](https://docs.mongodb.org/v3.0/installation/). Also `npm3` is required to install dependencies properly.\n\n## Available Commands\n\n1. `npm run start` - starts the development server with hot reloading enabled\n\n2. `npm run bs` - bundles the code and starts the production server\n\n3. `npm run test` - start the test runner\n\n4. `npm run watch:test` - start the test runner with watch mode\n\n5. `npm run cover` - generates test coverage report\n\n6. `npm run lint` - runs linter to check for lint errors\n\n## File Structure\n\n### Webpack Configs\n\nMERN uses Webpack for bundling modules. There are four types of Webpack configs provided `webpack.config.dev.js` (for development), `webpack.config.prod.js` (for production), `webpack.config.server.js` (for bundling server in production) and `webpack.config.babel.js` (for [babel-plugin-webpack-loaders](https://github.com/istarkov/babel-plugin-webpack-loaders) for server rendering of assets included through webpack).\n\nThe Webpack configuration is minimal and beginner-friendly. You can customise and add more features to it for production build.\n\n### Server\n\nMERN uses express web framework. Our app sits in server.js where we check for NODE_ENV.\n\nIf NODE_ENV is development, we apply Webpack middlewares for bundling and Hot Module Replacement.\n\n#### Server Side Rendering\n\nWe use React Router's match function for handling all page requests so that browser history works.\n\nAll the routes are defined in `client/routes.js`. React Router renders components according to route requested.\n\n```js\n// Server Side Rendering based on routes matched by React-router.\napp.use((req, res) => {\n    match({\n        routes,\n        location: req.url\n    }, (err, redirectLocation, renderProps) => {\n        if (err) {\n            return res.status(500).end('Internal server error');\n        }\n\n        if (!renderProps) {\n            return res.status(404).end('Not found!');\n        }\n\n        const initialState = {\n            posts: [],\n            post: {}\n        };\n\n        const store = configureStore(initialState);\n\n        fetchComponentData(store.dispatch, renderProps.components, renderProps.params).then(() => {\n            const initialView = renderToString(\n                <Provider store = {store} >\n                  <RouterContext {...renderProps}/>\n                </Provider>\n            );\n\n            const finalState = store.getState();\n\n            res.status(200).end(renderFullPage(initialView, finalState));\n        }).catch(() => {\n            res.end(renderFullPage('Error', {}));\n        });\n    });\n});\n```\n\n`match` takes two parameters, first is an object that contains routes, location and history and second is a callback function which is called when routes have been matched to a location.\n\nIf there's an error in matching we return 500 status code, if no matches are found we return 404 status code. If a match is found then, we need to create a new Redux Store instance.\n\n**Note:** A new Redux Store has populated afresh on every request.\n\n`fetchComponentData` is the essential function. It takes three params: first is a dispatch function of Redux store, the second is an array of components that should be rendered in current route and third is the route params. `fetchComponentData` collects all the needs (need is an array of actions that are required to be dispatched before rendering the component) of components in the current route. It returns a promise when all the required actions are dispatched. We render the page and send data to the client for client-side rendering in `window.__INITIAL_STATE__`.\n\n### Client\n\nClient directory contains all the shared components, routes, modules.\n\n#### components\nThis folder contains all the common components which are used throughout the project.\n\n#### index.js\nIndex.js simply does client side rendering using the data provided from `window.__INITIAL_STATE__`.\n\n#### modules\nModules are the way of organising different domain-specific modules in the project. A typical module contains the following\n```\n| - Post\n  | - __tests__ // all the tests for this module goes here\n      | - components // Sub components of this module\n          | - Post.spec.js\n          | - PostList.spec.js\n          | - PostItem.spec.js\n          | - PostImage.spec.js\n      | - pages\n          | - PostPage.spec.js\n          | - PostViewPage.spec.js\n      | - PostReducer.spec.js\n      | - PostActions.spec.js\n  | - components // Sub components of this module\n      | - Post.js\n      | - PostList.js\n      | - PostItem.js\n      | - PostImage.js\n  | - pages // React Router Pages from this module\n      | - PostPage\n          | - PostPage.js\n          | - PostPage.css\n      | - PostViewPage\n          | - PostViewPage.js\n          | - PostViewPage.css\n  | - PostReducer.js\n  | - PostActions.js\n```\n\n## Misc\n\n### Importing Assets\nAssets can be kept where you want and can be imported into your js files or css files. Those fill be served by webpack in development mode and copied to the dist folder during production.\n\n### ES6 support\nWe use babel to transpile code in both server and client with `stage-0` plugin. So, you can use both ES6 and experimental ES7 features.\n\n### Docker\nThere are docker configurations for both development and production.\n\nTo run docker for development,\n```\ndocker-compose -f docker-compose-development.yml build\ndocker-compose -f docker-compose-development.yml up\n```\n\nTo run docker for production,\n```\ndocker-compose build\ndocker-compose up\n```\n\n### Make your MERN\nIn this version, we enabled the `mern-cli` to clone not only this project but also the variants of `mern-starter` like one project with MaterialUI or JWT auth. To make your version of MERN, follow these steps\n\n1. Clone this project\n    ```\n    git clone https://github.com/Hashnode/mern-starter\n    ```\n\n2. Make your changes. Add a package, add authentication, modify the file structure, replace Redux with MobX or anything else.\n\n3. In this version, we also added code generators. Blueprints for those generators are located at `config/blueprints`, and config is located at `mern.json`. Make sure to edit them if necessary after your made modifications in the previous step. There is a section below which explains how to modify generators.\n\n4. Next clone `mern-cli` project\n    ```\n    git clone https://github.com/Hashnode/mern-cli\n    ```\n\n5. Add your project details to `variants.json` in the cloned project and send a pull request.\n\n### Modifying Generators\n\n#### mern.json\nIt contains a blueprints array. Each object in it is the config for a generator. A blueprint config contains the name, description, usage, and files array. An example blueprint config\n```\n{\n  \"name\": \"dumb-s\",\n  \"description\": \"Generates a dumb react component in shared components\",\n  \"usage\": \"dumb-s [component-name]\",\n  \"files\": [\n    {\n      \"blueprint-path\": \"config/blueprints/dumb-component.ejs\",\n      \"target-path\": \"client/components/<%= helpers.capitalize(name) %>.js\"\n    }\n  ]\n}\n```\n\nA file object contains\n\n1. `blueprint-path` - location of the blueprint file\n\n2. `target-path` - location where the file should be generated\n\n3. `parent-path` - optional parameter, used if you want to generate the file inside an already existing folder in your project.\n\nAlso, `target-path` supports [ejs](https://github.com/mde/ejs) and the following variables will be passed while rendering,\n\n1. `name` - `<component-name>` input from user\n\n2. `parent` - in particular special cases where you need to generate files inside an already existing folder, you can obtain this parent variable from the user. A config using that will look like,\n    ```\n    {\n      \"name\": \"dumb-m\",\n      \"description\": \"Generates a dumb react component in a module directory\",\n      \"usage\": \"dumb-m <module-name>/<component-name>\",\n      \"files\": [\n        {\n          \"blueprint-path\": \"config/blueprints/dumb-component.ejs\",\n          \"parent-path\": \"client/modules/<%= helpers.capitalize(parent) %>\",\n          \"target-path\": \"components/<%= helpers.capitalize(name) %>/<%= helpers.capitalize(name) %>.js\"\n        }\n      ]\n    }\n    ```\n    Here, notice the usage. In `<module-name>/<component-name>`, `<module-name>` will be passed as `parent` and `<component-name>` will be passed as `<name>`.\n\n3. `helpers` - an helper object is passed which include common utility functions. For now, it contains `capitalize`. If you want to add more, send a PR to [mern-cli](https://github.com/Hashnode/mern-cli).\n\n#### Blueprint files\nBlueprints are basically [ejs](https://github.com/mde/ejs) templates which are rendered with the same three variables(`name`, optional `parent` and `helpers` object) as above.\n\n### Caveats\n\n#### FOUC (Flash of Unstyled Content)\nTo make the hot reloading of CSS work, we are not extracting CSS in development. Ideally, during server rendering, we will be extracting CSS, and we will get a .css file, and we can use it in the html template. That's what we are doing in production.\n\nIn development, after all scripts get loaded, react loads the CSS as BLOBs. That's why there is a second of FOUC in development.\n\n#### Client and Server Markup Mismatch\nThis warning is visible only on development and totally harmless. This occurs to hash difference in `react-router`. To solve it, react router docs asks you to use `match` function. If we use `match`, `react-hot-reloader` stops working.\n\n## License\nMERN is released under the [MIT License](http://www.opensource.org/licenses/MIT).\n","isFork":true},{"name":"boilerplate-nyt-react","url":"https://github.com/gitbchang/boilerplate-nyt-react","description":null,"lang":["HTML","CSS","JavaScript"],"readme":"This project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images and Fonts](#adding-images-and-fonts)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Modulus](#modulus)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` silently fails](#npm-run-build-silently-fails)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (stage 2 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\n>**A note for Atom `linter-eslint` users**\n\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\n\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\n\n\n>**For Visual Studio Code users**\n\n>VS Code ESLint plugin automatically detects Create React App's configuration file. So you do not need to create `eslintrc.json` at the root directory, except when you want to add your own rules. In that case, you should include CRA's config by adding this line:\n\n>```js\n{\n  // ...\n  \"extends\": \"react-app\"\n}\n```\n\nThen add this block to the `package.json` file of your project:\n\n```js\n{\n  // ...\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  }\n}\n```\n\nFinally, you will need to install some packages *globally*:\n\n```sh\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@4.0.0 eslint-plugin-flowtype@2.21.0\n```\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) editor.**\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"userDataDir\": \"${workspaceRoot}/.vscode/chrome\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```\nnpm install --save <library-name>\n```\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```\nnpm install node-sass --save-dev\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```\nnpm install --save-dev npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build\": \"npm run build-css && react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files. Note that `node-sass` seems to have an [issue recognizing newly created files on some systems](https://github.com/sass/node-sass/issues/1891) so you might need to restart the watcher when you create a file until it’s resolved.\n\n## Adding Images and Fonts\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-and-fonts).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-and-fonts) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```\nnpm install react-bootstrap --save\nnpm install bootstrap@3 --save\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save-dev flow-bin` (or `yarn add --dev flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow -- init` (or `yarn flow -- init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset REACT_APP_SECRET_CODE=abcdef&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\n\n```sh\nnpm install --save-dev enzyme react-addons-test-utils\n```\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written simpler with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo setup jest-enzyme with Create React App, follow the instructions for [initializing your test environment](#initializing-test-environment) to import `jest-enzyme`.\n\n```sh\nnpm install --save-dev jest-enzyme\n```\n\n```js\n// src/setupTests.js\nimport 'jest-enzyme';\n```\n\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 4\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm test\n  - npm run build\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"test\": \"react-scripts test --env=jsdom\"\n  }\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* With a text label.\n* With an emoji.\n* In the disabled mode.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [React Storybook](https://github.com/kadirahq/react-storybook) to your project. **It is a third-party tool that lets you develop components and see all their states in isolation from your app**.\n\n![React Storybook Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n**Here’s how to setup your app with Storybook:**\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g getstorybook\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/kadirahq/react-storybook)\n* [Documentation](https://getstorybook.io/docs)\n* [Snapshot Testing](https://github.com/kadirahq/storyshots) with React Storybook\n\n## Making a Progressive Web App\n\nYou can turn your React app into a [Progressive Web App](https://developers.google.com/web/progressive-web-apps/) by following the steps in [this repository](https://github.com/jeffposnick/create-react-pwa).\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static('./build'));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, './build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static('./build'));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, './build', 'index.html'));\n });\n```\n\nIf you’re using [Apache](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`.\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### Azure\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to [Microsoft Azure](https://azure.microsoft.com/).\n\n### Firebase\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### GitHub Pages\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field:\n\n```js\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save-dev gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```js\n  // ...\n  \"scripts\": {\n    // ...\n    \"predeploy\": \"npm run build\",\n    \"deploy\": \"gh-pages -d build\"\n  }\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### Heroku\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### Modulus\n\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\n\n## Netlify\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Click `Build your site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### Now\n\n[now](https://zeit.co/now) offers a zero-configuration single-command deployment.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Install `serve` by running `npm install --save serve`.\n\n3. Add this line to `scripts` in `package.json`:\n    \n    ```\n    \"now-start\": \"serve build/\",\n    ```\n    \n4. Run `now` from your project directory. You will see a **now.sh** URL in your output like this:\n    \n    ```\n    > Ready! https://your-project-dirname-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n    \n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/now-static)\n\n### S3 and CloudFront\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/).\n\n### Surge\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\n\n```sh\n              email: email@domain.com\n           password: ********\n       project path: /path/to/project/build\n               size: 7 files, 1.8 MB\n             domain: create-react-app.surge.sh\n             upload: [====================] 100%, eta: 0.0s\n   propagate on CDN: [====================] 100%\n               plan: Free\n              users: email@domain.com\n         IP Address: X.X.X.X\n\n    Success! Project is published and running at create-react-app.surge.sh\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Working with editors supporting safe write”](https://webpack.github.io/docs/webpack-dev-server.html#working-with-editors-ides-supporting-safe-write).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://webpack.github.io/docs/troubleshooting.html#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` silently fails\n\nIt is reported that `npm run build` can fail on machines with no swap space, which is common in cloud environments. If [the symptoms are matching](https://github.com/facebookincubator/create-react-app/issues/1133#issuecomment-264612171), consider adding some swap space to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n","isFork":null},{"name":"d3-chart-demo","url":"https://github.com/gitbchang/d3-chart-demo","description":null,"lang":["HTML","CSS"],"readme":"# d3-chart-demo","isFork":null},{"name":"dealwithit-bot","url":"https://github.com/gitbchang/dealwithit-bot","description":null,"lang":["JavaScript","CSS","HTML"],"readme":"![GIF](dealwithitbot.gif)\n\n### the dealwithit bot\nDetects all faces in a photo and slides on a pair of pixel shades. Truly a worthwhile use of the bountiful technological feast made possible by machine learning and artificial intelligence. Deal with it. Test it out at [aifunclub.azurewebsites.net](http://aifunclub.azurewebsites.net).\n\n### What's under the hood\n- [Project Oxford for Node](https://github.com/felixrieseberg/project-oxford) calls the [Microsoft Face API](http://microsoft.com/cognitive) to return angle, pitch, and coordinates of eyes and eyebrows for each face detected (max. 64).\n- [socket.io](https://github.com/socketio/socket.io) handles communication between the node server and client HTML.\n- [JQuery](https://jquery.com/) takes care of a few things like the generation and animation of glasses.\n\nIf you want to play with this code on your own, you'll need to add your own [API key](http://microsoft.com/cognitive) for the Face API. \n\n------\n\n\n\tThe AI FUN CLUB makes AI fun!\n\t\n\t...club.\n","isFork":null},{"name":"mongoscraper","url":"https://github.com/gitbchang/mongoscraper","description":null,"lang":[],"readme":"# mongoscraper","isFork":null},{"name":"Restaurant-Rec","url":"https://github.com/gitbchang/Restaurant-Rec","description":null,"lang":["JavaScript","HTML","CSS"],"readme":"# Restaurant-Rec","isFork":null},{"name":"bchang-js-assessment","url":"https://github.com/gitbchang/bchang-js-assessment","description":null,"lang":["JavaScript","HTML"],"readme":"[![Build Status](https://travis-ci.org/rmurphey/js-assessment.svg?branch=master)](https://travis-ci.org/rmurphey/js-assessment)\n\n# A test-driven JS assessment\n\nThis repo includes a set of tests that can be used to assess the skills of\na candidate for a JavaScript position, or to evaluate and improve one's own\nskills.\n\n## I want to work on the tests; what do I do?\nTo use the tests, you will need to install [Node](https://nodejs.org/). Note\nthat on Windows, there are some reports that you will need to restart\nafter installing Node - see #12.\n\nYou can clone or download this repo. Once you have done so, from the root\ndirectory of the repo, run:\n\n    npm install\n    npm start\n\nYou can then view the tests in your browser at\n[http://localhost:4444](http://localhost:4444).\n\nWhen you visit that page, all of the tests should be failing; your job is to\nget the tests to pass. To do this, you'll need to refer to the tests in the\nfiles in the `tests/app` directory, and edit the files in the `app/` directory.\nOnce you update a test, you can reload the test page in the browser to see\nwhether it worked.\n\nYou can also run (most of) the tests on the command line:\n\n    npm test\n\nThe command line runner is a work in progress; contributions welcome :)\n\n### Available dependencies\n\nThe repo includes jQuery, Backbone, and Underscore. You can use these\nlibraries when writing your solutions!\n\n## I want to contribute tests; what do I do?\n\nSubmit a pull request! The tests are currently loosely organized by topic, so\nyou should do your best to add tests to the appropriate file in `tests/app`, or\ncreate a new file there if you don't see an appropriate one. If you do create\na new file, make sure to add it to `tests/runner.js`, and to add a stub for the\nsolution to the corresponding file in `app/`. Finally, it would be great if you\ncould update the [answers](https://github.com/rmurphey/js-assessment-answers)\nas well.\n\nIf you're not sure how or where to add a test, please open an issue.\n\n### Data-driven tests\n\nIf your tests need data that can be fetched via XHR, stick a `.json` file in\nthe `data` directory; you can access it at `/data/<filename>.json`.\n\n## I want to see the answers!\n\nFirst, bear in mind that looking up the answers is going to teach you a whole\nlot less than you'll learn by working on the tests, even if you occasionally get\nstuck. I'd recommend only looking at the answers once you have the tests\npassing, to see if there's another way you could have approached the\nproblem. When you're ready to look at the answers, you can find them\n[here](https://github.com/rmurphey/js-assessment-answers); I'll do my best to\nkeep them up to date.\n\n## I hate \\<some technology you've chosen\\>\n\nThis repo uses [Mocha](https://github.com/mochajs/mocha) and\n[Chai](http://chaijs.com/) for the tests themselves. It uses the BDD style for authoring tests.\nIf this doesn't suit you, please fork away, or, better, submit a pull request that lets\nthis be more flexible than it currently is.\n\n# Todos\n\nThere are a number of things that would make this project better; check out the\n[issues](https://github.com/rmurphey/js-assessment/issues) for details, pull\nrequests welcome!\n\n# License\n\nCopyright &copy; 2012-2016 Rebecca Murphey with many thanks to several\n[contributors](https://github.com/rmurphey/js-assessment/graphs/contributors).\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-sa/4.0/88x31.png\" /></a>\n\nThis work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/4.0/\">Creative Commons Attribution-ShareAlike 4.0 International License</a>.\n","isFork":null},{"name":"mystack-fromscratch","url":"https://github.com/gitbchang/mystack-fromscratch","description":null,"lang":["JavaScript"],"readme":"# mystack-fromscratch","isFork":null},{"name":"resreq","url":"https://github.com/bdeckard92/resreq","description":null,"lang":["JavaScript","HTML","CSS"],"readme":"# resreq","isFork":null},{"name":"hm-solo","url":"https://github.com/gitbchang/hm-solo","description":null,"lang":["CSS","JavaScript","HTML","PHP"],"readme":"# hm-solo","isFork":null},{"name":"week-15-burger-sequelize","url":"https://github.com/gitbchang/week-15-burger-sequelize","description":null,"lang":["JavaScript","CSS","HTML"],"readme":"# burger-sequelize","isFork":null},{"name":"week-14-burger","url":"https://github.com/gitbchang/week-14-burger","description":null,"lang":["JavaScript","HTML","CSS"],"readme":"# week-14-burger","isFork":null},{"name":"hot-rest-2","url":"https://github.com/gitbchang/hot-rest-2","description":null,"lang":["JavaScript","HTML"],"readme":"# hot-rest-2","isFork":null},{"name":"HotRestaurant","url":"https://github.com/mchogan7/HotRestaurant","description":null,"lang":["HTML","JavaScript"],"readme":null,"isFork":null},{"name":"week-13-friend-finder","url":"https://github.com/gitbchang/week-13-friend-finder","description":null,"lang":["JavaScript","HTML"],"readme":"# week-13-friend-finder","isFork":null},{"name":"server-ex-1","url":"https://github.com/gitbchang/server-ex-1","description":null,"lang":["JavaScript"],"readme":"# server-ex-1","isFork":null},{"name":"week-12-bamazon","url":"https://github.com/gitbchang/week-12-bamazon","description":null,"lang":["JavaScript"],"readme":"# week-12-bamazon","isFork":null},{"name":"sb-squares","url":"https://github.com/gitbchang/sb-squares","description":null,"lang":["HTML","PHP","JavaScript","CSS"],"readme":"# sb-squares","isFork":null},{"name":"week-11-flash2","url":"https://github.com/gitbchang/week-11-flash2","description":null,"lang":[],"readme":"# week-11-flash2","isFork":null},{"name":"week-11-flashcard","url":"https://github.com/gitbchang/week-11-flashcard","description":null,"lang":["JavaScript"],"readme":"# week-11-flashcard","isFork":null},{"name":"hangman2","url":"https://github.com/gitbchang/hangman2","description":null,"lang":["CSS","HTML","JavaScript","PHP"],"readme":"# hangman2","isFork":null},{"name":"week-10-liri","url":"https://github.com/gitbchang/week-10-liri","description":null,"lang":["JavaScript"],"readme":"# week-10-liri","isFork":null},{"name":"Happy-Medium","url":"https://github.com/bdeckard92/Happy-Medium","description":"Group project for Brian, Wellington, Rob, and Bob","lang":["HTML","CSS","JavaScript","PHP"],"readme":"[![Stories in Ready](https://badge.waffle.io/bdeckard92/Happy-Medium.png?label=ready&title=Ready)](https://waffle.io/bdeckard92/Happy-Medium)\n# Happy-Medium\nGroup project for Brian, Wellington, Rob, and Bob\n","isFork":null},{"name":"firebase-tutorials","url":"https://github.com/gitbchang/firebase-tutorials","description":null,"lang":["JavaScript","HTML"],"readme":"# firebase-tutorials","isFork":null},{"name":"material-portfolio","url":"https://github.com/gitbchang/material-portfolio","description":null,"lang":["HTML","CSS","PHP","JavaScript"],"readme":"# material-portfolio","isFork":null},{"name":"gmaps-w-jquery","url":"https://github.com/gitbchang/gmaps-w-jquery","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"# gmaps-w-jquery","isFork":null},{"name":"week-7-rps-challenge","url":"https://github.com/gitbchang/week-7-rps-challenge","description":"Multiplayer RPS Game - Firebase","lang":["JavaScript","HTML","CSS","PHP"],"readme":"# week-7-rps-challenge\nMultiplayer RPS Game - Firebase\n","isFork":null},{"name":"week-7-train-basic","url":"https://github.com/gitbchang/week-7-train-basic","description":null,"lang":["HTML","JavaScript","PHP"],"readme":"# week-7-train-basic","isFork":null},{"name":"week-4-game-challenge","url":"https://github.com/gitbchang/week-4-game-challenge","description":null,"lang":["CSS","HTML","PHP","JavaScript"],"readme":"# week-4-game-challenge","isFork":null},{"name":"nytimes-api","url":"https://github.com/gitbchang/nytimes-api","description":null,"lang":["JavaScript","HTML"],"readme":"# nytimes-api","isFork":null},{"name":"colofilter.css","url":"https://github.com/gitbchang/colofilter.css","description":"Colofilter.css - Duotone filters made with CSS ! ","lang":["HTML","CSS"],"readme":"# colofilter.css\n\n[![Join the chat at https://gitter.im/LukyVj/colofilter.css](https://badges.gitter.im/LukyVj/colofilter.css.svg)](https://gitter.im/LukyVj/colofilter.css?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nColofilter.css - Duotone filters made with CSS ! \n\nMore info at [http://lukyvj.github.io/colofilter.css](http://lukyvj.github.io/colofilter.css)\n\n## Codepen demo \nYou can check this codepen collection using colofilter.css : [http://codepen.io/collection/AGpJpm/](http://codepen.io/collection/AGpJpm/)\n\n---\nIf you need to make colorify works with `background-image` please, take a look at : [This codepen demo](http://codepen.io/LukyVj/pen/9a44a89dc4e49884347141bb74a8927f)\n\n( But I'm about to update colofilter.css to make it easier to work with background images )\n\n--- \n[Check demo image (heavy)](https://github.com/LukyVj/colofilter.css/raw/master/filters.png)\n--- \n\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/LukyVj/colofilter.css/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n","isFork":true},{"name":"week-6-giphy","url":"https://github.com/gitbchang/week-6-giphy","description":null,"lang":["PHP","JavaScript","CSS","HTML"],"readme":"# week-6-giphy","isFork":null},{"name":"week-5-game","url":"https://github.com/gitbchang/week-5-game","description":null,"lang":["JavaScript","HTML","CSS","PHP"],"readme":"# week-5-game","isFork":null},{"name":"hangman-rework","url":"https://github.com/gitbchang/hangman-rework","description":null,"lang":["CSS","JavaScript","HTML","PHP"],"readme":"# hangman-rework","isFork":null},{"name":"week3-game","url":"https://github.com/gitbchang/week3-game","description":null,"lang":["PHP","HTML","CSS","JavaScript"],"readme":"# week3-game","isFork":null},{"name":"week-4-game","url":"https://github.com/gitbchang/week-4-game","description":null,"lang":["HTML","PHP","CSS","JavaScript"],"readme":"# week-4-game","isFork":null},{"name":"Test-Portfolio2","url":"https://github.com/gitbchang/Test-Portfolio2","description":null,"lang":["HTML","PHP"],"readme":"# Test-Portfolio2","isFork":null},{"name":"Bootstrap-Portfolio","url":"https://github.com/gitbchang/Bootstrap-Portfolio","description":null,"lang":["HTML","CSS","PHP"],"readme":"# Bootstrap-Portfolio","isFork":null},{"name":"Responsive-Portfolio","url":"https://github.com/gitbchang/Responsive-Portfolio","description":null,"lang":["CSS","HTML","PHP"],"readme":"# Responsive-Portfolio","isFork":null},{"name":"Basic-Portfolio","url":"https://github.com/gitbchang/Basic-Portfolio","description":null,"lang":["CSS","HTML","PHP"],"readme":"# Basic-Portfolio","isFork":null},{"name":"Bchang-bio","url":"https://github.com/gitbchang/Bchang-bio","description":"student bio","lang":["HTML","CSS"],"readme":"# Bchang-bio\nstudent bio\n","isFork":null},{"name":"hello-world","url":"https://github.com/gitbchang/hello-world","description":"github tutorial","lang":[],"readme":"# hello-world\ngithub tutorial\n\nHello World! I will be starting a new path in my career today. Watch Out!\n","isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":3149271,"git_name":"Brian Chang","git_login":"bchang1213","git_location":"Los Angeles","git_company":null,"git_org":[],"git_email":null,"git_blog":"http://www.bchang.io","git_websiteUrl":"http://www.bchang.io","github_url":"https://github.com/bchang1213","bio":"I'm a software developer specializing in Node.js.\r\n\r\nI work at:\r\nhttps://github.com/vanvalenlab\r\nand\r\nhttps://github.com/yoyochinese","repos":[{"name":"deepCell","url":"https://github.com/bchang1213/deepCell","description":"React, Express, Node, PostGRESQL app for a machine learning imaging app","lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"react_boilerplate","url":"https://github.com/bchang1213/react_boilerplate","description":"This is a blank React v16 project set up completely with Webpack and Babel. All components should be sourced from \"src\". You can run a dev server by running: `webpack-dev-server --mode development`","lang":["HTML","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"bchang.io","url":"https://github.com/bchang1213/bchang.io","description":"portfolio","lang":["JavaScript","CSS","HTML"],"readme":null,"isFork":null},{"name":"awesome-cheatsheets","url":"https://github.com/bchang1213/awesome-cheatsheets","description":"📚 Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.","lang":["Python","JavaScript","Shell","HTML","PHP"],"readme":"![AWESOME CHEATSHEETS LOGO](_images/awesome_cheatsheets_logo@2x.png)\n\n[![Awesome](https://awesome.re/badge.svg)](https://awesome.re) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/LeCoupa/awesome-cheatsheets/blob/master/LICENSE)\n\n> 📚 Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.\n\n> ❤️ **If you like this repository, [you can click here to tweet it and make it spread](https://ctt.ec/PHba4).**\n\n\n## 🤔 Why Awesome-Cheatsheets?\n\nI always make a cheatsheet when I want to improve my skills on a programming language, a framework or a development tool. [I started doing these kind of things a long time ago on Gist](https://gist.github.com/LeCoupa) To better keep track of the history and to let people contribute to them, I reorganized everything into this  single repository. Most of the content is coming from official documentations and some books I have read.\n\nFeel free to browse each cheatsheet to learn new things and to keep them at hand when you forgot about one command. They have been designed to provide a quick way to assess your knowledge and to save you time.\n\n\n## 🙌🏼 How to Contribute?\n\nYou are more than welcome to contribute and build your own cheatsheet for your favorite programming language, framework or development tool. Just submit changes via pull request and I will review them before merging.\n\n\n## 📚 Table of Contents\n\n### 📃 Languages\n\n<details>\n<summary>View cheatsheets</summary>\n\n#### Command line interface\n\n* [Bash](languages/bash.sh)\n\n#### Imperative\n\n* [PHP](languages/php.php)\n\n#### Functional\n\n* [JavaScript](languages/javascript.js)\n</details>\n\n\n### 📦 Backend\n\n<details>\n<summary>View cheatsheets</summary>\n\n#### Python\n\n* [Django](backend/django.py)\n\n#### Javascript\n  \n* [Feathers.js](backend/feathers.js)\n* [Moleculer](backend/moleculer.js)\n* [Node.js](backend/node.js)\n</details>\n\n\n### 🌐 Frontend\n\n<details>\n<summary>View cheatsheets</summary>\n\n#### Basics\n\n* [HTML5](frontend/html5.html)\n\n#### Frameworks\n\n* [React.js](frontend/react.js)\n* [Vue.js](frontend/vue.js)\n</details>\n\n\n### 🗃️ Databases\n\n<details>\n<summary>View cheatsheets</summary>\n\n#### NoSQL\n\n* [Redis](databases/redis.sh)\n</details>\n\n\n### 🔧 Tools\n\n<details>\n<summary>View cheatsheets</summary>\n\n#### Development\n\n* [VIM](tools/vim.txt)\n* [Xcode](tools/xcode.txt)\n\n#### Infrastructure\n\n* [Docker](tools/docker.sh)\n* [Kubernetes](tools/kubernetes.sh)\n* [Nanobox Boxfile](tools/nanobox_boxfile.yml)\n* [Nanobox CLI](tools/nanobox_cli.sh)\n</details>\n\n\n## 🙏🏻 Contribution\n\n<table>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://anyleads.com/\" target=\"_blank\"><img src=\"https://pbs.twimg.com/profile_images/838140522476761094/A4WpBe5M_400x400.jpg\" height=\"64\" /></a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://crisp.chat/\" target=\"_blank\"><img src=\"https://pbs.twimg.com/profile_images/651629444944273408/r5Kd_ifq_400x400.png\" height=\"64\" /></a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://hackr.io/\" target=\"_blank\"><img src=\"https://d1eq8vvyuam4eq.cloudfront.net/assets/images/code-images/code-apple-touch-icon-precomposed.png\" height=\"64\" /></a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://learnk8s.io/\" target=\"_blank\"><img src=\"https://pbs.twimg.com/profile_images/925127335573114880/9yCkEIe3_400x400.jpg\" height=\"64\" /></a>\n    </td>\n  </tr>\n</table>\n\n> 👋 Do you want your company to be listed there? Contribute with a cheatsheet for your favorite programming language, framework or development tool.\n","isFork":true},{"name":"java_Subscriptions","url":"https://github.com/bchang1213/java_Subscriptions","description":"redbelt exam. test. SpringBoot application, Java. MySQL. Config, Controllers, models, repositories, services, validator. full stack. login: goku@goku.com password: password","lang":["Shell","Batchfile","Java"],"readme":null,"isFork":null},{"name":"kanaknow","url":"https://github.com/bchang1213/kanaknow","description":"React.js application utilizing google text to speech api and two dimensional canvas api.","lang":["HTML","CSS","JavaScript"],"readme":"KnowKana is a single page app made with React.js. It uses a Text-To-Speech Engine in Japanese to vocalize Japanese Kana and also allows the user to practice writing their kana.\n\nIt uses Redux as a data store.\n\nTOOLS USED:\n\nReact.js / Node.js / npm / Redux / babel / webpack\n\ndependencies: flexboxgrid, fontawesome, material-ui, react-color, react-dropzone, react-dom, react-modal, react-sketch, react-tabs, react-tap-event-plugin, react-voice-components.\n---------------------------------------------------------------------------------------------\nThis project was bootstrapped with [Create React App](https://github.com/facebookincubator/create-react-app).\n\nBelow you will find some information on how to perform common tasks.<br>\nYou can find the most recent version of this guide [here](https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md).\n\n## Table of Contents\n\n- [Updating to New Releases](#updating-to-new-releases)\n- [Sending Feedback](#sending-feedback)\n- [Folder Structure](#folder-structure)\n- [Available Scripts](#available-scripts)\n  - [npm start](#npm-start)\n  - [npm test](#npm-test)\n  - [npm run build](#npm-run-build)\n  - [npm run eject](#npm-run-eject)\n- [Supported Browsers](#supported-browsers)\n- [Supported Language Features and Polyfills](#supported-language-features-and-polyfills)\n- [Syntax Highlighting in the Editor](#syntax-highlighting-in-the-editor)\n- [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\n- [Debugging in the Editor](#debugging-in-the-editor)\n- [Formatting Code Automatically](#formatting-code-automatically)\n- [Changing the Page `<title>`](#changing-the-page-title)\n- [Installing a Dependency](#installing-a-dependency)\n- [Importing a Component](#importing-a-component)\n- [Code Splitting](#code-splitting)\n- [Adding a Stylesheet](#adding-a-stylesheet)\n- [Post-Processing CSS](#post-processing-css)\n- [Adding a CSS Preprocessor (Sass, Less etc.)](#adding-a-css-preprocessor-sass-less-etc)\n- [Adding Images, Fonts, and Files](#adding-images-fonts-and-files)\n- [Using the `public` Folder](#using-the-public-folder)\n  - [Changing the HTML](#changing-the-html)\n  - [Adding Assets Outside of the Module System](#adding-assets-outside-of-the-module-system)\n  - [When to Use the `public` Folder](#when-to-use-the-public-folder)\n- [Using Global Variables](#using-global-variables)\n- [Adding Bootstrap](#adding-bootstrap)\n  - [Using a Custom Theme](#using-a-custom-theme)\n- [Adding Flow](#adding-flow)\n- [Adding a Router](#adding-a-router)\n- [Adding Custom Environment Variables](#adding-custom-environment-variables)\n  - [Referencing Environment Variables in the HTML](#referencing-environment-variables-in-the-html)\n  - [Adding Temporary Environment Variables In Your Shell](#adding-temporary-environment-variables-in-your-shell)\n  - [Adding Development Environment Variables In `.env`](#adding-development-environment-variables-in-env)\n- [Can I Use Decorators?](#can-i-use-decorators)\n- [Fetching Data with AJAX Requests](#fetching-data-with-ajax-requests)\n- [Integrating with an API Backend](#integrating-with-an-api-backend)\n  - [Node](#node)\n  - [Ruby on Rails](#ruby-on-rails)\n- [Proxying API Requests in Development](#proxying-api-requests-in-development)\n  - [\"Invalid Host Header\" Errors After Configuring Proxy](#invalid-host-header-errors-after-configuring-proxy)\n  - [Configuring the Proxy Manually](#configuring-the-proxy-manually)\n  - [Configuring a WebSocket Proxy](#configuring-a-websocket-proxy)\n- [Using HTTPS in Development](#using-https-in-development)\n- [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\n- [Pre-Rendering into Static HTML Files](#pre-rendering-into-static-html-files)\n- [Injecting Data from the Server into the Page](#injecting-data-from-the-server-into-the-page)\n- [Running Tests](#running-tests)\n  - [Filename Conventions](#filename-conventions)\n  - [Command Line Interface](#command-line-interface)\n  - [Version Control Integration](#version-control-integration)\n  - [Writing Tests](#writing-tests)\n  - [Testing Components](#testing-components)\n  - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\n  - [Initializing Test Environment](#initializing-test-environment)\n  - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\n  - [Coverage Reporting](#coverage-reporting)\n  - [Continuous Integration](#continuous-integration)\n  - [Disabling jsdom](#disabling-jsdom)\n  - [Snapshot Testing](#snapshot-testing)\n  - [Editor Integration](#editor-integration)\n- [Debugging Tests](#debugging-tests)\n  - [Debugging Tests in Chrome](#debugging-tests-in-chrome)\n  - [Debugging Tests in Visual Studio Code](#debugging-tests-in-visual-studio-code)\n- [Developing Components in Isolation](#developing-components-in-isolation)\n  - [Getting Started with Storybook](#getting-started-with-storybook)\n  - [Getting Started with Styleguidist](#getting-started-with-styleguidist)\n- [Publishing Components to npm](#publishing-components-to-npm)\n- [Making a Progressive Web App](#making-a-progressive-web-app)\n  - [Opting Out of Caching](#opting-out-of-caching)\n  - [Offline-First Considerations](#offline-first-considerations)\n  - [Progressive Web App Metadata](#progressive-web-app-metadata)\n- [Analyzing the Bundle Size](#analyzing-the-bundle-size)\n- [Deployment](#deployment)\n  - [Static Server](#static-server)\n  - [Other Solutions](#other-solutions)\n  - [Serving Apps with Client-Side Routing](#serving-apps-with-client-side-routing)\n  - [Building for Relative Paths](#building-for-relative-paths)\n  - [Azure](#azure)\n  - [Firebase](#firebase)\n  - [GitHub Pages](#github-pages)\n  - [Heroku](#heroku)\n  - [Netlify](#netlify)\n  - [Now](#now)\n  - [S3 and CloudFront](#s3-and-cloudfront)\n  - [Surge](#surge)\n- [Advanced Configuration](#advanced-configuration)\n- [Troubleshooting](#troubleshooting)\n  - [`npm start` doesn’t detect changes](#npm-start-doesnt-detect-changes)\n  - [`npm test` hangs on macOS Sierra](#npm-test-hangs-on-macos-sierra)\n  - [`npm run build` exits too early](#npm-run-build-exits-too-early)\n  - [`npm run build` fails on Heroku](#npm-run-build-fails-on-heroku)\n  - [`npm run build` fails to minify](#npm-run-build-fails-to-minify)\n  - [Moment.js locales are missing](#momentjs-locales-are-missing)\n- [Alternatives to Ejecting](#alternatives-to-ejecting)\n- [Something Missing?](#something-missing)\n\n## Updating to New Releases\n\nCreate React App is divided into two packages:\n\n* `create-react-app` is a global command-line utility that you use to create new projects.\n* `react-scripts` is a development dependency in the generated projects (including this one).\n\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\n\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\n\n## Sending Feedback\n\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\n\n## Folder Structure\n\nAfter creation, your project should look like this:\n\n```\nmy-app/\n  README.md\n  node_modules/\n  package.json\n  public/\n    index.html\n    favicon.ico\n  src/\n    App.css\n    App.js\n    App.test.js\n    index.css\n    index.js\n    logo.svg\n```\n\nFor the project to build, **these files must exist with exact filenames**:\n\n* `public/index.html` is the page template;\n* `src/index.js` is the JavaScript entry point.\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\nYou need to **put any JS and CSS files inside `src`**, otherwise Webpack won’t see them.\n\nOnly files inside `public` can be used from `public/index.html`.<br>\nRead instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.<br>\nThey will not be included in the production build so you can use them for things like documentation.\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.<br>\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\n\nThe page will reload if you make edits.<br>\nYou will also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.<br>\nSee the section about [running tests](#running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.<br>\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.<br>\nYour app is ready to be deployed!\n\nSee the section about [deployment](#deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\n\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\n## Supported Browsers\n\nBy default, the generated project uses the latest version of React.\n\nYou can refer [to the React documentation](https://reactjs.org/docs/react-dom.html#browser-support) for more information about supported browsers.\n\n## Supported Language Features and Polyfills\n\nThis project supports a superset of the latest JavaScript standard.<br>\nIn addition to [ES6](https://github.com/lukehoban/es6features) syntax features, it also supports:\n\n* [Exponentiation Operator](https://github.com/rwaldron/exponentiation-operator) (ES2016).\n* [Async/await](https://github.com/tc39/ecmascript-asyncawait) (ES2017).\n* [Object Rest/Spread Properties](https://github.com/sebmarkbage/ecmascript-rest-spread) (stage 3 proposal).\n* [Dynamic import()](https://github.com/tc39/proposal-dynamic-import) (stage 3 proposal)\n* [Class Fields and Static Properties](https://github.com/tc39/proposal-class-public-fields) (part of stage 3 proposal).\n* [JSX](https://facebook.github.io/react/docs/introducing-jsx.html) and [Flow](https://flowtype.org/) syntax.\n\nLearn more about [different proposal stages](https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-).\n\nWhile we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide [codemods](https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb) if any of these proposals change in the future.\n\nNote that **the project only includes a few ES6 [polyfills](https://en.wikipedia.org/wiki/Polyfill)**:\n\n* [`Object.assign()`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) via [`object-assign`](https://github.com/sindresorhus/object-assign).\n* [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) via [`promise`](https://github.com/then/promise).\n* [`fetch()`](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) via [`whatwg-fetch`](https://github.com/github/fetch).\n\nIf you use any other ES6+ features that need **runtime support** (such as `Array.from()` or `Symbol`), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\nAlso note that using some newer syntax features like `for...of` or `[...nonArrayValue]` causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use [Babel REPL](https://babeljs.io/repl/) to see what any specific syntax compiles down to.\n\n## Syntax Highlighting in the Editor\n\nTo configure the syntax highlighting in your favorite text editor, head to the [relevant Babel documentation page](https://babeljs.io/docs/editors) and follow the instructions. Some of the most popular editors are covered.\n\n## Displaying Lint Output in the Editor\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.<br>\n>It also only works with npm 3 or higher.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first. Then, add a file called `.eslintrc` to the project root:\n\n```js\n{\n  \"extends\": \"react-app\"\n}\n```\n\nNow your editor should report the linting warnings.\n\nNote that even if you edit your `.eslintrc` file further, these changes will **only affect the editor integration**. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.\n\nIf you want to enforce a coding style for your project, consider using [Prettier](https://github.com/jlongster/prettier) instead of ESLint style rules.\n\n## Debugging in the Editor\n\n**This feature is currently only supported by [Visual Studio Code](https://code.visualstudio.com) and [WebStorm](https://www.jetbrains.com/webstorm/).**\n\nVisual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\n### Visual Studio Code\n\nYou would need to have the latest version of [VS Code](https://code.visualstudio.com) and VS Code [Chrome Debugger Extension](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) installed.\n\nThen add the block below to your `launch.json` file and put it inside the `.vscode` folder in your app’s root directory.\n\n```json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [{\n    \"name\": \"Chrome\",\n    \"type\": \"chrome\",\n    \"request\": \"launch\",\n    \"url\": \"http://localhost:3000\",\n    \"webRoot\": \"${workspaceRoot}/src\",\n    \"sourceMapPathOverrides\": {\n      \"webpack:///src/*\": \"${webRoot}/*\"\n    }\n  }]\n}\n```\n>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).\n\nStart your app by running `npm start`, and start debugging in VS Code by pressing `F5` or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\nHaving problems with VS Code Debugging? Please see their [troubleshooting guide](https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting).\n\n### WebStorm\n\nYou would need to have [WebStorm](https://www.jetbrains.com/webstorm/) and [JetBrains IDE Support](https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji) Chrome extension installed.\n\nIn the WebStorm menu `Run` select `Edit Configurations...`. Then click `+` and select `JavaScript Debug`. Paste `http://localhost:3000` into the URL field and save the configuration.\n\n>Note: the URL may be different if you've made adjustments via the [HOST or PORT environment variables](#advanced-configuration).\n\nStart your app by running `npm start`, then press `^D` on macOS or `F9` on Windows and Linux or click the green debug icon to start debugging in WebStorm.\n\nThe same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. \n\n## Formatting Code Automatically\n\nPrettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the [Prettier's GitHub page](https://github.com/prettier/prettier) for more information, and look at this [page to see it in action](https://prettier.github.io/prettier/).\n\nTo format our code whenever we make a commit in git, we need to install the following dependencies:\n\n```sh\nnpm install --save husky lint-staged prettier\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add husky lint-staged prettier\n```\n\n* `husky` makes it easy to use githooks as if they are npm scripts.\n* `lint-staged` allows us to run scripts on staged files in git. See this [blog post about lint-staged to learn more about it](https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8).\n* `prettier` is the JavaScript formatter we will run before commits.\n\nNow we can make sure every file is formatted correctly by adding a few lines to the `package.json` in the project root.\n\nAdd the following line to `scripts` section:\n\n```diff\n  \"scripts\": {\n+   \"precommit\": \"lint-staged\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\nNext we add a 'lint-staged' field to the `package.json`, for example:\n\n```diff\n  \"dependencies\": {\n    // ...\n  },\n+ \"lint-staged\": {\n+   \"src/**/*.{js,jsx,json,css}\": [\n+     \"prettier --single-quote --write\",\n+     \"git add\"\n+   ]\n+ },\n  \"scripts\": {\n```\n\nNow, whenever you make a commit, Prettier will format the changed files automatically. You can also run `./node_modules/.bin/prettier --single-quote --write \"src/**/*.{js,jsx,json,css}\"` to format your entire project for the first time.\n\nNext you might want to integrate Prettier in your favorite editor. Read the section on [Editor Integration](https://prettier.io/docs/en/editors.html) on the Prettier GitHub page.\n\n## Changing the Page `<title>`\n\nYou can find the source HTML file in the `public` folder of the generated project. You may edit the `<title>` tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the `public` folder very often. For example, [adding a stylesheet](#adding-a-stylesheet) is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser [`document.title`](https://developer.mozilla.org/en-US/docs/Web/API/Document/title) API. For more complex scenarios when you want to change the title from React components, you can use [React Helmet](https://github.com/nfl/react-helmet), a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in [this section](#generating-dynamic-meta-tags-on-the-server). Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered [here](#pre-rendering-into-static-html-files).\n\n## Installing a Dependency\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\n\n```sh\nnpm install --save react-router\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-router\n```\n\nThis works for any library, not just `react-router`.\n\n## Importing a Component\n\nThis project setup supports ES6 modules thanks to Babel.<br>\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\n\nFor example:\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass Button extends Component {\n  render() {\n    // ...\n  }\n}\n\nexport default Button; // Don’t forget to use export default!\n```\n\n### `DangerButton.js`\n\n\n```js\nimport React, { Component } from 'react';\nimport Button from './Button'; // Import a component from another file\n\nclass DangerButton extends Component {\n  render() {\n    return <Button color=\"red\" />;\n  }\n}\n\nexport default DangerButton;\n```\n\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n\nLearn more about ES6 modules:\n\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n## Code Splitting\n\nInstead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.\n\nThis project setup supports code splitting via [dynamic `import()`](http://2ality.com/2017/01/import-operator.html#loading-code-on-demand). Its [proposal](https://github.com/tc39/proposal-dynamic-import) is in stage 3. The `import()` function-like form takes the module name as an argument and returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) which always resolves to the namespace object of the module.\n\nHere is an example:\n\n### `moduleA.js`\n\n```js\nconst moduleA = 'Hello';\n\nexport { moduleA };\n```\n### `App.js`\n\n```js\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  handleClick = () => {\n    import('./moduleA')\n      .then(({ moduleA }) => {\n        // Use moduleA\n      })\n      .catch(err => {\n        // Handle failure\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Load</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nThis will make `moduleA.js` and all its unique dependencies as a separate chunk that only loads after the user clicks the 'Load' button.\n\nYou can also use it with `async` / `await` syntax if you prefer it.\n\n### With React Router\n\nIf you are using React Router check out [this tutorial](http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html) on how to use code splitting with it. You can find the companion GitHub repository [here](https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app).\n\nAlso check out the [Code Splitting](https://reactjs.org/docs/code-splitting.html) section in React documentation.\n\n## Adding a Stylesheet\n\nThis project setup uses [Webpack](https://webpack.js.org/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\n\n### `Button.css`\n\n```css\n.Button {\n  padding: 20px;\n}\n```\n\n### `Button.js`\n\n```js\nimport React, { Component } from 'react';\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\n\nclass Button extends Component {\n  render() {\n    // You can use them as regular CSS styles\n    return <div className=\"Button\" />;\n  }\n}\n```\n\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\n\n## Post-Processing CSS\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\n\nFor example, this:\n\n```css\n.App {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n}\n```\n\nbecomes this:\n\n```css\n.App {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n```\n\nIf you need to disable autoprefixing for some reason, [follow this section](https://github.com/postcss/autoprefixer#disabling).\n\n## Adding a CSS Preprocessor (Sass, Less etc.)\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a `.Button` CSS class in `<AcceptButton>` and `<RejectButton>` components, we recommend creating a `<Button>` component with its own `.Button` styles, that both `<AcceptButton>` and `<RejectButton>` can render (but [not inherit](https://facebook.github.io/react/docs/composition-vs-inheritance.html)).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\n```sh\nnpm install --save node-sass-chokidar\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add node-sass-chokidar\n```\n\nThen in `package.json`, add the following lines to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"build-css\": \"node-sass-chokidar src/ -o src/\",\n+    \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\n>Note: To use a different preprocessor, replace `build-css` and `watch-css` commands according to your preprocessor’s documentation.\n\nNow you can rename `src/App.css` to `src/App.scss` and run `npm run watch-css`. The watcher will find every Sass file in `src` subdirectories, and create a corresponding CSS file next to it, in our case overwriting `src/App.css`. Since `src/App.js` still imports `src/App.css`, the styles become a part of your application. You can now edit `src/App.scss`, and `src/App.css` will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, `src/App.scss` and other component style files could include `@import \"./shared.scss\";` with variable definitions.\n\nTo enable importing files without using relative paths, you can add the  `--include-path` option to the command in `package.json`.\n\n```\n\"build-css\": \"node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/\",\n\"watch-css\": \"npm run build-css && node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive\",\n```\n\nThis will allow you to do imports like\n\n```scss\n@import 'styles/_colors.scss'; // assuming a styles directory under src/\n@import 'nprogress/nprogress'; // importing a css file from the nprogress node module\n```\n\nAt this point you might want to remove all CSS files from the source control, and add `src/**/*.css` to your `.gitignore` file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run `watch-css` automatically with `npm start`, and run `build-css` as a part of `npm run build`. You can use the `&&` operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\n```sh\nnpm install --save npm-run-all\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add npm-run-all\n```\n\nThen we can change `start` and `build` scripts to include the CSS preprocessor commands:\n\n```diff\n   \"scripts\": {\n     \"build-css\": \"node-sass-chokidar src/ -o src/\",\n     \"watch-css\": \"npm run build-css && node-sass-chokidar src/ -o src/ --watch --recursive\",\n-    \"start\": \"react-scripts start\",\n-    \"build\": \"react-scripts build\",\n+    \"start-js\": \"react-scripts start\",\n+    \"start\": \"npm-run-all -p watch-css start-js\",\n+    \"build-js\": \"react-scripts build\",\n+    \"build\": \"npm-run-all build-css build-js\",\n     \"test\": \"react-scripts test --env=jsdom\",\n     \"eject\": \"react-scripts eject\"\n   }\n```\n\nNow running `npm start` and `npm run build` also builds Sass files.\n\n**Why `node-sass-chokidar`?**\n\n`node-sass` has been reported as having the following issues:\n\n- `node-sass --watch` has been reported to have *performance issues* in certain conditions when used in a virtual machine or with docker.\n\n- Infinite styles compiling [#1939](https://github.com/facebookincubator/create-react-app/issues/1939)\n\n- `node-sass` has been reported as having issues with detecting new files in a directory [#1891](https://github.com/sass/node-sass/issues/1891)\n\n `node-sass-chokidar` is used here as it addresses these issues.\n\n## Adding Images, Fonts, and Files\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can **`import` a file right in a JavaScript module**. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the `src` attribute of an image or the `href` of a link to a PDF.\n\nTo reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a [data URI](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs) instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to [#1153](https://github.com/facebookincubator/create-react-app/issues/1153).\n\nHere is an example:\n\n```js\nimport React from 'react';\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\n\nconsole.log(logo); // /logo.84287d09.png\n\nfunction Header() {\n  // Import result is the URL of your image\n  return <img src={logo} alt=\"Logo\" />;\n}\n\nexport default Header;\n```\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\n```css\n.Logo {\n  background-image: url(./logo.png);\n}\n```\n\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\nAn alternative way of handling static assets is described in the next section.\n\n## Using the `public` Folder\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\n### Changing the HTML\n\nThe `public` folder contains the HTML file so you can tweak it, for example, to [set the page title](#changing-the-page-title).\nThe `<script>` tag with the compiled code will be added to it automatically during the build process.\n\n### Adding Assets Outside of the Module System\n\nYou can also add other assets to the `public` folder.\n\nNote that we normally encourage you to `import` assets in JavaScript files instead.\nFor example, see the sections on [adding a stylesheet](#adding-a-stylesheet) and [adding images and fonts](#adding-images-fonts-and-files).\nThis mechanism provides a number of benefits:\n\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n* Missing files cause compilation errors instead of 404 errors for your users.\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\n\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\n\nInside `index.html`, you can use it like this:\n\n```html\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\n```\n\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\n\n```js\nrender() {\n  // Note: this is an escape hatch and should be used sparingly!\n  // Normally we recommend using `import` for getting asset URLs\n  // as described in “Adding Images and Fonts” above this section.\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\n}\n```\n\nKeep in mind the downsides of this approach:\n\n* None of the files in `public` folder get post-processed or minified.\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\n### When to Use the `public` Folder\n\nNormally we recommend importing [stylesheets](#adding-a-stylesheet), [images, and fonts](#adding-images-fonts-and-files) from JavaScript.\nThe `public` folder is useful as a workaround for a number of less common cases:\n\n* You need a file with a specific name in the build output, such as [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest).\n* You have thousands of images and need to dynamically reference their paths.\n* You want to include a small script like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\n* Some library may be incompatible with Webpack and you have no other option but to include it as a `<script>` tag.\n\nNote that if you add a `<script>` that declares global variables, you also need to read the next section on using them.\n\n## Using Global Variables\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the `window` object, for example:\n\n```js\nconst $ = window.$;\n```\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding `// eslint-disable-line` after it.\n\n## Adding Bootstrap\n\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\n```sh\nnpm install --save react-bootstrap bootstrap@3\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-bootstrap bootstrap@3\n```\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your ```src/index.js``` file:\n\n```js\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap-theme.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\n```\n\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\n\n```js\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\n```\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\n\n### Using a Custom Theme\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br>\nWe suggest the following approach:\n\n* Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n* Add the necessary build steps to tweak the theme, and publish your package on npm.\n* Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a [customized Bootstrap](https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165) that follows these steps.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nRecent versions of [Flow](http://flowtype.org/) work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n\n1. Run `npm install --save flow-bin` (or `yarn add flow-bin`).\n2. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n3. Run `npm run flow init` (or `yarn flow init`) to create a [`.flowconfig` file](https://flowtype.org/docs/advanced-configuration.html) in the root directory.\n4. Add `// @flow` to any files you want to type check (for example, to `src/App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use an IDE like [Nuclide](https://nuclide.io/docs/languages/flow/) for a better integrated experience.\nIn the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out [its documentation](https://flowtype.org/).\n\n## Adding a Router\n\nCreate React App doesn't prescribe a specific routing solution, but [React Router](https://reacttraining.com/react-router/) is the most popular one.\n\nTo add it, run:\n\n```sh\nnpm install --save react-router-dom\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-router-dom\n```\n\nTo try it, delete all the code in `src/App.js` and replace it with any of the examples on its website. The [Basic Example](https://reacttraining.com/react-router/web/example/basic) is a good place to get started.\n\nNote that [you may need to configure your production server to support client-side routing](#serving-apps-with-client-side-routing) before deploying your app.\n\n## Adding Custom Environment Variables\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\n`REACT_APP_`.\n\n**The environment variables are embedded during the build time**. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like [described here](#injecting-data-from-the-server-into-the-page). Alternatively you can rebuild the app on the server anytime you change them.\n\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid accidentally [exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\nThese environment variables will be defined for you on `process.env`. For example, having an environment\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`.\n\nThere is also a special built-in environment variable called `NODE_ENV`. You can read it from `process.env.NODE_ENV`. When you run `npm start`, it is always equal to `'development'`, when you run `npm test` it is always equal to `'test'`, and when you run `npm run build` to make a production bundle, it is always equal to `'production'`. **You cannot override `NODE_ENV` manually.** This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is\ndeployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\nin the environment inside a `<form>`:\n\n```jsx\nrender() {\n  return (\n    <div>\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\n      <form>\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\n      </form>\n    </div>\n  );\n}\n```\n\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\n\n```html\n<div>\n  <small>You are running this application in <b>development</b> mode.</small>\n  <form>\n    <input type=\"hidden\" value=\"abcdef\" />\n  </form>\n</div>\n```\n\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\na `.env` file. Both of these ways are described in the next few sections.\n\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\n\n```js\nif (process.env.NODE_ENV !== 'production') {\n  analytics.disable();\n}\n```\n\nWhen you compile the app with `npm run build`, the minification step will strip out this condition, and the resulting bundle will be smaller.\n\n### Referencing Environment Variables in the HTML\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nYou can also access the environment variables starting with `REACT_APP_` in the `public/index.html`. For example:\n\n```html\n<title>%REACT_APP_WEBSITE_NAME%</title>\n```\n\nNote that the caveats from the above section apply:\n\n* Apart from a few built-in variables (`NODE_ENV` and `PUBLIC_URL`), variable names must start with `REACT_APP_` to work.\n* The environment variables are injected at build time. If you need to inject them at runtime, [follow this approach instead](#generating-dynamic-meta-tags-on-the-server).\n\n### Adding Temporary Environment Variables In Your Shell\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the\nlife of the shell session.\n\n#### Windows (cmd.exe)\n\n```cmd\nset \"REACT_APP_SECRET_CODE=abcdef\" && npm start\n```\n\n(Note: Quotes around the variable assignment are required to avoid a trailing whitespace.)\n\n#### Windows (Powershell)\n\n```Powershell\n($env:REACT_APP_SECRET_CODE = \"abcdef\") -and (npm start)\n```\n\n#### Linux, macOS (Bash)\n\n```bash\nREACT_APP_SECRET_CODE=abcdef npm start\n```\n\n### Adding Development Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\n\nTo define permanent environment variables, create a file called `.env` in the root of your project:\n\n```\nREACT_APP_SECRET_CODE=abcdef\n```\n>Note: You must create custom environment variables beginning with `REACT_APP_`. Any other variables except `NODE_ENV` will be ignored to avoid [accidentally exposing a private key on the machine that could have the same name](https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527). Changing any environment variables will require you to restart the development server if it is running.\n\n`.env` files **should be** checked into source control (with the exclusion of `.env*.local`).\n\n#### What other `.env` files can be used?\n\n>Note: this feature is **available with `react-scripts@1.0.0` and higher**.\n\n* `.env`: Default.\n* `.env.local`: Local overrides. **This file is loaded for all environments except test.**\n* `.env.development`, `.env.test`, `.env.production`: Environment-specific settings.\n* `.env.development.local`, `.env.test.local`, `.env.production.local`: Local overrides of environment-specific settings.\n\nFiles on the left have more priority than files on the right:\n\n* `npm start`: `.env.development.local`, `.env.development`, `.env.local`, `.env`\n* `npm run build`: `.env.production.local`, `.env.production`, `.env.local`, `.env`\n* `npm test`: `.env.test.local`, `.env.test`, `.env` (note `.env.local` is missing)\n\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\n\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\n\n#### Expanding Environment Variables In `.env`\n\n>Note: this feature is available with `react-scripts@1.1.0` and higher.\n\nExpand variables already on your machine for use in your `.env` file (using [dotenv-expand](https://github.com/motdotla/dotenv-expand)).\n\nFor example, to get the environment variable `npm_package_version`:\n\n```\nREACT_APP_VERSION=$npm_package_version\n# also works:\n# REACT_APP_VERSION=${npm_package_version}\n```\n\nOr expand variables local to the current `.env` file:\n\n```\nDOMAIN=www.example.com\nREACT_APP_FOO=$DOMAIN/foo\nREACT_APP_BAR=$DOMAIN/bar\n```\n\n## Can I Use Decorators?\n\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\nCreate React App doesn’t support decorator syntax at the moment because:\n\n* It is an experimental proposal and is subject to change.\n* The current specification version is not officially supported by Babel.\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\nPlease refer to these two threads for reference:\n\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\n## Fetching Data with AJAX Requests\n\nReact doesn't prescribe a specific approach to data fetching, but people commonly use either a library like [axios](https://github.com/axios/axios) or the [`fetch()` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) provided by the browser. Conveniently, Create React App includes a polyfill for `fetch()` so you can use it without worrying about the browser support.\n\nThe global `fetch` function allows to easily makes AJAX requests. It takes in a URL as an input and returns a `Promise` that resolves to a `Response` object. You can find more information about `fetch` [here](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n\nThis project also includes a [Promise polyfill](https://github.com/then/promise) which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises [here](https://www.promisejs.org/) and [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise). Both axios and `fetch()` use Promises under the hood. You can also use the [`async / await`](https://davidwalsh.name/async-await) syntax to reduce the callback nesting.\n\nYou can learn more about making AJAX requests from React components in [the FAQ entry on the React website](https://reactjs.org/docs/faq-ajax.html).\n\n## Integrating with an API Backend\n\nThese tutorials will help you to integrate your app with an API backend running on another port,\nusing `fetch()` to access it.\n\n### Node\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\n\n### Ruby on Rails\n\nCheck out [this tutorial](https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/).\nYou can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo-rails).\n\n## Proxying API Requests in Development\n\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\nFor example, a production setup might look like this after the app is deployed:\n\n```\n/             - static server returns index.html with React app\n/todos        - static server returns index.html with React app\n/api/todos    - server handles any /api/* requests using the backend implementation\n```\n\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\n\n```js\n  \"proxy\": \"http://localhost:4000\",\n```\n\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will **only** attempt to send requests without `text/html` in its `Accept` header to the proxy.\n\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\n\n```\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\n```\n\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\n\nThe `proxy` option supports HTTP, HTTPS and WebSocket connections.<br>\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\n\n* [Configure the proxy yourself](#configuring-the-proxy-manually)\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\n\n### \"Invalid Host Header\" Errors After Configuring Proxy\n\nWhen you enable the `proxy` option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in [this article](https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a) and [this issue](https://github.com/webpack/webpack-dev-server/issues/887).\n\nThis shouldn’t affect you when developing on `localhost`, but if you develop remotely like [described here](https://github.com/facebookincubator/create-react-app/issues/2271), you will see this error in the browser after enabling the `proxy` option:\n\n>Invalid Host header\n\nTo work around it, you can specify your public development host in a file called `.env.development` in the root of your project:\n\n```\nHOST=mypublicdevhost.com\n```\n\nIf you restart the development server now and load the app from the specified host, it should work.\n\nIf you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to `.env.development.local`. **Note that this is dangerous and exposes your machine to remote code execution from malicious websites:**\n\n```\n# NOTE: THIS IS DANGEROUS!\n# It exposes your machine to attacks from the websites you visit.\nDANGEROUSLY_DISABLE_HOST_CHECK=true\n```\n\nWe don’t recommend this approach.\n\n### Configuring the Proxy Manually\n\n>Note: this feature is available with `react-scripts@1.0.0` and higher.\n\nIf the `proxy` option is **not** flexible enough for you, you can specify an object in the following form (in `package.json`).<br>\nYou may also specify any configuration value [`http-proxy-middleware`](https://github.com/chimurai/http-proxy-middleware#options) or [`http-proxy`](https://github.com/nodejitsu/node-http-proxy#options) supports.\n```js\n{\n  // ...\n  \"proxy\": {\n    \"/api\": {\n      \"target\": \"<url>\",\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\nAll requests matching this path will be proxies, no exceptions. This includes requests for `text/html`, which the standard `proxy` option does not proxy.\n\nIf you need to specify multiple proxies, you may do so by specifying additional entries.\nMatches are regular expressions, so that you can use a regexp to match multiple paths.\n```js\n{\n  // ...\n  \"proxy\": {\n    // Matches any request starting with /api\n    \"/api\": {\n      \"target\": \"<url_1>\",\n      \"ws\": true\n      // ...\n    },\n    // Matches any request starting with /foo\n    \"/foo\": {\n      \"target\": \"<url_2>\",\n      \"ssl\": true,\n      \"pathRewrite\": {\n        \"^/foo\": \"/foo/beta\"\n      }\n      // ...\n    },\n    // Matches /bar/abc.html but not /bar/sub/def.html\n    \"/bar/[^/]*[.]html\": {\n      \"target\": \"<url_3>\",\n      // ...\n    },\n    // Matches /baz/abc.html and /baz/sub/def.html\n    \"/baz/.*/.*[.]html\": {\n      \"target\": \"<url_4>\"\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n### Configuring a WebSocket Proxy\n\nWhen setting up a WebSocket proxy, there are a some extra considerations to be aware of.\n\nIf you’re using a WebSocket engine like [Socket.io](https://socket.io/), you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don't expect Socket.io to work with [the websocket.org echo test](http://websocket.org/echo.html).\n\nThere’s some good documentation available for [setting up a Socket.io server](https://socket.io/docs/).\n\nStandard WebSockets **will** work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like [ws](https://github.com/websockets/ws) for the server, with [native WebSockets in the browser](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).\n\nEither way, you can proxy WebSocket requests manually in `package.json`:\n\n```js\n{\n  // ...\n  \"proxy\": {\n    \"/socket\": {\n      // Your compatible WebSocket server\n      \"target\": \"ws://<socket_url>\",\n      // Tell http-proxy-middleware that this is a WebSocket proxy.\n      // Also allows you to proxy WebSocket requests without an additional HTTP request\n      // https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade\n      \"ws\": true\n      // ...\n    }\n  }\n  // ...\n}\n```\n\n## Using HTTPS in Development\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\n\n#### Windows (cmd.exe)\n\n```cmd\nset HTTPS=true&&npm start\n```\n\n#### Windows (Powershell)\n\n```Powershell\n($env:HTTPS = $true) -and (npm start)\n```\n\n(Note: the lack of whitespace is intentional.)\n\n#### Linux, macOS (Bash)\n\n```bash\nHTTPS=true npm start\n```\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\n## Generating Dynamic `<meta>` Tags on the Server\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\n```html\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta property=\"og:title\" content=\"__OG_TITLE__\">\n    <meta property=\"og:description\" content=\"__OG_DESCRIPTION__\">\n```\n\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `__OG_TITLE__`, `__OG_DESCRIPTION__`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\n## Pre-Rendering into Static HTML Files\n\nIf you’re hosting your `build` with a static hosting provider you can use [react-snapshot](https://www.npmjs.com/package/react-snapshot) or [react-snap](https://github.com/stereobooster/react-snap) to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page _with_ the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about [zero-configuration pre-rendering (also called snapshotting) here](https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319).\n\n## Injecting Data from the Server into the Page\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\n```js\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <script>\n      window.SERVER_DATA = __SERVER_DATA__;\n    </script>\n```\n\nThen, on the server, you can replace `__SERVER_DATA__` with a JSON of real data right before sending the response. The client code can then read `window.SERVER_DATA` to use it. **Make sure to [sanitize the JSON before sending it to the client](https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0) as it makes your app vulnerable to XSS attacks.**\n\n## Running Tests\n\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\n\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\n### Filename Conventions\n\nJest will look for test files with any of the following popular naming conventions:\n\n* Files with `.js` suffix in `__tests__` folders.\n* Files with `.test.js` suffix.\n* Files with `.spec.js` suffix.\n\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\n\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\n### Command Line Interface\n\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\n\n### Version Control Integration\n\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\n\n### Writing Tests\n\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\n\n```js\nimport sum from './sum';\n\nit('sums numbers', () => {\n  expect(sum(1, 2)).toEqual(3);\n  expect(sum(2, 2)).toEqual(4);\n});\n```\n\nAll `expect()` matchers supported by Jest are [extensively documented here](https://facebook.github.io/jest/docs/en/expect.html#content).<br>\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled) to create “spies” or mock functions.\n\n### Testing Components\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<App />, div);\n});\n```\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). To install it, run:\n\n```sh\nnpm install --save enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add enzyme enzyme-adapter-react-16 react-test-renderer\n```\n\nAs of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)\n\nThe adapter will also need to be configured in your [global setup file](#initializing-test-environment):\n\n#### `src/setupTests.js`\n```js\nimport { configure } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\n\nconfigure({ adapter: new Adapter() });\n```\n\n>Note: Keep in mind that if you decide to \"eject\" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it. [Read here](#initializing-test-environment) to learn how to add this after ejecting.\n\nNow you can write a smoke test with it:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders without crashing', () => {\n  shallow(<App />);\n});\n```\n\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\n\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\n```js\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport App from './App';\n\nit('renders welcome message', () => {\n  const wrapper = shallow(<App />);\n  const welcome = <h2>Welcome to React</h2>;\n  // expect(wrapper.contains(welcome)).to.equal(true);\n  expect(wrapper.contains(welcome)).toEqual(true);\n});\n```\n\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/en/expect.html).<br>\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\n\nAdditionally, you might find [jest-enzyme](https://github.com/blainekasten/enzyme-matchers) helpful to simplify your tests with readable matchers. The above `contains` code can be written more simply with jest-enzyme.\n\n```js\nexpect(wrapper).toContainReact(welcome)\n```\n\nTo enable this, install `jest-enzyme`:\n\n```sh\nnpm install --save jest-enzyme\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add jest-enzyme\n```\n\nImport it in [`src/setupTests.js`](#initializing-test-environment) to make its matchers available in every test:\n\n```js\nimport 'jest-enzyme';\n```\n\n### Using Third Party Assertion Libraries\n\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\n\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\n```js\nimport sinon from 'sinon';\nimport { expect } from 'chai';\n```\n\nand then use them in your tests like you normally do.\n\n### Initializing Test Environment\n\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\n\nFor example:\n\n#### `src/setupTests.js`\n```js\nconst localStorageMock = {\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  clear: jest.fn()\n};\nglobal.localStorage = localStorageMock\n```\n\n>Note: Keep in mind that if you decide to \"eject\" before creating `src/setupTests.js`, the resulting `package.json` file won't contain any reference to it, so you should manually create the property `setupTestFrameworkScriptFile` in the configuration for Jest, something like the following:\n\n>```js\n>\"jest\": {\n>   // ...\n>   \"setupTestFrameworkScriptFile\": \"<rootDir>/src/setupTests.js\"\n>  }\n>  ```\n\n### Focusing and Excluding Tests\n\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\n\n### Coverage Reporting\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\n\n![coverage report](http://i.imgur.com/5bFhnTS.png)\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\n#### Configuration\n\nThe default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.\n\nSupported overrides:\n - [`collectCoverageFrom`](https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array)\n - [`coverageReporters`](https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string)\n - [`coverageThreshold`](https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object)\n - [`snapshotSerializers`](https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string)\n\nExample package.json:\n\n```json\n{\n  \"name\": \"your-package\",\n  \"jest\": {\n    \"collectCoverageFrom\" : [\n      \"src/**/*.{js,jsx}\",\n      \"!<rootDir>/node_modules/\",\n      \"!<rootDir>/path/to/dir/\"\n    ],\n    \"coverageThreshold\": {\n      \"global\": {\n        \"branches\": 90,\n        \"functions\": 90,\n        \"lines\": 90,\n        \"statements\": 90\n      }\n    },\n    \"coverageReporters\": [\"text\"],\n    \"snapshotSerializers\": [\"my-serializer-module\"]\n  }\n}\n```\n\n### Continuous Integration\n\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`.\n\nWhen creating a build of your application with `npm run build` linter warnings are not checked by default. Like `npm test`, you can force the build to perform a linter warning check by setting the environment variable `CI`. If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable `CI` by default but you can do this yourself too:\n\n### On CI servers\n#### Travis CI\n\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\n1. Add a `.travis.yml` file to your git repository.\n```\nlanguage: node_js\nnode_js:\n  - 6\ncache:\n  directories:\n    - node_modules\nscript:\n  - npm run build\n  - npm test\n```\n1. Trigger your first build with a git push.\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\n\n#### CircleCI\n\nFollow [this article](https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1) to set up CircleCI with a Create React App project.\n\n### On your own environment\n##### Windows (cmd.exe)\n\n```cmd\nset CI=true&&npm test\n```\n\n```cmd\nset CI=true&&npm run build\n```\n\n(Note: the lack of whitespace is intentional.)\n\n##### Windows (Powershell)\n\n```Powershell\n($env:CI = $true) -and (npm test)\n```\n\n```Powershell\n($env:CI = $true) -and (npm run build)\n```\n\n##### Linux, macOS (Bash)\n\n```bash\nCI=true npm test\n```\n\n```bash\nCI=true npm run build\n```\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\n>  If you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\n\nThe build command will check for linter warnings and fail if any are found.\n\n### Disabling jsdom\n\nBy default, the `package.json` of the generated project looks like this:\n\n```js\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\"\n```\n\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster:\n\n```diff\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n-   \"test\": \"react-scripts test --env=jsdom\"\n+   \"test\": \"react-scripts test\"\n```\n\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\n\n* Any browser globals like `window` and `document`\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nIn contrast, **jsdom is not needed** for the following APIs:\n\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\n\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html).\n\n### Snapshot Testing\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\n\n### Editor Integration\n\nIf you use [Visual Studio Code](https://code.visualstudio.com), there is a [Jest extension](https://github.com/orta/vscode-jest) which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\n![VS Code Jest Preview](https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png)\n\n## Debugging Tests\n\nThere are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and [Visual Studio Code](https://code.visualstudio.com/).\n\n>Note: debugging tests requires Node 8 or higher.\n\n### Debugging Tests in Chrome\n\nAdd the following to the `scripts` section in your project's `package.json`\n```json\n\"scripts\": {\n    \"test:debug\": \"react-scripts --inspect-brk test --runInBand --env=jsdom\"\n  }\n```\nPlace `debugger;` statements in any test and run:\n```bash\n$ npm run test:debug\n```\n\nThis will start running your Jest tests, but pause before executing to allow a debugger to attach to the process.\n\nOpen the following in Chrome\n```\nabout:inspect\n```\n\nAfter opening that link, the Chrome Developer Tools will be displayed. Select `inspect` on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a \"play\" button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack.\n\n>Note: the --runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.\n\n### Debugging Tests in Visual Studio Code\n\nDebugging Jest tests is supported out of the box for [Visual Studio Code](https://code.visualstudio.com).\n\nUse the following [`launch.json`](https://code.visualstudio.com/docs/editor/debugging#_launch-configurations) configuration file:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug CRA Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"${workspaceRoot}/node_modules/.bin/react-scripts\",      \n      \"args\": [\n        \"test\",\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--env=jsdom\"\n      ],\n      \"cwd\": \"${workspaceRoot}\",\n      \"protocol\": \"inspector\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n```\n\n## Developing Components in Isolation\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states.\nFor an example, a simple button component could have following states:\n\n* In a regular state, with a text label.\n* In the disabled mode.\n* In a loading state.\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add [Storybook for React](https://storybook.js.org) ([source](https://github.com/storybooks/storybook)) or [React Styleguidist](https://react-styleguidist.js.org/) ([source](https://github.com/styleguidist/react-styleguidist)) to your project. **These are third-party tools that let you develop components and see all their states in isolation from your app**.\n\n![Storybook for React Demo](http://i.imgur.com/7CIAWpB.gif)\n\nYou can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\n### Getting Started with Storybook\n\nStorybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.\n\nFirst, install the following npm package globally:\n\n```sh\nnpm install -g @storybook/cli\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\ngetstorybook\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Storybook:\n\n* Screencast: [Getting Started with React Storybook](https://egghead.io/lessons/react-getting-started-with-react-storybook)\n* [GitHub Repo](https://github.com/storybooks/storybook)\n* [Documentation](https://storybook.js.org/basics/introduction/)\n* [Snapshot Testing UI](https://github.com/storybooks/storybook/tree/master/addons/storyshots) with Storybook + addon/storyshot\n\n### Getting Started with Styleguidist\n\nStyleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.\n\nFirst, install Styleguidist:\n\n```sh\nnpm install --save react-styleguidist\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add react-styleguidist\n```\n\nThen, add these scripts to your `package.json`:\n\n```diff\n   \"scripts\": {\n+    \"styleguide\": \"styleguidist server\",\n+    \"styleguide:build\": \"styleguidist build\",\n     \"start\": \"react-scripts start\",\n```\n\nThen, run the following command inside your app’s directory:\n\n```sh\nnpm run styleguide\n```\n\nAfter that, follow the instructions on the screen.\n\nLearn more about React Styleguidist:\n\n* [GitHub Repo](https://github.com/styleguidist/react-styleguidist)\n* [Documentation](https://react-styleguidist.js.org/docs/getting-started.html)\n\n## Publishing Components to npm\n\nCreate React App doesn't provide any built-in functionality to publish a component to npm. If you're ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like [nwb](https://github.com/insin/nwb#react-components-and-libraries) to prepare it for publishing.\n\n## Making a Progressive Web App\n\nBy default, the production build is a fully functional, offline-first\n[Progressive Web App](https://developers.google.com/web/progressive-web-apps/).\n\nProgressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:\n\n * All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.\n * Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.\n * On mobile devices, your app can be added directly to the user's home screen, app icon and all. You can also re-engage users using web **push notifications**. This eliminates the need for the app store.\n\nThe [`sw-precache-webpack-plugin`](https://github.com/goldhand/sw-precache-webpack-plugin)\nis integrated into production configuration,\nand it will take care of generating a service worker file that will automatically\nprecache all of your local assets and keep them up to date as you deploy updates.\nThe service worker will use a [cache-first strategy](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network)\nfor handling all requests for local assets, including the initial HTML, ensuring\nthat your web app is reliably fast, even on a slow or unreliable network.\n\n### Opting Out of Caching\n\nIf you would prefer not to enable service workers prior to your initial\nproduction deployment, then remove the call to `registerServiceWorker()`\nfrom [`src/index.js`](src/index.js).\n\nIf you had previously enabled service workers in your production deployment and\nhave decided that you would like to disable them for all your existing users,\nyou can swap out the call to `registerServiceWorker()` in\n[`src/index.js`](src/index.js) first by modifying the service worker import:\n```javascript\nimport { unregister } from './registerServiceWorker';\n```\nand then call `unregister()` instead.\nAfter the user visits a page that has `unregister()`,\nthe service worker will be uninstalled. Note that depending on how `/service-worker.js` is served,\nit may take up to 24 hours for the cache to be invalidated.\n\n### Offline-First Considerations\n\n1. Service workers [require HTTPS](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https),\nalthough to facilitate local testing, that policy\n[does not apply to `localhost`](http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385).\nIf your production web server does not support HTTPS, then the service worker\nregistration will fail, but the rest of your web app will remain functional.\n\n1. Service workers are [not currently supported](https://jakearchibald.github.io/isserviceworkerready/)\nin all web browsers. Service worker registration [won't be attempted](src/registerServiceWorker.js)\non browsers that lack support.\n\n1. The service worker is only enabled in the [production environment](#deployment),\ne.g. the output of `npm run build`. It's recommended that you do not enable an\noffline-first service worker in a development environment, as it can lead to\nfrustration when previously cached assets are used and do not include the latest\nchanges you've made locally.\n\n1. If you *need* to test your offline-first service worker locally, build\nthe application (using `npm run build`) and run a simple http server from your\nbuild directory. After running the build script, `create-react-app` will give\ninstructions for one way to test your production build locally and the [deployment instructions](#deployment) have\ninstructions for using other methods. *Be sure to always use an\nincognito window to avoid complications with your browser cache.*\n\n1. If possible, configure your production environment to serve the generated\n`service-worker.js` [with HTTP caching disabled](http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours).\nIf that's not possible—[GitHub Pages](#github-pages), for instance, does not\nallow you to change the default 10 minute HTTP cache lifetime—then be aware\nthat if you visit your production site, and then revisit again before\n`service-worker.js` has expired from your HTTP cache, you'll continue to get\nthe previously cached assets from the service worker. If you have an immediate\nneed to view your updated production deployment, performing a shift-refresh\nwill temporarily disable the service worker and retrieve all assets from the\nnetwork.\n\n1. Users aren't always familiar with offline-first web apps. It can be useful to\n[let the user know](https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption)\nwhen the service worker has finished populating your caches (showing a \"This web\napp works offline!\" message) and also let them know when the service worker has\nfetched the latest updates that will be available the next time they load the\npage (showing a \"New content is available; please refresh.\" message). Showing\nthis messages is currently left as an exercise to the developer, but as a\nstarting point, you can make use of the logic included in [`src/registerServiceWorker.js`](src/registerServiceWorker.js), which\ndemonstrates which service worker lifecycle events to listen for to detect each\nscenario, and which as a default, just logs appropriate messages to the\nJavaScript console.\n\n1. By default, the generated service worker file will not intercept or cache any\ncross-origin traffic, like HTTP [API requests](#integrating-with-an-api-backend),\nimages, or embeds loaded from a different domain. If you would like to use a\nruntime caching strategy for those requests, you can [`eject`](#npm-run-eject)\nand then configure the\n[`runtimeCaching`](https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject)\noption in the `SWPrecacheWebpackPlugin` section of\n[`webpack.config.prod.js`](../config/webpack.config.prod.js).\n\n### Progressive Web App Metadata\n\nThe default configuration includes a web app manifest located at\n[`public/manifest.json`](public/manifest.json), that you can customize with\ndetails specific to your web application.\n\nWhen a user adds a web app to their homescreen using Chrome or Firefox on\nAndroid, the metadata in [`manifest.json`](public/manifest.json) determines what\nicons, names, and branding colors to use when the web app is displayed.\n[The Web App Manifest guide](https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/)\nprovides more context about what each field means, and how your customizations\nwill affect your users' experience.\n\n## Analyzing the Bundle Size\n\n[Source map explorer](https://www.npmjs.com/package/source-map-explorer) analyzes\nJavaScript bundles using the source maps. This helps you understand where code\nbloat is coming from.\n\nTo add Source map explorer to a Create React App project, follow these steps:\n\n```sh\nnpm install --save source-map-explorer\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add source-map-explorer\n```\n\nThen in `package.json`, add the following line to `scripts`:\n\n```diff\n   \"scripts\": {\n+    \"analyze\": \"source-map-explorer build/static/js/main.*\",\n     \"start\": \"react-scripts start\",\n     \"build\": \"react-scripts build\",\n     \"test\": \"react-scripts test --env=jsdom\",\n```\n\nThen to analyze the bundle run the production build then run the analyze\nscript.\n\n```\nnpm run build\nnpm run analyze\n```\n\n## Deployment\n\n`npm run build` creates a `build` directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served `index.html`, and requests to static paths like `/static/js/main.<hash>.js` are served with the contents of the `/static/js/main.<hash>.js` file.\n\n### Static Server\n\nFor environments using [Node](https://nodejs.org/), the easiest way to handle this would be to install [serve](https://github.com/zeit/serve) and let it handle the rest:\n\n```sh\nnpm install -g serve\nserve -s build\n```\n\nThe last command shown above will serve your static site on the port **5000**. Like many of [serve](https://github.com/zeit/serve)’s internal settings, the port can be adjusted using the `-p` or `--port` flags.\n\nRun this command to get a full list of the options available:\n\n```sh\nserve -h\n```\n\n### Other Solutions\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using [Node](https://nodejs.org/) and [Express](http://expressjs.com/):\n\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(9000);\n```\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe `build` folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like `/todos/42` in your single-page app.\n\n### Serving Apps with Client-Side Routing\n\nIf you use routers that use the HTML5 [`pushState` history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries) under the hood (for example, [React Router](https://github.com/ReactTraining/react-router) with `browserHistory`), many static file servers will fail. For example, if you used React Router with a route for `/todos/42`, the development server will respond to `localhost:3000/todos/42` properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a `/todos/42`, the server looks for the file `build/todos/42` and does not find it. The server needs to be configured to respond to a request to `/todos/42` by serving `index.html`. For example, we can amend our Express example above to serve `index.html` for any unknown paths:\n\n```diff\n app.use(express.static(path.join(__dirname, 'build')));\n\n-app.get('/', function (req, res) {\n+app.get('/*', function (req, res) {\n   res.sendFile(path.join(__dirname, 'build', 'index.html'));\n });\n```\n\nIf you’re using [Apache HTTP Server](https://httpd.apache.org/), you need to create a `.htaccess` file in the `public` folder that looks like this:\n\n```\n    Options -MultiViews\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule ^ index.html [QSA,L]\n```\n\nIt will get copied to the `build` folder when you run `npm run build`. \n\nIf you’re using [Apache Tomcat](http://tomcat.apache.org/), you need to follow [this Stack Overflow answer](https://stackoverflow.com/a/41249464/4878474).\n\nNow requests to `/todos/42` will be handled correctly both in development and in production.\n\nOn a production build, and in a browser that supports [service workers](https://developers.google.com/web/fundamentals/getting-started/primers/service-workers),\nthe service worker will automatically handle all navigation requests, like for\n`/todos/42`, by serving the cached copy of your `index.html`. This\nservice worker navigation routing can be configured or disabled by\n[`eject`ing](#npm-run-eject) and then modifying the\n[`navigateFallback`](https://github.com/GoogleChrome/sw-precache#navigatefallback-string)\nand [`navigateFallbackWhitelist`](https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp)\noptions of the `SWPreachePlugin` [configuration](../config/webpack.config.prod.js).\n\nWhen users install your app to the homescreen of their device the default configuration will make a shortcut to `/index.html`. This may not work for client-side routers which expect the app to be served from `/`. Edit the web app manifest at [`public/manifest.json`](public/manifest.json) and change `start_url` to match the required URL scheme, for example:\n\n```js\n  \"start_url\": \".\",\n```\n\n### Building for Relative Paths\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\nTo override this, specify the `homepage` in your `package.json`, for example:\n\n```js\n  \"homepage\": \"http://mywebsite.com/relativepath\",\n```\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\n**Note**: If you are using `react-router@^4`, you can root `<Link>`s using the `basename` prop on any `<Router>`.<br>\nMore information [here](https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string).<br>\n<br>\nFor example:\n```js\n<BrowserRouter basename=\"/calendar\"/>\n<Link to=\"/today\"/> // renders <a href=\"/calendar/today\">\n```\n\n#### Serving the Same Build from Different Paths\n\n>Note: this feature is available with `react-scripts@0.9.0` and higher.\n\nIf you are not using the HTML5 `pushState` history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your `package.json`:\n\n```js\n  \"homepage\": \".\",\n```\n\nThis will make sure that all the asset paths are relative to `index.html`. You will then be able to move your app from `http://mywebsite.com` to `http://mywebsite.com/relativepath` or even `http://mywebsite.com/relative/path` without having to rebuild it.\n\n### [Azure](https://azure.microsoft.com/)\n\nSee [this](https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321) blog post on how to deploy your React app to Microsoft Azure.\n\nSee [this](https://medium.com/@strid/host-create-react-app-on-azure-986bc40d5bf2#.pycfnafbg) blog post or [this](https://github.com/ulrikaugustsson/azure-appservice-static) repo for a way to use automatic deployment to Azure App Service.\n\n### [Firebase](https://firebase.google.com/)\n\nInstall the Firebase CLI if you haven’t already by running `npm install -g firebase-tools`. Sign up for a [Firebase account](https://console.firebase.google.com/) and create a new project. Run `firebase login` and login with your previous created Firebase account.\n\nThen run the `firebase init` command from your project’s root. You need to choose the **Hosting: Configure and deploy Firebase Hosting sites** and choose the Firebase project you created in the previous step. You will need to agree with `database.rules.json` being created, choose `build` as the public directory, and also agree to **Configure as a single-page app** by replying with `y`.\n\n```sh\n    === Project Setup\n\n    First, let's associate this project directory with a Firebase project.\n    You can create multiple project aliases by running firebase use --add,\n    but for now we'll just set up a default project.\n\n    ? What Firebase project do you want to associate as default? Example app (example-app-fd690)\n\n    === Database Setup\n\n    Firebase Realtime Database Rules allow you to define how your data should be\n    structured and when your data can be read from and written to.\n\n    ? What file should be used for Database Rules? database.rules.json\n    ✔  Database Rules for example-app-fd690 have been downloaded to database.rules.json.\n    Future modifications to database.rules.json will update Database Rules when you run\n    firebase deploy.\n\n    === Hosting Setup\n\n    Your public directory is the folder (relative to your project directory) that\n    will contain Hosting assets to uploaded with firebase deploy. If you\n    have a build process for your assets, use your build's output directory.\n\n    ? What do you want to use as your public directory? build\n    ? Configure as a single-page app (rewrite all urls to /index.html)? Yes\n    ✔  Wrote build/index.html\n\n    i  Writing configuration info to firebase.json...\n    i  Writing project information to .firebaserc...\n\n    ✔  Firebase initialization complete!\n```\n\nIMPORTANT: you need to set proper HTTP caching headers for `service-worker.js` file in `firebase.json` file or you will not be able to see changes after first deployment ([issue #2440](https://github.com/facebookincubator/create-react-app/issues/2440)). It should be added inside `\"hosting\"` key like next:\n\n```\n{\n  \"hosting\": {\n    ...\n    \"headers\": [\n      {\"source\": \"/service-worker.js\", \"headers\": [{\"key\": \"Cache-Control\", \"value\": \"no-cache\"}]}\n    ]\n    ...\n```\n\nNow, after you create a production build with `npm run build`, you can deploy it by running `firebase deploy`.\n\n```sh\n    === Deploying to 'example-app-fd690'...\n\n    i  deploying database, hosting\n    ✔  database: rules ready to deploy.\n    i  hosting: preparing build directory for upload...\n    Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully\n    ✔  hosting: 8 files uploaded successfully\n    i  starting release process (may take several minutes)...\n\n    ✔  Deploy complete!\n\n    Project Console: https://console.firebase.google.com/project/example-app-fd690/overview\n    Hosting URL: https://example-app-fd690.firebaseapp.com\n```\n\nFor more information see [Add Firebase to your JavaScript Project](https://firebase.google.com/docs/web/setup).\n\n### [GitHub Pages](https://pages.github.com/)\n\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\n\n#### Step 1: Add `homepage` to `package.json`\n\n**The step below is important!**<br>\n**If you skip it, your app will not deploy correctly.**\n\nOpen your `package.json` and add a `homepage` field for your project:\n\n```json\n  \"homepage\": \"https://myusername.github.io/my-app\",\n```\n\nor for a GitHub user page:\n\n```json\n  \"homepage\": \"https://myusername.github.io\",\n```\n\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\n\n#### Step 2: Install `gh-pages` and add `deploy` to `scripts` in `package.json`\n\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at [https://myusername.github.io/my-app](https://myusername.github.io/my-app), run:\n\n```sh\nnpm install --save gh-pages\n```\n\nAlternatively you may use `yarn`:\n\n```sh\nyarn add gh-pages\n```\n\nAdd the following scripts in your `package.json`:\n\n```diff\n  \"scripts\": {\n+   \"predeploy\": \"npm run build\",\n+   \"deploy\": \"gh-pages -d build\",\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n```\n\nThe `predeploy` script will run automatically before `deploy` is run.\n\nIf you are deploying to a GitHub user page instead of a project page you'll need to make two\nadditional modifications:\n\n1. First, change your repository's source branch to be any branch other than **master**.\n1. Additionally, tweak your `package.json` scripts to push deployments to **master**:\n```diff\n  \"scripts\": {\n    \"predeploy\": \"npm run build\",\n-   \"deploy\": \"gh-pages -d build\",\n+   \"deploy\": \"gh-pages -b master -d build\",\n```\n\n#### Step 3: Deploy the site by running `npm run deploy`\n\nThen run:\n\n```sh\nnpm run deploy\n```\n\n#### Step 4: Ensure your project’s settings use `gh-pages`\n\nFinally, make sure **GitHub Pages** option in your GitHub project settings is set to use the `gh-pages` branch:\n\n<img src=\"http://i.imgur.com/HUjEr9l.png\" width=\"500\" alt=\"gh-pages branch setting\">\n\n#### Step 5: Optionally, configure the domain\n\nYou can configure a custom domain with GitHub Pages by adding a `CNAME` file to the `public/` folder.\n\n#### Notes on client-side routing\n\nGitHub Pages doesn’t support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://reacttraining.com/react-router/web/api/Router) about different history implementations in React Router.\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\n\n### [Heroku](https://www.heroku.com/)\n\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\n\n#### Resolving Heroku Deployment Errors\n\nSometimes `npm run build` works locally but fails during deploy via Heroku. Following are the most common cases.\n\n##### \"Module not found: Error: Cannot resolve 'file' or 'directory'\"\n\nIf you get something like this:\n\n```\nremote: Failed to create a production build. Reason:\nremote: Module not found: Error: Cannot resolve 'file' or 'directory'\nMyDirectory in /tmp/build_1234/src\n```\n\nIt means you need to ensure that the lettercase of the file or directory you `import` matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So `MyDirectory` and `mydirectory` are two distinct directories and thus, even though the project builds locally, the difference in case breaks the `import` statements on Heroku remotes.\n\n##### \"Could not find a required file.\"\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\n```\nremote: Could not find a required file.\nremote:   Name: `index.html`\nremote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public\nremote:\nremote: npm ERR! Linux 3.13.0-105-generic\nremote: npm ERR! argv \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node\" \"/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm\" \"run\" \"build\"\n```\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local `.gitignore` or `~/.gitignore_global`.\n\n### [Netlify](https://www.netlify.com/)\n\n**To do a manual deploy to Netlify’s CDN:**\n\n```sh\nnpm install netlify-cli -g\nnetlify deploy\n```\n\nChoose `build` as the path to deploy.\n\n**To setup continuous delivery:**\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n\n1. [Start a new netlify project](https://app.netlify.com/signup)\n2. Pick your Git hosting service and select your repository\n3. Set `yarn build` as the build command and `build` as the publish directory\n4. Click `Deploy site`\n\n**Support for client-side routing:**\n\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\n\n```\n/*  /index.html  200\n```\n\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\n\n### [Now](https://zeit.co/now)\n\nNow offers a zero-configuration single-command deployment. You can use `now` to deploy your app for free.\n\n1. Install the `now` command-line tool either via the recommended [desktop tool](https://zeit.co/download) or via node with `npm install -g now`.\n\n2. Build your app by running `npm run build`.\n\n3. Move into the build directory by running `cd build`.\n\n4. Run `now --name your-project-name` from within the build directory. You will see a **now.sh** URL in your output like this:\n\n    ```\n    > Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)\n    ```\n\n    Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in [this article.](https://zeit.co/blog/unlimited-static)\n\n### [S3](https://aws.amazon.com/s3) and [CloudFront](https://aws.amazon.com/cloudfront/)\n\nSee this [blog post](https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af) on how to deploy your React app to Amazon Web Services S3 and CloudFront.\n\n### [Surge](https://surge.sh/)\n\nInstall the Surge CLI if you haven’t already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account.\n\nWhen asked about the project path, make sure to specify the `build` folder, for example:\n\n```sh\n       project path: /path/to/project/build\n```\n\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\n\n## Advanced Configuration\n\nYou can adjust various development and production settings by setting environment variables in your shell or with [.env](#adding-development-environment-variables-in-env).\n\nVariable | Development | Production | Usage\n:--- | :---: | :---: | :---\nBROWSER | :white_check_mark: | :x: | By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a [browser](https://github.com/sindresorhus/opn#app) to override this behavior, or set it to `none` to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to `npm start` will also be passed to this script, and the url where your app is served will be the last argument. Your script's file name must have the `.js` extension.\nHOST | :white_check_mark: | :x: | By default, the development web server binds to `localhost`. You may use this variable to specify a different host.\nPORT | :white_check_mark: | :x: | By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.\nHTTPS | :white_check_mark: | :x: | When set to `true`, Create React App will run the development server in `https` mode.\nPUBLIC_URL | :x: | :white_check_mark: | Create React App assumes your application is hosted at the serving web server's root or a subpath as specified in [`package.json` (`homepage`)](#building-for-relative-paths). Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.\nCI | :large_orange_diamond: | :white_check_mark: | When set to `true`, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.\nREACT_EDITOR | :white_check_mark: | :x: | When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can [send a pull request to detect your editor of choice](https://github.com/facebookincubator/create-react-app/issues/2636). Setting this environment variable overrides the automatic detection. If you do it, make sure your systems [PATH](https://en.wikipedia.org/wiki/PATH_(variable)) environment variable points to your editor’s bin folder. You can also set it to `none` to disable it completely.\nCHOKIDAR_USEPOLLING | :white_check_mark: | :x: | When set to `true`, the watcher runs in polling mode, as necessary inside a VM. Use this option if `npm start` isn't detecting changes.\nGENERATE_SOURCEMAP | :x: | :white_check_mark: | When set to `false`, source maps are not generated for a production build. This solves OOM issues on some smaller machines.\nNODE_PATH | :white_check_mark: |  :white_check_mark: | Same as [`NODE_PATH` in Node.js](https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders), but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting `NODE_PATH=src`.\n\n## Troubleshooting\n\n### `npm start` doesn’t detect changes\n\nWhen you save a file while `npm start` is running, the browser should refresh with the updated code.<br>\nIf this doesn’t happen, try one of the following workarounds:\n\n* If your project is in a Dropbox folder, try moving it out.\n* If the watcher doesn’t see a file called `index.js` and you’re referencing it by the folder name, you [need to restart the watcher](https://github.com/facebookincubator/create-react-app/issues/1164) due to a Webpack bug.\n* Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in [“Adjusting Your Text Editor”](https://webpack.js.org/guides/development/#adjusting-your-text-editor).\n* If your project path contains parentheses, try moving the project to a path without them. This is caused by a [Webpack watcher bug](https://github.com/webpack/watchpack/issues/42).\n* On Linux and macOS, you might need to [tweak system settings](https://github.com/webpack/docs/wiki/troubleshooting#not-enough-watchers) to allow more watchers.\n* If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an `.env` file in your project directory if it doesn’t exist, and add `CHOKIDAR_USEPOLLING=true` to it. This ensures that the next time you run `npm start`, the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment [in this thread](https://github.com/facebookincubator/create-react-app/issues/659).\n\n### `npm test` hangs on macOS Sierra\n\nIf you run `npm test` and the console gets stuck after printing `react-scripts test --env=jsdom` to the console there might be a problem with your [Watchman](https://facebook.github.io/watchman/) installation as described in [facebookincubator/create-react-app#713](https://github.com/facebookincubator/create-react-app/issues/713).\n\nWe recommend deleting `node_modules` in your project and running `npm install` (or `yarn` if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\n* [facebook/jest#1767](https://github.com/facebook/jest/issues/1767)\n* [facebook/watchman#358](https://github.com/facebook/watchman/issues/358)\n* [ember-cli/ember-cli#6259](https://github.com/ember-cli/ember-cli/issues/6259)\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use [Homebrew](http://brew.sh/), you can run these commands to update it:\n\n```\nwatchman shutdown-server\nbrew update\nbrew reinstall watchman\n```\n\nYou can find [other installation methods](https://facebook.github.io/watchman/docs/install.html#build-install) on the Watchman documentation page.\n\nIf this still doesn’t help, try running `launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist`.\n\nThere are also reports that *uninstalling* Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\n### `npm run build` exits too early\n\nIt is reported that `npm run build` can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:\n\n>  The build failed because the process exited too early. This probably means the system ran out of memory or someone called `kill -9` on the process.\n\nIf you are completely sure that you didn't terminate the process, consider [adding some swap space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04) to the machine you’re building on, or build the project locally.\n\n### `npm run build` fails on Heroku\n\nThis may be a problem with case sensitive filenames.\nPlease refer to [this section](#resolving-heroku-deployment-errors).\n\n### Moment.js locales are missing\n\nIf you use a [Moment.js](https://momentjs.com/), you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of [all the locales provided by Moment.js](https://momentjs.com/#multiple-locale-support).\n\nTo add a specific Moment.js locale to your bundle, you need to import it explicitly.<br>\nFor example:\n\n```js\nimport moment from 'moment';\nimport 'moment/locale/fr';\n```\n\nIf import multiple locales this way, you can later switch between them by calling `moment.locale()` with the locale name:\n\n```js\nimport moment from 'moment';\nimport 'moment/locale/fr';\nimport 'moment/locale/es';\n\n// ...\n\nmoment.locale('fr');\n```\n\nThis will only work for locales that have been explicitly imported before.\n\n### `npm run build` fails to minify\n\nSome third-party packages don't compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.\n\n<br>\nTo resolve this:\n\n1. Open an issue on the dependency's issue tracker and ask that the package be published pre-compiled.\n  * Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the `module` field in `package.json`. Note that **even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers**.\n\n2. Fork the package and publish a corrected version yourself. \n\n3. If the dependency is small enough, copy it to your `src/` folder and treat it as application code.\n\nIn the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.\n\n## Alternatives to Ejecting\n\n[Ejecting](#npm-run-eject) lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to *fork* `react-scripts` and any other packages you need. [This article](https://auth0.com/blog/how-to-configure-create-react-app/) dives into how to do it in depth. You can find more discussion in [this issue](https://github.com/facebookincubator/create-react-app/issues/682).\n\n## Something Missing?\n\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\n","isFork":null},{"name":"react-sketch","url":"https://github.com/bchang1213/react-sketch","description":"Sketch Tool for React based applications, backed up by FabricJS","lang":["JavaScript"],"readme":"# react-sketch\n\n[![GitHub release][github-image]][github-url]\n[![NPM release][npm-image]][npm-url]\n[![NPM downloads][downloads-image]][downloads-url]\n[![Build status][travis-image]][travis-url]\n\nA Sketch tool for React based applications, backed-up by [FabricJS](http://fabricjs.com/)\n\n![idea-image] _Please note that this module is still in development! Feel free to send me enhancements and ideas :)_\n\n\n## Installation\n\n```sh\nnpm install react-sketch --save\n```\n\nor with yarn\n\n```sh\nyarn add react-sketch\n```\n\n### Source installation\n\nIn order to build from source, read the [relevant instructions](http://fabricjs.com/fabric-intro-part-4#node) first. \n\nTested with node versions 6,7,8.\n\n## Usage\n\nImport the relevant SketchField component and use it, you can find more on the examples folder of the project\n\n```javascript\nimport {SketchField, Tools} from 'react-sketch';\n\nclass SketchFieldDemo extends React.Component {\n     render() {\n        return (\n            <SketchField width='1024px' \n                         height='768px' \n                         tool={Tools.Pencil} \n                         lineColor='black'\n                         lineWidth={3}/>\n        )\n     }\n}\n\n```\nConfiguration Options\n\n| Option  \t        | Type                  | Default \t    | Description  \t                                                    |\n|---                |---    \t            |---\t        |---                                                                |\n| tool              | Enumeration (string)  | pencil        | The tool to use, can be select, pencil, circle, rectangle, pan    |\n| lineColor         | String                | black         | The color of the line   \t                                        |\n| lineWidth         | Number                | 1             | The width of the line                                             | \n| fillColor         | String                | transparent   | The fill color (hex format) of the shape when applicable (e.g. circle) |\n| backgroundColor   | String                | transparent   | The the background color of the sketch in hex or rgba             |\n| undoSteps         | Number                | 15            | number of undo/redo steps to maintain                             |\n| imageFormat       | String                | png           | image format when calling toDataURL, can be png or jpeg           | \n| width             | Number                | No Value(null)| Set/control the canvas width, if left empty the sketch will scale to parent element |\n| height            | Number                | 512           | Set/control the canvas height, if left empty the sketch will take a reasonable default height |\n| value             | JSON                  |               | Property to utilize and handle the sketch data as controlled component |\n| defaultValue      | JSON                  |               | Default initial data, to load. If value is set then value will be loaded instead |\n| widthCorrection   | Number                | 2             | Specify some width correction which will be applied on resize of canvas, this will help to correct some possible border on the canvas style |\n| heightCorrection  | Number                | 0             | Specify some height correction which will be applied on resize of canvas, this will help to correct some possible border on the canvas style | \n\n\nAvailable tools\n\n| Tool              | Description |\n|---                |---          |\n| Pencil            | Free drawing pencil |\n| Line              | Gives you the ability to draw lines |\n| Rectangle         | Create rectangles |\n| Circle            | Create circles |\n| Rectangle         | Create Rectangles |\n| Select            | Disables drawing and gives you the ability to modify existing elements in the canvas |\n| Pan               | Disables drawing and gives you the ability to move the complete canvas at will, useful to adjust the canvas when zooming in or out (thank you [wmaillard](https://github.com/wmaillard)) |\n\n\n## Examples\n\nThe project includes a webpack server for running the examples, just run:\n\n```sh\ngit clone https://github.com/tbolis/react-sketch.git\nyarn install\nnpm start\n```\n\nand navigate to http://localhost:23000\n\nYou can as well check the live showcase here: http://tbolis.github.io/showcase/react-sketch/\n                                         \n## Issues\n\nSee https://github.com/tbolis/react-sketch/issues\n\n## Changelog\n\nSee https://github.com/tbolis/react-sketch/blob/master/CHANGELOG.md\n\n## License\n\nMIT, do remember to add a reference if you find it useful :)\n\n[warning-image]: /docs/img/warning.png\n[idea-image]: /docs/img/idea.png\n[github-image]: https://img.shields.io/github/release/tbolis/react-sketch.svg\n[github-url]: https://github.com/tbolis/react-sketch/releases\n[npm-image]: https://img.shields.io/npm/v/react-sketch.svg\n[npm-url]: https://www.npmjs.com/package/react-sketch\n[downloads-image]: https://img.shields.io/npm/dm/react-sketch.svg\n[downloads-url]: https://www.npmjs.com/package/react-sketch\n[travis-image]: https://img.shields.io/travis/tbolis/react-sketch.svg\n[travis-url]: https://travis-ci.org/tbolis/react-sketch\n","isFork":true},{"name":"react-voice-components","url":"https://github.com/bchang1213/react-voice-components","description":"Set of React components that use the Web Speech API to bring voice experience to React applications","lang":["JavaScript"],"readme":"# react-voice-components\n\n[![Build Status](https://travis-ci.org/grvcoelho/react-voice-components.svg?branch=master)](https://travis-ci.org/grvcoelho/react-voice-components)\n\nSet of React components that use the Web Speech API to bring voice experience to React applications. Check out the :sparkles: :gem: [**LIVE DEMO**](https://grvcoelho.github.io/react-voice-components/?) :gem: :sparkles:\n\n## Install\n\nInstall the components using npm:\n\n```sh\n$ npm install --save react-voice-components\n```\n\n## Usage\n\n1. Import components:\n\n  ```javascript\n  import { VoicePlayer, VoiceRecognition } from 'react-voice-components'\n  ```\n\n2. Use it:\n\n  ```jsx\n  ReactDOM.render(\n    <VoicePlayer\n      play\n      text=\"React voice player demonstration\"\n    />,\n    document.getElementById('root')\n  )\n  ```\n\n## API\n\n### `<VoicePlayer />`\n\nProvides you a simple React component to do speech synthesis (text to speech).\n\n#### Options\n\n| Property | Options   | Description                                           |\n|----------|-----------|-------------------------------------------------------|\n| play     | *boolean* | Specifies if the speech should be played when mounted. |\n| pause    | *boolean* | Specifies if the speech should pause                  |\n| text     | *string*  | Specifies the text that shall be spoken.              |\n| lang     | `en-US`, `en-GB`, `es-ES`, `fr-FR`, `it-IT`, `de-DE`, `ja-JP`, `pt-BR`, `zh-CN` | Specifies the accent and language the speech will be spoken.\n\n#### Event Callbacks\n\n| Property | Description                                  |\n|----------|----------------------------------------------|\n| onStart  | Runs when the speech starts to be spoken.    |\n| onEnd    | Runs when the speech completes to be spoken. |\n| onPause  | Runs when te speech is paused.               |\n| onResume | Runs when the speech is resumed.             |\n\n\n### `<VoiceRecognition />`\n\nProvides you a simple React component to do voice recognition (speech to text).\n\n#### Options\n\n| Property   | Options   | Description                                                                       |\n|------------|-----------|-----------------------------------------------------------------------------------|\n| continuous | *boolean* | Specifies if the recognition should continue when the user pauses while speaking. |\n| stop       | *boolean* | Specifies if the recognition should be stoped (when used with `continuous=true`)  |\n\n#### Event Callbacks\n\n| Property | Description                              |\n|----------|------------------------------------------|\n| onStart  | Runs when the recognition starts.        |\n| onEnd    | Runs when the recognition ends.          |\n| onError  | Runs when there is a recognition error.  |\n| onResult | Runs when there is a recognition result. |\n\n## Contributing\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -m 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## LICENSE\n[MIT](https://github.com/grvcoelho/react-voice-components/blob/master/LICENSE) (c) 2017 Guilherme Rv Coelho\n","isFork":true},{"name":"Rnrf-Example","url":"https://github.com/bchang1213/Rnrf-Example","description":"An example React-Native-Router-Flux & Redux app","lang":["JavaScript","Python","Java","Objective-C"],"readme":null,"isFork":true},{"name":"react-native-router-flux","url":"https://github.com/bchang1213/react-native-router-flux","description":null,"lang":["JavaScript","Python","Java","Objective-C"],"readme":"# react-native-router-flux\n\n## Medium\n https://medium.com/@teddylun/react-native-router-flux-with-redux-9966dd4041b6#.tojpdsw83\n\n## Install dependencies\n  `npm install`\n  \n## Run on iOS simulator\n  `react-native run-ios`\n\n## Included packages\n- \"react\": \"15.4.1\",\n- \"react-native\": \"0.40.0\",\n- \"react-native-router-flux\": \"^3.37.0\",\n- \"react-redux\": \"^5.0.1\",\n- \"redux\": \"^3.6.0\",\n- \"redux-logger\": \"^2.7.4\"\n","isFork":true},{"name":"portal_verbo","url":"https://github.com/bchang1213/portal_verbo","description":"React Native project that utilizes the UltraLingua api to help users search for and conjugate Portuguese verbs.","lang":["JavaScript"],"readme":" Hello,\n \n This project is a React Native App utilizing the UltraLingua API (http://api.ultralingua.com/ulapi/rest).\n \n It's purpose is to type in english words in order to search for relevant Portuguese verbs. The app will automatically search for related words by making an AJAX call to the API.\n \n Rudimentary algorithms within my app will then filter out the JSON data response, test the data to see if it is a verb or not, and if it is a verb, it will display all relevant verb-related results in a list format.\n \n You can then click on the desired verb and view the various verb endings and conjugation information about that verb.\n \n This app's purpose is to help Portuguese students learn more about the Portuguese language and carry a handy verb conjugator that will aid them in becoming more fluent in Portuguese.\n \n You can clone this app onto your computer, npm install the necessary dependencies, and then run:\n \n ### `npm start`\n \n Open it in the [Expo app](https://expo.io) on your phone to view it and play around.\n\n\n-----------------------------------------------------------------------\nThis project was bootstrapped with [Create React Native App](https://github.com/react-community/create-react-native-app).\n\nBelow you'll find information about performing common tasks. The most recent version of this guide is available [here](https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md).\n\n## Table of Contents\n\n* [Updating to New Releases](#updating-to-new-releases)\n* [Available Scripts](#available-scripts)\n  * [npm start](#npm-start)\n  * [npm test](#npm-test)\n  * [npm run ios](#npm-run-ios)\n  * [npm run android](#npm-run-android)\n  * [npm run eject](#npm-run-eject)\n* [Writing and Running Tests](#writing-and-running-tests)\n* [Environment Variables](#environment-variables)\n  * [Configuring Packager IP Address](#configuring-packager-ip-address)\n* [Adding Flow](#adding-flow)\n* [Customizing App Display Name and Icon](#customizing-app-display-name-and-icon)\n* [Sharing and Deployment](#sharing-and-deployment)\n  * [Publishing to Expo's React Native Community](#publishing-to-expos-react-native-community)\n  * [Building an Expo \"standalone\" app](#building-an-expo-standalone-app)\n  * [Ejecting from Create React Native App](#ejecting-from-create-react-native-app)\n    * [Build Dependencies (Xcode & Android Studio)](#build-dependencies-xcode-android-studio)\n    * [Should I Use ExpoKit?](#should-i-use-expokit)\n* [Troubleshooting](#troubleshooting)\n  * [Networking](#networking)\n  * [iOS Simulator won't open](#ios-simulator-wont-open)\n  * [QR Code does not scan](#qr-code-does-not-scan)\n\n## Updating to New Releases\n\nYou should only need to update the global installation of `create-react-native-app` very rarely, ideally never.\n\nUpdating the `react-native-scripts` dependency of your app should be as simple as bumping the version number in `package.json` and reinstalling your project's dependencies.\n\nUpgrading to a new version of React Native requires updating the `react-native`, `react`, and `expo` package versions, and setting the correct `sdkVersion` in `app.json`. See the [versioning guide](https://github.com/react-community/create-react-native-app/blob/master/VERSIONS.md) for up-to-date information about package version compatibility.\n\n## Available Scripts\n\nIf Yarn was installed when the project was initialized, then dependencies will have been installed via Yarn, and you should probably use it to run these commands as well. Unlike dependency installation, command running syntax is identical for Yarn and NPM at the time of this writing.\n\n### `npm start`\n\nRuns your app in development mode.\n\nOpen it in the [Expo app](https://expo.io) on your phone to view it. It will reload if you save edits to your files, and you will see build errors and logs in the terminal.\n\nSometimes you may need to reset or clear the React Native packager's cache. To do so, you can pass the `--reset-cache` flag to the start script:\n\n```\nnpm start -- --reset-cache\n# or\nyarn start -- --reset-cache\n```\n\n#### `npm test`\n\nRuns the [jest](https://github.com/facebook/jest) test runner on your tests.\n\n#### `npm run ios`\n\nLike `npm start`, but also attempts to open your app in the iOS Simulator if you're on a Mac and have it installed.\n\n#### `npm run android`\n\nLike `npm start`, but also attempts to open your app on a connected Android device or emulator. Requires an installation of Android build tools (see [React Native docs](https://facebook.github.io/react-native/docs/getting-started.html) for detailed setup). We also recommend installing Genymotion as your Android emulator. Once you've finished setting up the native build environment, there are two options for making the right copy of `adb` available to Create React Native App:\n\n##### Using Android Studio's `adb`\n\n1. Make sure that you can run adb from your terminal.\n2. Open Genymotion and navigate to `Settings -> ADB`. Select “Use custom Android SDK tools” and update with your [Android SDK directory](https://stackoverflow.com/questions/25176594/android-sdk-location).\n\n##### Using Genymotion's `adb`\n\n1. Find Genymotion’s copy of adb. On macOS for example, this is normally `/Applications/Genymotion.app/Contents/MacOS/tools/`.\n2. Add the Genymotion tools directory to your path (instructions for [Mac](http://osxdaily.com/2014/08/14/add-new-path-to-path-command-line/), [Linux](http://www.computerhope.com/issues/ch001647.htm), and [Windows](https://www.howtogeek.com/118594/how-to-edit-your-system-path-for-easy-command-line-access/)).\n3. Make sure that you can run adb from your terminal.\n\n#### `npm run eject`\n\nThis will start the process of \"ejecting\" from Create React Native App's build scripts. You'll be asked a couple of questions about how you'd like to build your project.\n\n**Warning:** Running eject is a permanent action (aside from whatever version control system you use). An ejected app will require you to have an [Xcode and/or Android Studio environment](https://facebook.github.io/react-native/docs/getting-started.html) set up.\n\n## Customizing App Display Name and Icon\n\nYou can edit `app.json` to include [configuration keys](https://docs.expo.io/versions/latest/guides/configuration.html) under the `expo` key.\n\nTo change your app's display name, set the `expo.name` key in `app.json` to an appropriate string.\n\nTo set an app icon, set the `expo.icon` key in `app.json` to be either a local path or a URL. It's recommended that you use a 512x512 png file with transparency.\n\n## Writing and Running Tests\n\nThis project is set up to use [jest](https://facebook.github.io/jest/) for tests. You can configure whatever testing strategy you like, but jest works out of the box. Create test files in directories called `__tests__` or with the `.test` extension to have the files loaded by jest. See the [the template project](https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/App.test.js) for an example test. The [jest documentation](https://facebook.github.io/jest/docs/en/getting-started.html) is also a wonderful resource, as is the [React Native testing tutorial](https://facebook.github.io/jest/docs/en/tutorial-react-native.html).\n\n## Environment Variables\n\nYou can configure some of Create React Native App's behavior using environment variables.\n\n### Configuring Packager IP Address\n\nWhen starting your project, you'll see something like this for your project URL:\n\n```\nexp://192.168.0.2:19000\n```\n\nThe \"manifest\" at that URL tells the Expo app how to retrieve and load your app's JavaScript bundle, so even if you load it in the app via a URL like `exp://localhost:19000`, the Expo client app will still try to retrieve your app at the IP address that the start script provides.\n\nIn some cases, this is less than ideal. This might be the case if you need to run your project inside of a virtual machine and you have to access the packager via a different IP address than the one which prints by default. In order to override the IP address or hostname that is detected by Create React Native App, you can specify your own hostname via the `REACT_NATIVE_PACKAGER_HOSTNAME` environment variable:\n\nMac and Linux:\n\n```\nREACT_NATIVE_PACKAGER_HOSTNAME='my-custom-ip-address-or-hostname' npm start\n```\n\nWindows:\n```\nset REACT_NATIVE_PACKAGER_HOSTNAME='my-custom-ip-address-or-hostname'\nnpm start\n```\n\nThe above example would cause the development server to listen on `exp://my-custom-ip-address-or-hostname:19000`.\n\n## Adding Flow\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this [introduction to using static types in JavaScript](https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb) if you are new to this concept.\n\nReact Native works with [Flow](http://flowtype.org/) out of the box, as long as your Flow version matches the one used in the version of React Native.\n\nTo add a local dependency to the correct Flow version to a Create React Native App project, follow these steps:\n\n1. Find the Flow `[version]` at the bottom of the included [.flowconfig](.flowconfig)\n2. Run `npm install --save-dev flow-bin@x.y.z` (or `yarn add --dev flow-bin@x.y.z`), where `x.y.z` is the .flowconfig version number.\n3. Add `\"flow\": \"flow\"` to the `scripts` section of your `package.json`.\n4. Add `// @flow` to any files you want to type check (for example, to `App.js`).\n\nNow you can run `npm run flow` (or `yarn flow`) to check the files for type errors.\nYou can optionally use a [plugin for your IDE or editor](https://flow.org/en/docs/editors/) for a better integrated experience.\n\nTo learn more about Flow, check out [its documentation](https://flow.org/).\n\n## Sharing and Deployment\n\nCreate React Native App does a lot of work to make app setup and development simple and straightforward, but it's very difficult to do the same for deploying to Apple's App Store or Google's Play Store without relying on a hosted service.\n\n### Publishing to Expo's React Native Community\n\nExpo provides free hosting for the JS-only apps created by CRNA, allowing you to share your app through the Expo client app. This requires registration for an Expo account.\n\nInstall the `exp` command-line tool, and run the publish command:\n\n```\n$ npm i -g exp\n$ exp publish\n```\n\n### Building an Expo \"standalone\" app\n\nYou can also use a service like [Expo's standalone builds](https://docs.expo.io/versions/latest/guides/building-standalone-apps.html) if you want to get an IPA/APK for distribution without having to build the native code yourself.\n\n### Ejecting from Create React Native App\n\nIf you want to build and deploy your app yourself, you'll need to eject from CRNA and use Xcode and Android Studio.\n\nThis is usually as simple as running `npm run eject` in your project, which will walk you through the process. Make sure to install `react-native-cli` and follow the [native code getting started guide for React Native](https://facebook.github.io/react-native/docs/getting-started.html).\n\n#### Should I Use ExpoKit?\n\nIf you have made use of Expo APIs while working on your project, then those API calls will stop working if you eject to a regular React Native project. If you want to continue using those APIs, you can eject to \"React Native + ExpoKit\" which will still allow you to build your own native code and continue using the Expo APIs. See the [ejecting guide](https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md) for more details about this option.\n\n## Troubleshooting\n\n### Networking\n\nIf you're unable to load your app on your phone due to a network timeout or a refused connection, a good first step is to verify that your phone and computer are on the same network and that they can reach each other. Create React Native App needs access to ports 19000 and 19001 so ensure that your network and firewall settings allow access from your device to your computer on both of these ports.\n\nTry opening a web browser on your phone and opening the URL that the packager script prints, replacing `exp://` with `http://`. So, for example, if underneath the QR code in your terminal you see:\n\n```\nexp://192.168.0.1:19000\n```\n\nTry opening Safari or Chrome on your phone and loading\n\n```\nhttp://192.168.0.1:19000\n```\n\nand\n\n```\nhttp://192.168.0.1:19001\n```\n\nIf this works, but you're still unable to load your app by scanning the QR code, please open an issue on the [Create React Native App repository](https://github.com/react-community/create-react-native-app) with details about these steps and any other error messages you may have received.\n\nIf you're not able to load the `http` URL in your phone's web browser, try using the tethering/mobile hotspot feature on your phone (beware of data usage, though), connecting your computer to that WiFi network, and restarting the packager.\n\n### iOS Simulator won't open\n\nIf you're on a Mac, there are a few errors that users sometimes see when attempting to `npm run ios`:\n\n* \"non-zero exit code: 107\"\n* \"You may need to install Xcode\" but it is already installed\n* and others\n\nThere are a few steps you may want to take to troubleshoot these kinds of errors:\n\n1. Make sure Xcode is installed and open it to accept the license agreement if it prompts you. You can install it from the Mac App Store.\n2. Open Xcode's Preferences, the Locations tab, and make sure that the `Command Line Tools` menu option is set to something. Sometimes when the CLI tools are first installed by Homebrew this option is left blank, which can prevent Apple utilities from finding the simulator. Make sure to re-run `npm/yarn run ios` after doing so.\n3. If that doesn't work, open the Simulator, and under the app menu select `Reset Contents and Settings...`. After that has finished, quit the Simulator, and re-run `npm/yarn run ios`.\n\n### QR Code does not scan\n\nIf you're not able to scan the QR code, make sure your phone's camera is focusing correctly, and also make sure that the contrast on the two colors in your terminal is high enough. For example, WebStorm's default themes may [not have enough contrast](https://github.com/react-community/create-react-native-app/issues/49) for terminal QR codes to be scannable with the system barcode scanners that the Expo app uses.\n\nIf this causes problems for you, you may want to try changing your terminal's color theme to have more contrast, or running Create React Native App from a different terminal. You can also manually enter the URL printed by the packager script in the Expo app's search bar to load it manually.\n","isFork":null},{"name":"MEAN_fullapp","url":"https://github.com/bchang1213/MEAN_fullapp","description":"full mean application utilizing Angular 2, angular, express, node, MEAN, mongodb","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":null,"isFork":null},{"name":"java_springboot_Counter","url":"https://github.com/bchang1213/java_springboot_Counter","description":"number counter application for Java","lang":["Shell","Batchfile","Java"],"readme":null,"isFork":null},{"name":"java_springboot_calculator","url":"https://github.com/bchang1213/java_springboot_calculator","description":"calculator app using java spring boot, run through the browser.","lang":["Java"],"readme":null,"isFork":null},{"name":"java_springboot_Books","url":"https://github.com/bchang1213/java_springboot_Books","description":"rudimentary app about books and organizing your favorite books using Java.","lang":["Shell","Batchfile","Java"],"readme":null,"isFork":null},{"name":"java_springboot_BankAccount","url":"https://github.com/bchang1213/java_springboot_BankAccount","description":"A program in java written using the spring boot framework.","lang":["Java"],"readme":null,"isFork":null},{"name":"javaEE","url":"https://github.com/bchang1213/javaEE","description":"Here are a few simple java applications using Java EE.","lang":["JavaScript","Java","CSS","HTML"],"readme":"# javaEE\nHere are a few simple java applications using Java EE.\n\nCumulatively, they are not much. The code snippets were written during my initial introduction in Java.\n\nUsing Spring Tool Suite (https://spring.io/tools), run each program locally.\n","isFork":null},{"name":"friendmatch","url":"https://github.com/bchang1213/friendmatch","description":"friendmatch - user dashboard","lang":["Python","CSS","HTML"],"readme":"# friendmatch\nfriendmatch - user dashboard\n\nGo to the wireframe folder above to view the wireframe image for this project to gain context.\n","isFork":null},{"name":"javaSpringProject","url":"https://github.com/bchang1213/javaSpringProject","description":"this is a Spring Boot project with Spring Security written in Java, JSTL, JPA, JPQL, JSP, mySQL/SQL. The video player is written in javascript. The chat feature utilizes STOMP and WebSockets.","lang":["Shell","Batchfile","Java","CSS","JavaScript"],"readme":null,"isFork":null},{"name":"intro_Java","url":"https://github.com/bchang1213/intro_Java","description":"an introductory set of exercises using java.","lang":["Java"],"readme":null,"isFork":null},{"name":"kleos","url":"https://github.com/bchang1213/kleos","description":null,"lang":["CSS","HTML","Python"],"readme":null,"isFork":true},{"name":"stomp-websocket","url":"https://github.com/bchang1213/stomp-websocket","description":"Stomp client for Web browsers and node.js apps","lang":["CoffeeScript","HTML","JavaScript","CSS"],"readme":"# STOMP.js\n\nThis library provides a STOMP client for Web browser (using Web Sockets) or node.js applications (either using raw TCP sockets or Web Sockets).\n\n# Project Status\n\n__This project is _no longer maintained_ ([some context about this decision](http://jmesnil.net/weblog/2015/09/04/stepping-out-from-personal-open-source-projects/)).__\n\n__If you encounter bugs with it or need enhancements, you can fork it and modify it as the project is under the Apache License 2.0.__\n\n## Web Browser support\n\nThe library file is located in `lib/stomp.js` (a minified version is available in `lib/stomp.min.js`).\nIt does not require any dependency (except WebSocket support from the browser or an alternative to WebSocket!)\n\nOnline [documentation][doc] describes the library API (including the [annotated source code][annotated]).\n\n## node.js support\n\nInstall the 'stompjs' module\n\n    $ npm install stompjs\n\nIn the node.js app, require the module with:\n\n    var Stomp = require('stompjs');\n\nTo connect to a STOMP broker over a TCP socket, use the `Stomp.overTCP(host, port)` method:\n\n    var client = Stomp.overTCP('localhost', 61613);\n\nTo connect to a STOMP broker over a WebSocket, use instead the `Stomp.overWS(url)` method:\n\n    var client = Stomp.overWS('ws://localhost:61614');\n\n## Development Requirements\n\nFor development (testing, building) the project requires node.js. This allows us to run tests without the browser continuously during development (see `cake watch`).\n\n    $ npm install\n\n## Building and Testing\n\n[![Build Status](https://secure.travis-ci.org/jmesnil/stomp-websocket.png)](http://travis-ci.org/jmesnil/stomp-websocket)\n\nTo build JavaScript from the CoffeeScript source code:\n\n    $ cake build\n\nTo run tests:\n\n    $ cake test\n\nTo continuously run tests on file changes:\n\n    $ cake watch\n\n\n## Browser Tests\n\n* Make sure you have a running STOMP broker which supports the WebSocket protocol\n (see the [documentation][doc])\n* Open in your web browser the project's [test page](browsertests/index.html)\n* Check all tests pass\n\n## Use\n\nThe project contains examples for using stomp.js\nto send and receive STOMP messages from a server directly in the Web Browser or in a WebWorker.\n\n## Authors\n\n * [Jeff Mesnil](http://jmesnil.net/)\n * [Jeff Lindsay](http://github.com/progrium)\n\n[doc]: http://jmesnil.net/stomp-websocket/doc/\n[annotated]: http://jmesnil.net/stomp-websocket/doc/stomp.html\n","isFork":true},{"name":"MEAN_teamManager","url":"https://github.com/bchang1213/MEAN_teamManager","description":"A full MEAN app (mongodb/mongoose./ express.js/ angular.js/ node.js) where the user is a manager of a sports team and is capable of adding players and dictating games.","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":null,"isFork":null},{"name":"MEAN_notes","url":"https://github.com/bchang1213/MEAN_notes","description":"A full stack application for creating personal notes using MEAN. utilized technologies include mongodb(mongoose), express.js, node.js, angular.js ","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":null,"isFork":null},{"name":"angular_weatherapp","url":"https://github.com/bchang1213/angular_weatherapp","description":"using angular to create a routed weather app which pulls data from an external weather api.","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":"# Weather\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.2.7.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\nBefore running the tests make sure you are serving the app via `ng serve`.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n","isFork":null},{"name":"angular_githubscore","url":"https://github.com/bchang1213/angular_githubscore","description":"used an angular service to make http api call to retrieve data and populate template with user info","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":"# GithubScore\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.2.7.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\nBefore running the tests make sure you are serving the app via `ng serve`.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n","isFork":null},{"name":"angular_quoteranks","url":"https://github.com/bchang1213/angular_quoteranks","description":"practicing output and input in angular within components","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":"# QuoteRanks\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.2.7.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\nBefore running the tests make sure you are serving the app via `ng serve`.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n","isFork":null},{"name":"angular_subcomponents","url":"https://github.com/bchang1213/angular_subcomponents","description":"practice with angular and sub component formatting","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":"# Layout\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.2.7.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\nBefore running the tests make sure you are serving the app via `ng serve`.\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n","isFork":null},{"name":"angular_registration","url":"https://github.com/bchang1213/angular_registration","description":"registration form using angular","lang":["TypeScript","JavaScript","HTML","CSS"],"readme":"# FormPractice\n\nThis project was generated with [Angular CLI](https://github.com/angular/angular-cli) version 1.5.0.\n\n## Development server\n\nRun `ng serve` for a dev server. Navigate to `http://localhost:4200/`. The app will automatically reload if you change any of the source files.\n\n## Code scaffolding\n\nRun `ng generate component component-name` to generate a new component. You can also use `ng generate directive|pipe|service|class|guard|interface|enum|module`.\n\n## Build\n\nRun `ng build` to build the project. The build artifacts will be stored in the `dist/` directory. Use the `-prod` flag for a production build.\n\n## Running unit tests\n\nRun `ng test` to execute the unit tests via [Karma](https://karma-runner.github.io).\n\n## Running end-to-end tests\n\nRun `ng e2e` to execute the end-to-end tests via [Protractor](http://www.protractortest.org/).\n\n## Further help\n\nTo get more help on the Angular CLI use `ng help` or go check out the [Angular CLI README](https://github.com/angular/angular-cli/blob/master/README.md).\n","isFork":null},{"name":"django_belttest2","url":"https://github.com/bchang1213/django_belttest2","description":"django belt test 2","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_belttest","url":"https://github.com/bchang1213/django_belttest","description":"belt test","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"django_beltreview","url":"https://github.com/bchang1213/django_beltreview","description":"django belt review app","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_loginandreg","url":"https://github.com/bchang1213/django_loginandreg","description":"django app with ORM database where user can create users, store that info into a db and then pull that info when logging in to the site.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_courses","url":"https://github.com/bchang1213/django_courses","description":"django app, practicing routing using django and saving information into a database with queries, using ORM","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_semirestfulusers","url":"https://github.com/bchang1213/django_semirestfulusers","description":"practice creating a django app using the ORM","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_likesandbooks","url":"https://github.com/bchang1213/django_likesandbooks","description":"ORM practice with django","lang":["Python"],"readme":null,"isFork":null},{"name":"django_dojoninjas","url":"https://github.com/bchang1213/django_dojoninjas","description":"practicing ORM with django","lang":["Python"],"readme":null,"isFork":null},{"name":"django_users","url":"https://github.com/bchang1213/django_users","description":"practicing ORM with Django","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_ninjagold","url":"https://github.com/bchang1213/django_ninjagold","description":"django project, small game using django","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"django_amadon","url":"https://github.com/bchang1213/django_amadon","description":"creating a basic e-commerce page with buy functionality","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_sessionwords","url":"https://github.com/bchang1213/django_sessionwords","description":"exercise using Django and python to create an app that displays user input words using session and applying styles to them.","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"django_surveyform","url":"https://github.com/bchang1213/django_surveyform","description":"\"survey form is a simple demonstration of form data being displayed using session in django.\"","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"django_randomwords","url":"https://github.com/bchang1213/django_randomwords","description":"Generate a random word string using a button with Django/python","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_timedisplay","url":"https://github.com/bchang1213/django_timedisplay","description":"created an app that displays time for the purpose of better understanding the mtv framework of django","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"django_multipleapps","url":"https://github.com/bchang1213/django_multipleapps","description":"first django application, learning the mtv framework of django","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"mysqlflask_thewall","url":"https://github.com/bchang1213/mysqlflask_thewall","description":"flask and mysql assignment, creating users, validating their user data, allowing them to login, post messages, post comments.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"mysqlflask_loginandregistration","url":"https://github.com/bchang1213/mysqlflask_loginandregistration","description":"This is a login form using mysql and flask to store login information, delete it, and shows a little bit about hashing/salting sensitive information.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"mysqlflask_emailvalidation","url":"https://github.com/bchang1213/mysqlflask_emailvalidation","description":"flask app with mysql. the application takes user input data and stores it into a database. it validates the input data for the correct email formatting using regex and if valid, will display the values in a table on a new route and provide deleting capabilities, deleting the info straight from a db.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"mysqlflask_fullfriends","url":"https://github.com/bchang1213/mysqlflask_fullfriends","description":"flask application with mysql connection that stores user-input data into a database and then displays it dynamically to website","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"flask_storyboard","url":"https://github.com/bchang1213/flask_storyboard","description":"creating a choose your own adventure mini game as a Coding Dojo project.","lang":["HTML","Python"],"readme":null,"isFork":null},{"name":"python_OOP_practice","url":"https://github.com/bchang1213/python_OOP_practice","description":"practicing OOP ideas using python.","lang":["Python"],"readme":null,"isFork":null},{"name":"javascript_codingDojo","url":"https://github.com/bchang1213/javascript_codingDojo","description":"Exercises in writing javascript and using it to solve problems with functions, conditionals, loops, etc.","lang":["JavaScript"],"readme":null,"isFork":null},{"name":"CSS_gitblocks","url":"https://github.com/bchang1213/CSS_gitblocks","description":"\"CSS exercise in shaping a wireframe with html and css\"","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CSS_displayingblocks","url":"https://github.com/bchang1213/CSS_displayingblocks","description":" \"CSS exercise aligning images and structuring shapes within the view of the browser\"","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"git_repo_practice","url":"https://github.com/bchang1213/git_repo_practice","description":"advanced git commands assignment","lang":[],"readme":null,"isFork":null},{"name":"mySQL_intro","url":"https://github.com/bchang1213/mySQL_intro","description":"\"introduction to sql querying and using mysql workbench\"","lang":[],"readme":null,"isFork":null},{"name":"flask_registrationform","url":"https://github.com/bchang1213/flask_registrationform","description":"creating registration form with form validations in python","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"flask_ninjagold","url":"https://github.com/bchang1213/flask_ninjagold","description":"demonstrating usage of session, in-template jinja2 python code, and routing.","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"flask_rockpaperscissor","url":"https://github.com/bchang1213/flask_rockpaperscissor","description":"Group assignment to create a rock paper scissors game","lang":["Python","HTML","CSS"],"readme":null,"isFork":null},{"name":"flask_landingpage","url":"https://github.com/bchang1213/flask_landingpage","description":"app demonstrating basic session object usage in routing for flask.","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"flask_thegreatnumbergame","url":"https://github.com/bchang1213/flask_thegreatnumbergame","description":"starting a numbers game where the user loads the page and has to guess a number. Technical details: we are using Python/Flask/implementing the sessions object. We are using it to practice the idea of data persistence through functions","lang":["Python","HTML","CSS"],"readme":null,"isFork":null},{"name":"flask_portfolio","url":"https://github.com/bchang1213/flask_portfolio","description":"basic exercise in using advanced routing, different GET/POST methods for routes, and transferring data between functions.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"flask_hello","url":"https://github.com/bchang1213/flask_hello","description":"a basic introduction into using Flask with python","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"python_fundamentals","url":"https://github.com/bchang1213/python_fundamentals","description":"A bunch of python syntax and logic exercises to be run on a python compiler.","lang":["Python"],"readme":null,"isFork":null},{"name":"flask_dojosurvey","url":"https://github.com/bchang1213/flask_dojosurvey","description":"using Flask with python to create a survey page that will display a new page with the submitted survey information.","lang":["Python","CSS","HTML"],"readme":null,"isFork":null},{"name":"flask_counter","url":"https://github.com/bchang1213/flask_counter","description":"a simple counter made with backend python logic to display how many times a page is refreshed/visited on the corresponding html view.","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"Flask_ninjas","url":"https://github.com/bchang1213/Flask_ninjas","description":"flask routing practice assignment","lang":["Python","HTML"],"readme":null,"isFork":null},{"name":"python_assignment1","url":"https://github.com/bchang1213/python_assignment1","description":"playing around with python's string and list methods for practice","lang":["Python"],"readme":null,"isFork":null},{"name":"jQueryUI-sortableninja","url":"https://github.com/bchang1213/jQueryUI-sortableninja","description":"got an image to be sortable using jquery ui library.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"Pacman","url":"https://github.com/bchang1213/Pacman","description":"Creating a pacman game with CSS, HTML, and JS","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"jsCircles","url":"https://github.com/bchang1213/jsCircles","description":null,"lang":["HTML"],"readme":null,"isFork":true},{"name":"js_scroll","url":"https://github.com/bchang1213/js_scroll","description":"js_scroll","lang":["HTML"],"readme":"js_scroll\n=========\n\nExercise for the CodingDojo's Javascript course. \n See the learning platform to see how you should improve the codes. \n There are several bugs with the codes which are intentional. :)\n","isFork":true},{"name":"GitHubRepoAssignment","url":"https://github.com/bchang1213/GitHubRepoAssignment","description":"exercise in using GitHub with Git","lang":[],"readme":null,"isFork":null},{"name":"CSS-periodictable","url":"https://github.com/bchang1213/CSS-periodictable","description":"created a periodic table using unordered html lists and css.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CSS-theInternet","url":"https://github.com/bchang1213/CSS-theInternet","description":"Assignment to recreate the image of a webpage using html and css to the best of ability.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"API_AJAX-gameofthronesAPI","url":"https://github.com/bchang1213/API_AJAX-gameofthronesAPI","description":"an exercise in using the game of thrones api, where we pull game of thrones house information and display it to a page when the user clicks on the picture of a certain house.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"API_AJAX-weatherforecast","url":"https://github.com/bchang1213/API_AJAX-weatherforecast","description":"Using the API of openweathermap.org to create a very simple weather forecast page.","lang":["CSS","HTML"],"readme":null,"isFork":null},{"name":"ninjatocat","url":"https://github.com/bchang1213/ninjatocat","description":"an assignment where we use jQuery functions and knowhow to make an image shift from cat to ninja piece by piece.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"jQuerybasics","url":"https://github.com/bchang1213/jQuerybasics","description":"a html page with a list jquery functions and an example use of their functionality","lang":["CSS","HTML"],"readme":null,"isFork":null},{"name":"jQuery-hoveringMew","url":"https://github.com/bchang1213/jQuery-hoveringMew","description":"an optional coding dojo assigment where we make some images fade in and out when the user hovers their mouse pointer over it.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"jQuery-dissapearingMewtwo","url":"https://github.com/bchang1213/jQuery-dissapearingMewtwo","description":"made a simple html document that houses some jQuery functions to  make an image switch on and off.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"jQuery-contactCard","url":"https://github.com/bchang1213/jQuery-contactCard","description":"created a form where once submitted, will generate dynamic content using jQuery. The dynamic contact is a contact card, containing information from the form, which will display description of the input once clicked on, using jquery animation functions.\" [master (root-commit) a1b91c3] created a form where once submitted, will generate dynamic content using jQuery. The dynamic contact is a contact card, containing information from the form, which will display description of the input once clicked on, using jquery functions.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"colorClicker","url":"https://github.com/bchang1213/colorClicker","description":"assignment to change the color of some HTML blocks using jQuery.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"jqueryUsersAssignment","url":"https://github.com/bchang1213/jqueryUsersAssignment","description":"Assignment where we created a form that receives user input data like a \"name, email, phone #\" and records it onto a table for display.","lang":["CSS","HTML"],"readme":null,"isFork":null},{"name":"codingDojo-_HTML","url":"https://github.com/bchang1213/codingDojo-_HTML","description":"the Coding Dojo HTML assignments, writing out basic HTML documents using the knowledge of different tags and ideas.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"yellowbeltexam","url":"https://github.com/bchang1213/yellowbeltexam","description":"the Coding Dojo yellow belt exam, testing students on recreating a webpage image using HTML and css.","lang":["CSS","HTML"],"readme":"# yellowbeltexam\nthe Coding Dojo yellow belt exam, testing students on recreating a webpage image using HTML and css.\n\nTo minimize score deduction, please include all of these images to your submission. Make sure image links are properly set.\n\nHave fun with the Yellow Belt exam! :)\n\nThe wireframe image is labeled accordance.jpg, located in the \"prompt\" folder\".\n","isFork":null},{"name":"plottingblock","url":"https://github.com/bchang1213/plottingblock","description":"plotting blocks using css.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CSS-javascriptbasics","url":"https://github.com/bchang1213/CSS-javascriptbasics","description":"Recreating a web page image using css and html.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"API_AJAX-gen1Pokemon","url":"https://github.com/bchang1213/API_AJAX-gen1Pokemon","description":"API and AJAX course assignment to print the generation 1 pokemon onto an HTML page with some minor css.","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CSS-Portfolioassignment","url":"https://github.com/bchang1213/CSS-Portfolioassignment","description":"Portfolio assignment in Coding Dojo's CSS course","lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"CSS-aboutPython","url":"https://github.com/bchang1213/CSS-aboutPython","description":"Coding Dojo assignment in the CSS course.","lang":["HTML","CSS"],"readme":null,"isFork":null}]}
,{"match":0,"linkedin_id":213948881,"gid":1261585,"git_name":"Brian Chang","git_login":"cobanbrian","git_location":"Houston","git_company":"COBAN","git_org":[],"git_email":null,"git_blog":"http://www.cobantech.com","git_websiteUrl":"http://www.cobantech.com","github_url":"https://github.com/cobanbrian","bio":null,"repos":[{"name":"TX2-Tests","url":"https://github.com/cobanbrian/TX2-Tests","description":null,"lang":[],"readme":"# TX2-Tests","isFork":null},{"name":"TensorFlow-Examples","url":"https://github.com/cobanbrian/TensorFlow-Examples","description":"TensorFlow Tutorial and Examples for beginners","lang":["Python","Jupyter Notebook"],"readme":"# TensorFlow Examples\nTensorFlow Tutorial with popular machine learning algorithms implementation. This tutorial was designed for easily diving into TensorFlow, through examples.\n\nIt is suitable for beginners who want to find clear and concise examples about TensorFlow. For readability, the tutorial includes both notebook and code with explanations.\n\nNote: If you are using older TensorFlow version (before 0.12), please have a [look here](https://github.com/aymericdamien/TensorFlow-Examples/tree/0.11)\n\n## Tutorial index\n\n#### 0 - Prerequisite\n- Introduction to Machine Learning ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/0_Prerequisite/ml_introduction.ipynb))\n- Introduction to MNIST Dataset ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/0_Prerequisite/mnist_dataset_intro.ipynb))\n\n#### 1 - Introduction\n- Hello World ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/1_Introduction/helloworld.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/1_Introduction/helloworld.py))\n- Basic Operations ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/1_Introduction/basic_operations.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/1_Introduction/basic_operations.py))\n\n#### 2 - Basic Models\n- Nearest Neighbor ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/2_BasicModels/nearest_neighbor.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/2_BasicModels/nearest_neighbor.py))\n- Linear Regression ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/2_BasicModels/linear_regression.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/2_BasicModels/linear_regression.py))\n- Logistic Regression ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/2_BasicModels/logistic_regression.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/2_BasicModels/logistic_regression.py))\n\n#### 3 - Neural Networks\n- Multilayer Perceptron ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/multilayer_perceptron.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/multilayer_perceptron.py))\n- Convolutional Neural Network ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/convolutional_network.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/convolutional_network.py))\n- Recurrent Neural Network (LSTM) ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/recurrent_network.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/recurrent_network.py))\n- Bidirectional Recurrent Neural Network (LSTM) ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/bidirectional_rnn.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/bidirectional_rnn.py))\n- Dynamic Recurrent Neural Network (LSTM) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/dynamic_rnn.py))\n- AutoEncoder ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/3_NeuralNetworks/autoencoder.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/3_NeuralNetworks/autoencoder.py))\n\n#### 4 - Utilities\n- Save and Restore a model ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/4_Utils/save_restore_model.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/4_Utils/save_restore_model.py))\n- Tensorboard - Graph and loss visualization ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/4_Utils/tensorboard_basic.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/4_Utils/tensorboard_basic.py))\n- Tensorboard - Advanced visualization ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/4_Utils/tensorboard_advanced.py))\n\n#### 5 - Multi GPU\n- Basic Operations on multi-GPU ([notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/5_MultiGPU/multigpu_basics.ipynb)) ([code](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/examples/5_MultiGPU/multigpu_basics.py))\n\n## Dataset\nSome examples require MNIST dataset for training and testing. Don't worry, this dataset will automatically be downloaded when running examples (with input_data.py).\nMNIST is a database of handwritten digits, for a quick description of that dataset, you can check [this notebook](https://github.com/aymericdamien/TensorFlow-Examples/blob/master/notebooks/0_Prerequisite/mnist_dataset_intro.ipynb).\n\nOfficial Website: [http://yann.lecun.com/exdb/mnist/](http://yann.lecun.com/exdb/mnist/)\n\n## More Examples\nThe following examples are coming from [TFLearn](https://github.com/tflearn/tflearn), a library that provides a simplified interface for TensorFlow. You can have a look, there are many [examples](https://github.com/tflearn/tflearn/tree/master/examples) and [pre-built operations and layers](http://tflearn.org/doc_index/#api).\n\n### Tutorials\n- [TFLearn Quickstart](https://github.com/tflearn/tflearn/blob/master/tutorials/intro/quickstart.md). Learn the basics of TFLearn through a concrete machine learning task. Build and train a deep neural network classifier.\n\n### Basics\n- [Linear Regression](https://github.com/tflearn/tflearn/blob/master/examples/basics/linear_regression.py). Implement a linear regression using TFLearn.\n- [Logical Operators](https://github.com/tflearn/tflearn/blob/master/examples/basics/logical.py). Implement logical operators with TFLearn (also includes a usage of 'merge').\n- [Weights Persistence](https://github.com/tflearn/tflearn/blob/master/examples/basics/weights_persistence.py). Save and Restore a model.\n- [Fine-Tuning](https://github.com/tflearn/tflearn/blob/master/examples/basics/finetuning.py). Fine-Tune a pre-trained model on a new task.\n- [Using HDF5](https://github.com/tflearn/tflearn/blob/master/examples/basics/use_hdf5.py). Use HDF5 to handle large datasets.\n- [Using DASK](https://github.com/tflearn/tflearn/blob/master/examples/basics/use_dask.py). Use DASK to handle large datasets.\n\n### Computer Vision\n- [Multi-layer perceptron](https://github.com/tflearn/tflearn/blob/master/examples/images/dnn.py). A multi-layer perceptron implementation for MNIST classification task.\n- [Convolutional Network (MNIST)](https://github.com/tflearn/tflearn/blob/master/examples/images/convnet_mnist.py). A Convolutional neural network implementation for classifying MNIST dataset.\n- [Convolutional Network (CIFAR-10)](https://github.com/tflearn/tflearn/blob/master/examples/images/convnet_cifar10.py). A Convolutional neural network implementation for classifying CIFAR-10 dataset.\n- [Network in Network](https://github.com/tflearn/tflearn/blob/master/examples/images/network_in_network.py). 'Network in Network' implementation for classifying CIFAR-10 dataset.\n- [Alexnet](https://github.com/tflearn/tflearn/blob/master/examples/images/alexnet.py). Apply Alexnet to Oxford Flowers 17 classification task.\n- [VGGNet](https://github.com/tflearn/tflearn/blob/master/examples/images/vgg_network.py). Apply VGG Network to Oxford Flowers 17 classification task.\n- [VGGNet Finetuning (Fast Training)](https://github.com/tflearn/tflearn/blob/master/examples/images/vgg_network_finetuning.py). Use a pre-trained VGG Network and retrain it on your own data, for fast training.\n- [RNN Pixels](https://github.com/tflearn/tflearn/blob/master/examples/images/rnn_pixels.py). Use RNN (over sequence of pixels) to classify images.\n- [Highway Network](https://github.com/tflearn/tflearn/blob/master/examples/images/highway_dnn.py). Highway Network implementation for classifying MNIST dataset.\n- [Highway Convolutional Network](https://github.com/tflearn/tflearn/blob/master/examples/images/convnet_highway_mnist.py). Highway Convolutional Network implementation for classifying MNIST dataset.\n- [Residual Network (MNIST)](https://github.com/tflearn/tflearn/blob/master/examples/images/residual_network_mnist.py). A bottleneck residual network applied to MNIST classification task.\n- [Residual Network (CIFAR-10)](https://github.com/tflearn/tflearn/blob/master/examples/images/residual_network_cifar10.py). A residual network applied to CIFAR-10 classification task.\n- [Google Inception (v3)](https://github.com/tflearn/tflearn/blob/master/examples/images/googlenet.py). Google's Inception v3 network applied to Oxford Flowers 17 classification task.\n- [Auto Encoder](https://github.com/tflearn/tflearn/blob/master/examples/images/autoencoder.py). An auto encoder applied to MNIST handwritten digits.\n\n### Natural Language Processing\n- [Recurrent Neural Network (LSTM)](https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm.py). Apply an LSTM to IMDB sentiment dataset classification task.\n- [Bi-Directional RNN (LSTM)](https://github.com/tflearn/tflearn/blob/master/examples/nlp/bidirectional_lstm.py). Apply a bi-directional LSTM to IMDB sentiment dataset classification task.\n- [Dynamic RNN (LSTM)](https://github.com/tflearn/tflearn/blob/master/examples/nlp/dynamic_lstm.py). Apply a dynamic LSTM to classify variable length text from IMDB dataset.\n- [City Name Generation](https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_generator_cityname.py). Generates new US-cities name, using LSTM network.\n- [Shakespeare Scripts Generation](https://github.com/tflearn/tflearn/blob/master/examples/nlp/lstm_generator_shakespeare.py). Generates new Shakespeare scripts, using LSTM network.\n- [Seq2seq](https://github.com/tflearn/tflearn/blob/master/examples/nlp/seq2seq_example.py). Pedagogical example of seq2seq reccurent network. See [this repo](https://github.com/ichuang/tflearn_seq2seq) for full instructions.\n- [CNN Seq](https://github.com/tflearn/tflearn/blob/master/examples/nlp/cnn_sentence_classification.py). Apply a 1-D convolutional network to classify sequence of words from IMDB sentiment dataset.\n\n### Reinforcement Learning\n- [Atari Pacman 1-step Q-Learning](https://github.com/tflearn/tflearn/blob/master/examples/reinforcement_learning/atari_1step_qlearning.py). Teach a machine to play Atari games (Pacman by default) using 1-step Q-learning.\n\n### Others\n- [Recommender - Wide & Deep Network](https://github.com/tflearn/tflearn/blob/master/examples/others/recommender_wide_and_deep.py). Pedagogical example of wide & deep networks for recommender systems.\n\n### Notebooks\n- [Spiral Classification Problem](https://github.com/tflearn/tflearn/blob/master/examples/notebooks/spiral.ipynb). TFLearn implementation of spiral classification problem from Stanford CS231n.\n\n### Extending TensorFlow\n- [Layers](https://github.com/tflearn/tflearn/blob/master/examples/extending_tensorflow/layers.py). Use TFLearn layers along with TensorFlow.\n- [Trainer](https://github.com/tflearn/tflearn/blob/master/examples/extending_tensorflow/trainer.py). Use TFLearn trainer class to train any TensorFlow graph.\n- [Built-in Ops](https://github.com/tflearn/tflearn/blob/master/examples/extending_tensorflow/builtin_ops.py). Use TFLearn built-in operations along with TensorFlow.\n- [Summaries](https://github.com/tflearn/tflearn/blob/master/examples/extending_tensorflow/summaries.py). Use TFLearn summarizers along with TensorFlow.\n- [Variables](https://github.com/tflearn/tflearn/blob/master/examples/extending_tensorflow/variables.py). Use TFLearn variables along with TensorFlow.\n\n\n## Dependencies\n```\ntensorflow 1.0alpha\nnumpy\nmatplotlib\ncuda\ntflearn (if using tflearn examples)\n```\nFor more details about TensorFlow installation, you can check [TensorFlow Installation Guide](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md)\n","isFork":true},{"name":"TensorBoard","url":"https://github.com/cobanbrian/TensorBoard","description":"Visualize TensorFlow","lang":[],"readme":"# TensorBoard\nVisualize TensorFlow\n","isFork":null},{"name":"DIGITS","url":"https://github.com/cobanbrian/DIGITS","description":"Deep Learning GPU Training System","lang":["Python","Shell","HTML","Lua","CSS","JavaScript"],"readme":"# DIGITS\n\n[![Build Status](https://travis-ci.org/NVIDIA/DIGITS.svg?branch=master)](https://travis-ci.org/NVIDIA/DIGITS)\n[![Coverage Status](https://coveralls.io/repos/NVIDIA/DIGITS/badge.svg?branch=master)](https://coveralls.io/r/NVIDIA/DIGITS?branch=master)\n\nDIGITS (the **D**eep Learning **G**PU **T**raining **S**ystem) is a webapp for training deep learning models.\n\n# Installation\n\nIf you are using Ubuntu 14.04, you can install pre-built packages for the latest major release.\nVisit [docs/UbuntuInstall.md](docs/UbuntuInstall.md) for instructions.\n\nTo build DIGITS and its requirements from source, visit [docs/BuildDigits.md](docs/BuildDigits.md) for instructions.\n\nOnce you have installed DIGITS, visit [docs/GettingStarted.md](docs/GettingStarted.md) for an introductory walkthrough.\n\n# Get help\n\n### Installation issues\n* First, check out the instructions above\n* Then, ask questions on our [user group](https://groups.google.com/d/forum/digits-users)\n\n### Usage questions\n* First, check out the [Getting Started](docs/GettingStarted.md) page\n* Then, ask questions on our [user group](https://groups.google.com/d/forum/digits-users)\n\n### Bugs and feature requests\n* Please let us know by [filing a new issue](https://github.com/NVIDIA/DIGITS/issues/new)\n* Bonus points if you want to contribute by opening a [pull request](https://help.github.com/articles/using-pull-requests/)!\n  * You will need to send a signed copy of the [Contributor License Agreement](CLA) to digits@nvidia.com before your change can be accepted.\n\n","isFork":true}]}
,{"match":0,"linkedin_id":213948881,"gid":181169,"git_name":"Brian Chang","git_login":"brian-chang","git_location":"San Jose","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/brian-chang","bio":null,"repos":[]}
,{"match":0,"linkedin_id":213948881,"gid":125626,"git_name":"Brian Chang","git_login":"bchang","git_location":"San Francisco, CA","git_company":"Guidewire Software, Inc.","git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/bchang","bio":null,"repos":[{"name":"robolectric","url":"https://github.com/bchang/robolectric","description":"Android Unit Testing Framework","lang":["Shell","Ruby","Java"],"readme":"<a name=\"README\">[<img src=\"https://rawgithub.com/robolectric/robolectric/master/images/robolectric-horizontal.png\"/>](http://robolectric.org)</a>\n\n[![Build Status](https://secure.travis-ci.org/robolectric/robolectric.png?branch=master)](http://travis-ci.org/robolectric/robolectric)\n\nRobolectric is a testing framework that de-fangs the Android SDK so you can test-drive the development of your Android app.\n\n## Usage\n\nHere's an example of a simple test written using Robolectric:\n\n```java\n@RunWith(RobolectricTestRunner.class)\npublic class MyActivityTest {\n\n  @Test\n  public void clickingButton_shouldChangeResultsViewText() throws Exception {\n    Activity activity = Robolectric.setupActivity(MyActivity.class);\n\n    Button pressMeButton = (Button) activity.findViewById(R.id.press_me_button);\n    TextView results = (TextView) activity.findViewById(R.id.results_text_view);\n\n    pressMeButton.performClick();\n    String resultsText = results.getText().toString();\n    assertThat(resultsText, equalTo(\"Testing Android Rocks!\"));\n  }\n}\n```\n\nFor more information about how to install and use Robolectric on your project, extend its functionality, and join the community of\ncontributors, please visit\n[http://robolectric.org](http://robolectric.org).\n\n## Install\n\n### Starting a New Project\n\nIf you'd like to start a new project with Robolectric you can use deckard (for either [maven](http://github.com/robolectric/deckard-maven)\nor [gradle](http://github.com/robolectric/deckard-gradle)). These project will guide you through setting\nup both Android and Robolectric on your machine.\n\n### Gradle\n\n```groovy\ntestCompile \"org.robolectric:robolectric:2.4\"\n```\n\n### Maven\n\n```xml\n<dependency>\n   <groupId>org.robolectric</groupId>\n   <artifactId>robolectric</artifactId>\n   <version>2.4</version>\n   <scope>test</scope>\n</dependency>\n```\n\nRobolectric requires the Google APIs for Android (specifically, the maps JAR) and Android support-v4 library. To download this onto your development machine use the Android SDK tools and then run the following to install them to your local Maven repository (you will need to have the 'Android Support Repository' installed):\n\n```\nmvn install:install-file -DgroupId=com.google.android.maps \\\n  -DartifactId=maps \\\n  -Dversion=18_r3 \\\n  -Dpackaging=jar \\\n  -Dfile=\"$ANDROID_HOME/add-ons/addon-google_apis-google-18/libs/maps.jar\"\n\nmvn install:install-file -DgroupId=com.android.support \\\n  -DartifactId=support-v4 \\\n  -Dversion=19.0.1 \\\n  -Dpackaging=jar \\\n  -Dfile=\"$ANDROID_HOME/extras/android/m2repository/com/android/support/support-v4/19.0.1/support-v4-19.0.1.jar\"\n```\n\nYou will need to either replace or have `ANDROID_HOME` set to your local Android SDK for Maven to be able to install the jar.\n\n## Building And Contributing\n\nRobolectric is built using Maven. Both Eclipse (with the M2Eclipse plug-in) and IntelliJ can import the `pom.xml` file and will automatically generate their project files from it. You will need to have portions of the Android SDK available in your local Maven repo in order to build Robolectric.\n\nMavenize all required dependencies by running:\n\n    ./scripts/install-dependencies.sh\n\nBecause Robolectric's shadows are compiled against the Android APIs that they target, you must build the shadows for all API levels before being able to run any of the tests. You can build all of Robolectric by running:\n\n    ./scripts/install-robolectric.sh\n    \nAfter doing this once, you can build and test against the specific API level you care about:\n\n    mvn install -P android-18 (for example)\n\n### Using Snapshots\n\nIf you would like to live on the bleeding edge, you can try running against a snapshot build. Keep in mind that snapshots represent the most recent changes on master and may contain bugs.\n\n### Gradle\n\n```groovy\nrepositories {\n    maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" }\n}\n\ndependencies {\n    testCompile \"org.robolectric:robolectric:3.0-SNAPSHOT\"\n}\n```\n\n### Maven\n\n```xml\n<repository>\n  <id>sonatype-snapshpots</id>\n  <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n</repository>\n\n<dependency>\n   <groupId>org.robolectric</groupId>\n   <artifactId>robolectric</artifactId>\n   <version>3.0-SNAPSHOT</version>\n   <scope>test</scope>\n</dependency>\n```\n","isFork":true},{"name":"Ant-Parallel-Executor","url":"https://github.com/bchang/Ant-Parallel-Executor","description":"A parallel target executor for Ant/Aardvark","lang":["Java","Gosu"],"readme":null,"isFork":null},{"name":"p4tools","url":"https://github.com/bchang/p4tools","description":null,"lang":["Java","Gosu"],"readme":null,"isFork":null},{"name":"dotfiles","url":"https://github.com/bchang/dotfiles","description":null,"lang":["Shell","Haskell"],"readme":null,"isFork":null},{"name":"musicdb-python","url":"https://github.com/bchang/musicdb-python","description":"nothing to see here, just learning a bit of Python, move along","lang":["Python"],"readme":null,"isFork":null},{"name":"ronin","url":"https://github.com/bchang/ronin","description":"Ronin web framework","lang":["Java","CoffeeScript","JavaScript","Gosu"],"readme":"Ronin is a Model/View/Controller-based web framework featuring full type safety. Links between pages in a Ronin application are checked at compile-time, which means no broken links - by using a modern IDE like Eclipse, you can catch configuration errors and regressions right away, saving you valuable testing and debugging time. And configuring a Ronin application is done purely with Gosu code - no magic and no XML files, which makes debugging easier.\n","isFork":true},{"name":"Aardvark","url":"https://github.com/bchang/Aardvark","description":"A build tool based on the Apache Ant library and the Gosu language","lang":["Java","Shell","Gosu"],"readme":null,"isFork":true}]}
,{"match":0,"linkedin_id":213948881,"gid":62715,"git_name":"Brian Chang","git_login":"brianchangdev","git_location":"San Diego, CA","git_company":null,"git_org":[],"git_email":null,"git_blog":"https://www.linkedin.com/in/brianjaychang","git_websiteUrl":"https://www.linkedin.com/in/brianjaychang","github_url":"https://github.com/brianchangdev","bio":"I am an IT analyst who also likes to code and build cool things.","repos":[{"name":"simplecodecasts_saas","url":"https://github.com/brianchangdev/simplecodecasts_saas","description":null,"lang":["Ruby","JavaScript","CSS","HTML"],"readme":null,"isFork":null},{"name":"frontend-nanodegree-resume","url":"https://github.com/brianchangdev/frontend-nanodegree-resume","description":"This repository is used for one of the projects in Udacity's Front-End Web Developer Nanodegree program. Learn how to become a Front-End Developer today with line-by-line code reviewed projects and get a job with career services!","lang":["CSS","HTML","JavaScript"],"readme":"# Project Details\n## How do I complete this project?\nReview the Online Resume [Project Rubric](https://review.udacity.com/?_ga=1.189245867.12280332.1465333852#!/projects/2962818615/rubric).\n\n1. In this project you will store your resume data in four javaScript objects according to the schema given below. As is often the case when leveraging an API, the objects must follow the schema exactly. All properties must be present and have real or fake values. The names must match those in the schema (note that object and property names are case-sensitive). All property values should be of the data-type given for the property in the schema. For example if the data-type is given as an array, it is not acceptable to use a string as a value for that property.\n2. Once you've created your javaScript objects, you will write the code needed to display all of the resume data contained within these objects in your resume.\n3. All of the HTML code needed to build the resume is stored in **js/helper.js** variables. The variable names indicate their function. You will replace substrings in these variable string values such as **%data%** and **#** with the data in your javaScript objects, and append or prepend the formatted result to your resume in the appropriate location.\n4. If you need a refresher on JavaScript syntax, go to the [Javascript Basics](https://classroom.udacity.com/nanodegrees/nd001/parts/0011345406/modules/296281861575460/lessons/1946788554/concepts/25505685350923) course; if you would like to understand how this project is manipulating and traversing the DOM, check out [Intro to jQuery](https://classroom.udacity.com/nanodegrees/nd001/parts/0011345406/modules/296281861575461/lessons/3314378535/concepts/33166386820923).\n5. Go through the videos and assignments in this course to learn the JavaScript necessary to build your resume.\n6. Fork the project repo from [Github](https://github.com/udacity/frontend-nanodegree-resume) and begin building you resume.\n7. If you are prompted to do so, you may want to get a [Google Maps API key](https://developers.google.com/maps/documentation/javascript/get-api-key), and include it as the value of the `key` parameter when loading the Google Maps API in **index.html**:\n```<script  src=\"http://maps.googleapis.com/maps/api/js?libraries=places&key=[YOUR_API_KEY]\"></script> ``` You may have some initial concerns with placing your API key directly within your JavaScript source files, but rest assured this is perfectly safe. All client-side code must be downloaded by the client; therefore, the client must download this API key - it is not intended to be secret. Google has security measures in place to ensure your key is not abused. **It is not technically possible to make anything secret on the client-side.**\n8. Check your work against the [Project Rubric](https://review.udacity.com/?_ga=1.189245867.12280332.1465333852#!/projects/2962818615/rubric).\n9. When you are satisfied with your project, submit it according to the Submission Instructions below.\n\n### By the end:\nYour resume will look something like this\n![](http://i.imgur.com/pWU1Xbl.png)\n\nAnd your repository will include the following files:\n\n* **index.html**: The main HTML document. Contains links to all of the CSS and JS resources needed to render the resume, including resumeBuilder.js.\n* **js/helper.js**: Contains helper code needed to format the resume and build the map. It also has a few function shells for additional functionality. More on helper.js further down.\n* **js/resumeBuilder.js**: This file is empty. You should write your code here.\n* **js/jQuery.js**: The jQuery library.\n* **css/style.css**: Contains all of the CSS needed to style the page.\n* **README.md**: \nThe GitHub readme file.\n* and some images in the images directory.\n\n## Your starting point...\n### js/helper.js\nWithin helper.js, you’ll find a large collection of strings containing snippets of HTML. Within many snippets, you’ll find placeholder data in the form of `%data%` or `%contact%`.\n\nEach string has a title that describes how it should be used. For instance, `HTMLworkStart` should be the first `<div>` in the Work section of the resume. `HTMLschoolLocation` contains a `%data%` placeholder which should be replaced with the location of one of your schools.\n\n### Your process:\nThe resume has four distinct sections: work, education, projects and a header with biographical information. You’ll need to:\n\n1. Build four JavaScript objects, each one representing a different resume section. The objects that you create (including property names and the data types of their values) need to follow the schema below exactly. All properties should be included and contain a value of the type specified unless the property is marked 'optional'. Property values may contain real or fake data. Property names are case-sensitive. Make sure your javaScript objects are formatted correctly using [jshint.com](http://jshint.com/).\n\n  * `bio` contains:\n        \n            name : string\n            role : string\n            contacts : an object with\n                  mobile: string\n                  email: string \n                  github: string\n                  twitter: string (optional)\n                  location: string\n            welcomeMessage: string \n            skills: array of strings\n            biopic: string url\n            display: function taking no parameters\n\n  * `education` contains:\n      \n            schools: array of objects with\n                 name: string\n                 location: string\n                 degree: string\n                 majors: array of strings\n                 dates: string (works with a hyphen between them)\n                 url: string\n            onlineCourses: array of objects with\n                 title: string\n                 school: string\n                 dates: string (works with a hyphen between them)\n                 url: string\n            display: function taking no parameters\n\n  * `work` contains\n          \n            jobs: array of objects with\n                 employer: string \n                 title: string \n                 location: string \n                 dates: string (Can be 'in progress')\n                 description: string \n            display: function taking no parameters\n\n  * `projects` contains:\n\n            projects: array of objects with\n                  title: string \n                  dates: string (works with a hyphen between them)\n                  description: string\n                  images: array with string urls\n            display: function taking no parameters\n\n2. Iterate through each javaScript object and append its information to index.html in the correct section.\n  * First off, you’ll be using jQuery’s `selector.append()` and `selector.prepend()` functions to modify index.html. `selector.append()` makes an element appear at the end of a selected section. `selector.prepend()` makes an element appear at the beginning of a selected section.\n    * Pay close attention to the ids of the `<div>`s in index.html and the HTML snippets in helper.js. They’ll be very useful as jQuery selectors for `selector.append()` and `selector.prepend()`\n  * You’ll also be using the JavaScript method `string.replace(old, new)` to swap out all the placeholder text (e.g. `%data%`) for data from your resume JSON objects.\n  * Here’s an example of some code that would add the location of one your companies to the page:\n    * `var formattedLocation = HTMLworkLocation.replace(\"%data%\", work.jobs[job].location);`\n    * `$(\".work-entry:last\").append(formattedLocation);`\n  * Use the mockup at the page of this document as a guide for the order in which you should append elements to the page.\n3. The resume includes an interactive map. Do the following to add it. \n  * In resumeBuilder.js, append the googleMap string to `<div id=”mapDiv”>`.\n  * In index.html, uncomment the Google script element: `<script type=\"text/javascript\" src=\"http://maps.googleapis.com/maps/api/js?libraries=places\"></script>`\n  * In helper.js, at the bottom of the file, uncomment code to initialize map and set fitBounds.\n4. All of your code for adding elements to the resume should be contained within functions. \n5. As described in the javaScript object schema, each 'display' function should be encapsulated within the javaScript object it displays in the resume. For instance, your 'display' function for appending 'work' experience data to the resume should be encapsulated within the 'work' javaScript object. The 'display' function can be encapsulated within the 'work' javaScript object definition in the same way other properties are defined there, or it can be encapsulated later in the file using dot notation. For example: `work.display =`\n6. It’s possible to make additional information show up when you click on the pins in the map. Check out line 174 in helper.js and the Google Maps API to get started.\n","isFork":true},{"name":"coding_challenges","url":"https://github.com/brianchangdev/coding_challenges","description":null,"lang":["Python","JavaScript"],"readme":"# coding_challenges\n\nThis is Brian's Repo for his coding challenges.","isFork":null},{"name":"freeCodeCamp-Record-Collection","url":"https://github.com/brianchangdev/freeCodeCamp-Record-Collection","description":null,"lang":[],"readme":"# freeCodeCamp-Record-Collection\n\nYou are given a JSON object representing a part of your musical album collection. Each album has several properties and a unique id number as its key. Not all albums have complete information.\n\nWrite a function which takes an album's id (like 2548), a property prop (like \"artist\" or \"tracks\"), and a value (like \"Addicted to Love\") to modify the data in this collection.\n\nIf prop isn't \"tracks\" and value isn't empty (\"\"), update or set the value for that record album's property.\n\nYour function must always return the entire collection object.\n\nThere are several rules for handling incomplete data:\n\nIf prop is \"tracks\" but the album doesn't have a \"tracks\" property, create an empty array before adding the new value to the album's corresponding property.\n\nIf prop is \"tracks\" and value isn't empty (\"\"), push the value onto the end of the album's existing tracks array.\n\nIf value is empty (\"\"), delete the given prop property from the album.\n\n\n    var collection = {\n    \"2548\": {\n      \"album\": \"Slippery When Wet\",\n      \"artist\": \"Bon Jovi\",\n      \"tracks\": [ \n        \"Let It Rock\", \n        \"You Give Love a Bad Name\" \n      ]\n    },\n    \"2468\": {\n      \"album\": \"1999\",\n      \"artist\": \"Prince\",\n      \"tracks\": [ \n        \"1999\", \n        \"Little Red Corvette\" \n      ]\n    },\n    \"1245\": {\n      \"artist\": \"Robert Palmer\",\n      \"tracks\": [ ]\n    },\n    \"5439\": {\n      \"album\": \"ABBA Gold\"\n    }\n      };\n      // Keep a copy of the collection for tests\n      var collectionCopy = JSON.parse(JSON.stringify(collection));\n      \nSOLUTION!:      \n      \n      // Only change code below this line\n      function updateRecords(id, prop, value) {\n      // if property is not tracks and value is NOT empty\n      if (prop != \"tracks\" && value !== \"\"){\n      // update or set the value for the collection object's album [id] property [prop] \n      collection[id][prop] = value;\n      \n      // if property is \"tracks\" and value isnt empty  \n      } else if (prop === \"tracks\" && value !== \"\"){\n      // if property is \"tracks\" BUT album doesnt have tracks property (nested if statement)\n        // check to see if that album from collection object DOES NOT has a property named \"tracks\"\n      if (!collection[id].hasOwnProperty(\"tracks\")){\n        // if it does not then create an empty array\n      collection[id][prop] = [];\n        // then push the new value to album's corresponding property\n      collection[id][prop].push(value);\n      }  \n      // (outer if statement) push value into end of album's existing tracks array\n      collection[id][prop].push(value);\n      // otherwise since value is empty, delete the given prop from album\n      } else {\n      delete collection[id][prop];\n      }\n      \n      return collection;\n      }\n      \n      // Alter values below to test your code\n      updateRecords(5439, \"artist\", \"ABBA\");\n","isFork":null},{"name":"Coderbyte-Challenge-Palindrome","url":"https://github.com/brianchangdev/Coderbyte-Challenge-Palindrome","description":null,"lang":["JavaScript"],"readme":"# Coderbyte-Challenge-Palindrome\n\nPalindrome                                                                          \n Using the JavaScript language, have the function Palindrome(str) take the str       \n parameter being passed and return the string true if the parameter is a palindrome, \n (the string is the same forward as it is backward) otherwise return the string     \n false. For example: \"racecar\" is also \"racecar\" backwards. Punctuation and numbers  \n will not be part of the string.                                                 \n","isFork":null},{"name":"Coder-Byte-Alphabet-Soup","url":"https://github.com/brianchangdev/Coder-Byte-Alphabet-Soup","description":null,"lang":[],"readme":"# Coder-Byte-Alphabet-Soup\n\nHave the function AlphabetSoup(str) take the str string parameter being passed \nand return the string with the letters in alphabetical order \n(ie. hello becomes ehllo). Assume numbers and punctuation symbols will not be \nincluded in the string.\n\n    function alphabetSoup(str){\n      var newStr = str.split('').sort().join('');\n      return newStr;\n\n    }\n    console.log(alphabetSoup(\"hello\"));\n","isFork":null},{"name":"Coder-Byte-Vowel-Count","url":"https://github.com/brianchangdev/Coder-Byte-Vowel-Count","description":null,"lang":[],"readme":"# Coder-Byte-Vowel-Count\n\nUsing the JavaScript language, have the function VowelCount(str) take the str       \nstring parameter being passed and return the number of vowels the string contains   \n(ie. \"All cows eat grass\" would return 5). Do not count y as a vowel for this       \nchallenge\n\n// go through string and check for vowels\n// if vowel, then add to count\n// return number of count\n\n    function VowelCount(str){\n    var vowel = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    var count = 0;\n      for(var i = 0; i < vowel.length; i++){\n      for(var j = 0; j < str.length; j++){\n        if(vowel[i] == str[j]){\n\t       count += 1;\n        }\n      }   \n    }\n\t  return count;\n    }\n    console.log(VowelCount(\"hello my name is\"));\n    \n/////////////////////////////////\n\nRegEx solution using .test() method\n// The test() method executes a search for a match between a regular expression and a specified string.\n// Returns true or false.\n\n    function VowelCount(str){\n      var letters = str.split('');\n      var count = 0;\n      for(var i = 0; i < letters.length; i++){\n        if(/[aeiou]/.test(letters[i])){\n\t        count += 1;\n        }\n      }\n      return count;\n    }\n    console.log(VowelCount(\"All cows eat grass\"));\n\n\n","isFork":null},{"name":"coder_byte_time_convert_challenge","url":"https://github.com/brianchangdev/coder_byte_time_convert_challenge","description":null,"lang":[],"readme":"# coder_byte_time_convert_challenge\n\n/* Time Convert                                                                       \nUsing the JavaScript language, have the function TimeConvert(num) take the num      \nparameter being passed and return the number of hours and minutes the parameter     \nconverts to (ie. if num = 63 then the output should be 1:3). Separate the number    \nof hours and minutes with a colon. */                                               \n \n// steps to solve challenge\n// 1. convert num to hours as a whole number\n// 2. get minutes of the num by getting remainder of time after hour\n// 3. return output format of hours : minutes\n","isFork":null},{"name":"Coder-Byte-Check-Nums","url":"https://github.com/brianchangdev/Coder-Byte-Check-Nums","description":null,"lang":[],"readme":"# Coder-Byte-Check-Nums\n\n/* Question: Have the function CheckNums(num1,num2) take both parameters being \npassed and return the string true if num2 is greater than num1, otherwise return \nthe string false. If the parameter values are equal to each other then return\nthe string -1. */\n\n    function checkNums(num1,num2){\n     if(num2 > num1){\n\t    return \"true\";\n     }else if(num1 == num2){\n\t    return \"-1\";\n     }else{\n\t    return false;\n      }\n    }\n    console.log(checkNums(1,5));\n","isFork":null},{"name":"Coder-Byte-Simple-Symbols","url":"https://github.com/brianchangdev/Coder-Byte-Simple-Symbols","description":null,"lang":[],"readme":"# Coder-Byte-Simple-Symbols\n\n/* Using the JavaScript language, have the function SimpleSymbols(str) take the str \nparameter being passed and determine if it is an acceptable sequence by either \nreturning the string true or false. The str parameter will be composed of + and = \nsymbols with several letters between them (ie. ++d+===+c++==a) and for the string \nto be true each letter must be surrounded by a + symbol. So the string to the left\nwould be false. The string will not be empty and will have at least one letter. */\n\nRegEx solution:\n\n\n    function SimpleSymbols(str){\n    // takes a string, extracts its letters using regex\n    var letters = str.match(/[a-z]/ig);\n    // takes a string, extracts acceptable 'true' sequence of: \"+letter+\"\n    var matches = str.match(/\\+[a-z]\\+/ig);\n    // If the string is empty or there are no matches, return false\n    // \"!\" indicates whether a statement can evaluate to false\n    if (! str.length || ! matches){\n\t    return false;\n      }\n      // if there are as many letters as matches, return true, else return false.\n\t  if (letters.length == matches.length){\n\t      return true;\n      }else{\n      return false;\n      }\n    }\n      console.log(SimpleSymbols(\"++d+===+c++==a\"));\n      // should return true\n\n","isFork":null},{"name":"Word-Count-Challenge","url":"https://github.com/brianchangdev/Word-Count-Challenge","description":"Write a program that given a phrase can count the occurrences of each word in that phrase.” My code needs to return an object that has one  property for each word in the phrase, and each property’s value should contain  the word count.","lang":[],"readme":"# Word-Count-Challenge\nWrite a program that given a phrase can count the occurrences of each word in that phrase.” My code needs to return an object that has one  property for each word in the phrase, and each property’s value should contain  the word count.\n// input: \"one fish two fish red fish blue fish\"\n// output should be: var expectedCounts = { one: 1, fish: 4, two: 1, red: 1, blue: 1 };\n\n\n    var input = \"one fish two fish red fish blue fish\";\n\n    var wordArray = input.split(/\\s+/);\n    var wordCounts = {};\n\n    for(var i = 0; i < wordArray.length; i++){\n       var word = wordArray[i];\n\n    // ! returns whether the statement can evaluate to false\n    // if word is not already a property in wordCounts object, add 1\n     if(!wordCounts[word]) {\n         wordCounts[word] = 1;\n         } else { \n         wordCounts[word]++;\n\t   }\n    }\n      console.log(wordCounts);\n","isFork":null},{"name":"Coderbyte-Challenge-Simple-Adding","url":"https://github.com/brianchangdev/Coderbyte-Challenge-Simple-Adding","description":"Have the function SimpleAdding(num) add up all the numbers from 1 to num. For the test cases, the parameter num will be any number from 1 to 1000. ","lang":[],"readme":"# Coderbyte-Challenge-Simple-Adding\nHave the function SimpleAdding(num) add up all the numbers from 1 to num. For the test cases, the parameter num will be any number from 1 to 1000. \n\n\n    function SimpleAdding(num) { \n    var counter = 0;\n    // if 1 is less than num, then do whatever is inside for loop, if 2 is less than num, \" \" etc.\n    for(var i = 1; i <= num; i++){\n    // add 1 to the counter variable\n    // counter which is now 1, will now have to add 2\n    // 1 = 1 + 2\n      counter += i;\n    // \n    }\n    return counter;\n    }\n   \n","isFork":null},{"name":"Coderbyte-Challenge-Longest-Word","url":"https://github.com/brianchangdev/Coderbyte-Challenge-Longest-Word","description":"Have the function LongestWord(sen) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty. ","lang":[],"readme":"# Coderbyte-Challenge-Longest-Word\nHave the function LongestWord(sen) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty. \n\nMY SOLUTION: Passed some cases, failed the following\n1. When the input was \"a beautiful sentence^&!\" your output was incorrect.\n2. When the input was \"letter after letter!!\" your output was incorrect.\n3. When the input was \"a confusing /:sentence:/[ this is not!!!!!!!~\" your output was incorrect.\n\n    function LongestWord(sen) { \n    var biggestWord = '';\n    var words = sen.split(' ');\n    words.forEach(function(word){\n       if(word.length > biggestWord.length ){\n           biggestWord = word\n       }\n    });\n    return biggestWord; \n    }\n    \nBest solution: \n    \n      function longestWord(sen){\n    // regex is used to form search pattern and then .replace() to replace those characters in sentence\n    // First paramater of replace is to search\n    // [^A-Za-z] means any character that IS NOT a-z OR A-Z\n    // /g means find all matches\n    // second param is what to replace it with \"\" or empty space, in other words ignore those special characters\n    \n      var words = sen.replace(/[^A-Za-z\\s]/g, \"\").split(\" \");\n      var wordsByDescendingLength = words.sort(function(a, b) {\n      // b.length - a.length sort each word by length in descending order. The first entry in the array is the longest word\n        return b.length - a.length;\n        });\n        // call the first word in array [0] which is the longest\n        return wordsByDescendingLength[0];\n","isFork":null},{"name":"Codebyte-Challenge-First-Factorial","url":"https://github.com/brianchangdev/Codebyte-Challenge-First-Factorial","description":"Have the function FirstFactorial(num) take the num parameter being passed and return the factorial of it (ie. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be between 1 and 18. ","lang":[],"readme":"# Bootcamp Prep: Recursion\n\nRecursion: Calling a function on itself\n\nCoderbyte Challenge: First Factorial\nHave the function FirstFactorial(num) take the num parameter being passed and return the factorial of it (ie. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be between 1 and 18. \n\n\n    function FirstFactorial(num) {\n    // Base case, when num is equal to 0, stop recursion\n    // if you dont have base case, then recursion will go on forever and program will crash.\n      if(num === 0) {\n      return 1;\n      }\n    // this is recursive case\n    // it will run for all other conditions except when num is equal to 0\n    return num * FirstFactorial(num - 1);\n    }\n\nTermination condition: base case is a form of termination condition. However what if user input is not covered by base case? Must use additional condition as back up.\n\n    function factorial(n) {\n    if(n < 0) {\n    // termination condition to prevent infinite recursion\n       return;\n    }\n    if(n===0){\n    // base case\n       return 1;\n    }\n    // recursive case\n       return n * factorial(n-1);\n    }\n    factorial(-1);\n    factorial(5);\n    \n","isFork":null},{"name":"The-Array-filter-method","url":"https://github.com/brianchangdev/The-Array-filter-method","description":"given an array of stocks, select only those with the price larger than a certain value","lang":[],"readme":"# The-Array-filter-method\ngiven an array of stocks, select only those with the price larger than a certain value\nfilter is great when you want to apply test function to every item in array and create a new array with only those that pass the test\n\nFunction that demonstrates what the filter method does (a lot code!)\n\n    // 1. create function that accepts an array of stocks and min price\n    function getStocksOver(stocks, minPrice){\n    // 4. create new array to hold all of results for those stocks larger or equal to min price\n    var results = [];\n    // 5. call forEach method to call once for each stock in array\n    stocks.forEach(function(stock){\n    // if stock price is greater than or equal to min price, push into results array\n    // notice getStocksOver does not modify, it adds into a new array.\n        if (stock.price >= minPrice) {  \n        results.push(stock);\n      }\n    });\n        return results;\n      }\n    // 2. new array of only those stocks that are expensive\n    var expensiveStocks = getStocksOver(\n      [\n      { symbol: \"LL\", price: 220.22, volume: 24333},\n      { symbol: \"DIS\", price: 155.12, volume: 35253},\n      {symbol: \"APL\", price: 189.54, volume: 88744},\n    ],\n    190.00);\n    // 3. log only expensive stocks to the console\n    console.log(JSON.stringify(expensiveStocks));\n    \nIs there a shorter way? YES!\n\nUse the filter method! how does it work?\n\n    // filter method accepts a function called a \"predicate\", which accepts a value, returns true or false\n    // mimics above\n    Array.prototype.filter = function(predicate){\n    var results = [];\n    // call forEach on this or array, filters method on array, run operation on each item in array \n    this.forEach(function(item) {\n      // if true, add to results\n      if (predicate(item)) {\n        results.push(item);\n      }\n    });\n    return results;\n    };\n    \nNow apply it to previous function to make it shorter\n\n    function getStocksOver(stocks, minPrice){\n      // pass in predicate function\n        return stocks.filter(function(stock){\n      // returns true or false depending on whether or not to keep stock\n        return stock.price >= minPrice;\n      });\n    }\n    //  new array of only those stocks that are expensive\n    var expensiveStocks = getStocksOver(\n    [\n      { symbol: \"LL\", price: 220.22, volume: 24333},\n      { symbol: \"DIS\", price: 155.12, volume: 35253},\n      {symbol: \"APL\", price: 189.54, volume: 88744},\n    ],\n    190.00);\n\n    // log only expensive stocks to the console\n    console.log(JSON.stringify(expensiveStocks));\n\n","isFork":null},{"name":"Code-Wars-All-None-Any","url":"https://github.com/brianchangdev/Code-Wars-All-None-Any","description":null,"lang":[],"readme":"# Code-Wars-All-None-Any\n\nDescription:\n\nAs a part of this Kata, you need to create three functions that one needs to be able to call upon an array:\n\nall\n\nThis function returns true only if the predicate supplied returns true for all the items in the array\n\n[1, 2, 3].all(isGreaterThanZero) => true\n[-1, 0, 2].all(isGreaterThanZero) => false\nnone\n\nThis function returns true only if the predicate supplied returns false for all the items in the array\n\n[-1, 2, 3].none(isLessThanZero) => false\n[-1, -2, -3].none(isGreaterThanZero) => true\nany\n\nThis function returns true if at least one of the items in the array returns true for the predicate supplied\n\n[-1, 2, 3].any(isGreaterThanZero) => true\n[-1, -2, -3].any(isGreaterThanZero) => false\nYou do not need to worry about the data supplied, it will be an array at all times.\n\n\nSOLUTION:\n\n    // \"p\" refers the function that is being passed (AKA isGreaterThanZero or isLessThanZero)\n    // \"this\" refers to the array\n    // filter creates a new array and iterates through entire array\n    Array.prototype.all = function (p) {\n      // get array(this) and call filter which will create a new array based on \"p\"(function isGreaterThanZero & isLessThanZero)\n      // Are all numbers in [1,2,3] greater than zero? => true \n      // Are all numbers in [-1,0,2] less than zero? => false\n    return this.filter(p).length == this.length;\n    };\n    Array.prototype.none = function (p) {\n      return this.filter(p).length == 0;\n    };\n    Array.prototype.any = function (p) {\n      return this.filter(p).length > 0;\n     };\n","isFork":null},{"name":"Code-Wars-Double-Char","url":"https://github.com/brianchangdev/Code-Wars-Double-Char","description":null,"lang":[],"readme":"# Code-Wars-Double-Char\n\nDescription:\nGiven a string, you have to return a string in which each character (case-sensitive) is repeated once.\n\ndoubleChar(\"String\") ==> \"SSttrriinngg\"\n\ndoubleChar(\"Hello World\") ==> \"HHeelllloo  WWoorrlldd\"\n\ndoubleChar(\"1234!_ \") ==> \"11223344!!__  \"\n\n\n\n\n\n\nMY SOLUTION:\n\n    function doubleChar(str) {\n      var newStr = '';\n      for (var i = 0; i < str.length; i++) {\n        newStr += str.charAt(i) + str.charAt(i);\n      }\n      return newStr;\n    };\n    \n    \nBEST PRACTICE SOLUTION:\n\n    function doubleChar(str) {\n      var newStr = '';\n      for (var i = 0; i < str.length; i++){\n        newStr += str[i] + str[i];\n      }\n      return newStr;\n    };\n","isFork":null},{"name":"Code-Wars-Stringy-Strings","url":"https://github.com/brianchangdev/Code-Wars-Stringy-Strings","description":null,"lang":[],"readme":"# Code-Wars-Stringy-Strings\nDescription:\n\nwrite me a function stringy that takes a size and returns a string of alternating '1s' and '0s'.\n\nthe string should start with a 1.\n\na string with size 6 should return :'101010'.\n\nwith size 4 should return : '1010'.\n\nwith size 12 should return : '101010101010'.\n\nThe size will always be positive and will only use whole numbers. \n\n\n\nSOLUTION:\n\n    function stringy(size) {\n      var str = '';\n      \n      for (var i = 1; i <= size; i++) {\n      // loop by starting with 1 until you get to size number\n        str = str + i%2  \n      // if 1 is less than or equal to size, string = str + 1 % 2, which is 1  \n      // if 2 is less than or equal to size, string = str + 1 % 2, which is 0  \n      }\n      return str;\n    }\n","isFork":null},{"name":"Codewars-Sum-of-Positive","url":"https://github.com/brianchangdev/Codewars-Sum-of-Positive","description":"You get an array of numbers, return the sum of all of the positives ones.","lang":[],"readme":"# Codewars-Sum-of-Positive\n// You get an array of numbers, return the sum of all of the positives ones.\n// Example [1,-4,7,12] => 1 + 7 + 12 = 20\n\n    function positiveSum(arr) {\n     var sum = 0;\n     for(var i = 0; i < arr.length; i++) {\n       if(arr[i] > 0) {\n        sum += arr[i];\n      }\n     }\n    return sum;\n    }\n","isFork":null},{"name":"first-lab-ruby-learn-cli-osx-q-000","url":"https://github.com/brianchangdev/first-lab-ruby-learn-cli-osx-q-000","description":null,"lang":["Ruby"],"readme":"# First Lab Ruby Learn Cli Osx\n\n## Objectives\n\n1. Open a lab by clicking \"Open\" on this page on Learn.co.\n2. Run the lab's tests with the `learn` CLI command.\n3. Make a change to your local copy of this lab.\n4. Pass the tests using the `learn` CLI command.\n5. Submit the passing lab with the `learn submit` CLI command.\n\n## Overview\n\nNow that you've learned all about how to work on Lab's on Learn, we're going to practice using the Learn CLI to work on this very lab. To complete this lab you need to:\n\n1. Open the lab with the Learn CLI\n2. Make a change to the `edit-me.txt` file or add a new file.\n3. Submit the lab with the Learn CLI\n\n## Instructions\n\nThis lab is just about practicing the lab workflow on Learn using the `learn` CLI.\n\n1. Click on the \"Open\" link on the lab toolbar above.\n\n  ![Open Button](https://dl.dropboxusercontent.com/s/6hmrbrtcf0gssev/2015-09-30%20at%207.11%20PM.png)\n\n  After you click on this, your Terminal should popup and open the lab locally by forking it on GitHub, cloning your fork, and `cd`ing into the lab's directory, and opening your editor.\n\n  ![Learn Open](http://learn-co-videos.s3.amazonaws.com/learn-co-orientation/open-from-learn-co.gif)\n\n2. After the lab is opened, your terminal should be in the lab's directory and your text editor should be opened.\n\n  ![Work mode](https://dl.dropboxusercontent.com/s/je5pazo2edy5cwl/2015-09-30%20at%207.34%20PM.png)\n\n  This setup, a terminal in the lab's directory and the lab directory open in an editor like Sublime or Atom, that's the state you want to be in when working on a lab on Learn. It means you're ready.\n\n3. From your terminal, run the test suite by typing `learn` and hitting enter. You'll see something simlar to:\n\n  ![Failing Test](https://dl.dropboxusercontent.com/s/0ik01a1urmuw7o6/2015-09-30%20at%207.46%20PM.png)\n\n  *Note: My prompt is `// ♥`, yours might be different. You'll see a terminal prompt generally represented by a `$`. That indicates you're suppose to be typing in terminal.*\n\n  You can see your test is currently failing, which is fine, we haven't done any work yet, so it makes sense.\n\n  The failure reads: `Make sure you have added a new file or edited edit-me.txt`\n\n4. To pass this lab, either make any change to the content of `edit-me.txt` or create a new file.\n\n  You can open `edit-me.txt` and you'll see it is currently empty. Add anything to that file, save the file, and then run `learn`, everything should pass.\n\n  You can also pass this lab by creating a new file. From Terminal, you can run `touch new-file` to create a new file. Or use your text editor to create a new file and save it. If a new file is added to this lab, when you run `learn`, your tests should pass.\n\n  ![Passing Tests](https://dl.dropboxusercontent.com/s/wu3l4a53w0ey9rm/2015-10-07%20at%2011.16%20PM.png)\n\n5. Once your local tests are passing, you can submit this lab by running `learn submit` from your terminal.\n\n  ![learn submit](https://learn-co-videos.s3.amazonaws.com/learn-co-orientation/learn-submit-cli-osx.gif)\n\n  You should see this lab pass on Learn.co, congratulations!\n","isFork":true},{"name":"CoderByte-Challenge-Letter-Changes","url":"https://github.com/brianchangdev/CoderByte-Challenge-Letter-Changes","description":null,"lang":[],"readme":"# CoderByte-Challenge-Letter-Changes\n\n// Using the JavaScript language, have the function LetterChanges(str) take the str parameter being passed and modify it using the \n// following algorithm. Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z becomes a).  // Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string. \n\n    function LetterChanges(str) { \n    // first establish which letters you will be replacing using a RegEx\n      var alphabet = /[a-zA-Z]/g;\n    // a function below to change letters for the next one in alphabet (see line 17)\n    // create a new string that will take str and replace alphabet with next letter after\n    var newStr = str.replace(alphabet, replaceLetter);\n     // now do same with vowels  \n    var vowel = /[aeiou]/g;\n    // now to uppercase all vowels\n    newStr = newStr.replace(vowel, replaceVowel);\n\n     return newStr; \n    }\n\n     // functions below relate to above\n    function replaceLetter(match){\n     // because next letter of z needs to loop back to a\n     if(match === 'z'){\n     return 'a'\n     }\n     // create variable that will default the char to its ascii number\n     // example: 'ABC'.charCodeAt(0); // returns 65\n     \n      var ascii = match.charCodeAt(0);\n      \n       // and return calling String method add 1 to the ascii number to move to next leter in alphabet\n       // example: if match is a, then var ascii is 65, + 1 = 66 or b\n       // fromCharCode() is a static method of String, you always use it as String.fromCharCode()\n       // fromCharCode() returns a string object based on ascii values\n       \n      return String.fromCharCode(ascii + 1);\n      }\n    // function to replace vowels relating to above\n     function replaceVowel(match){\n    // if vowel then change to uppercase\n    return match.toUpperCase(); \n    }\n  \n","isFork":null},{"name":"Code-Wars-1-Reverse-Letters-in-Words","url":"https://github.com/brianchangdev/Code-Wars-1-Reverse-Letters-in-Words","description":null,"lang":[],"readme":null,"isFork":null},{"name":"Numbers-and-ASCII-challenge","url":"https://github.com/brianchangdev/Numbers-and-ASCII-challenge","description":"Write a single chain of JavaScript methods that we can execute on the following ASCII array, to convert it into a sentence.","lang":["JavaScript"],"readme":"# Numbers-and-ASCII-challenge\nWrite a single chain of JavaScript methods that we can execute on the following ASCII array, to convert it into a sentence.\nvar ascii = [73, 32, 115, 112, 101, 97, 107, 32, 105, 110, 32, 110, 117, 109, 98, 101, 114, 115]\nSo you would do something like:\n\nascii.function1(..).function2(..).function3(..) ..\nand the result would be the numbers above converted form ASCII to text (Note: you can only use JS built-in functions for this!)\n","isFork":null},{"name":"Responsive-Navbar-Mockup","url":"https://github.com/brianchangdev/Responsive-Navbar-Mockup","description":"Responsive Navbar mockup: Bootstrap nav components with dropdowns","lang":["HTML","CSS"],"readme":"# Responsive-Navbar-Mockup\nIncluding: Bootstrap nav components with dropdowns\nThe navbar should be responsive. On a small screen, it should collapse into a hamburger menu\n","isFork":null},{"name":"Widget-Mockup-using-Bootstrap","url":"https://github.com/brianchangdev/Widget-Mockup-using-Bootstrap","description":"Widget Mockup using bootstrap grid layouts and buttons","lang":["HTML","CSS"],"readme":"# Widget-Mockup-using-Bootstrap\nWidget Mockup using bootstrap grid layouts and buttons\n\n\n\nTest layout on a mobile screen to make sure the products stack vertically with each product taking up the whole horizontal space on the mobile screen.\nUse Bootstrap glyphicons to find a good icon for the Add To Cart button\nUse an HTML5 number field for the quantity\n","isFork":null},{"name":"Counter-Function-JS","url":"https://github.com/brianchangdev/Counter-Function-JS","description":null,"lang":["JavaScript"],"readme":"# Counter-Function-JS\n\nWrite a JavaScript function that takes a string argument and calculates the following:\n\nNumber of words\nNumber of letters\nNumber of spaces\nTotal number of characters\nAverage word length\nTest case\n\nsuperCounter(\"Count me in!\");\nwould count 3 words, 9 letters, 2 spaces, 12 characters, avg word length of 3, and 2 spaces.\n\nReturn output as a single object, and don't use any libraries.\n\nExample output:\n\nconsole.log( superCounter(\"Count me in!\" );\n// outputs {\"words\": 3, \"letters\": 9, \"spaces\": 2, \"chars\": 12, \"avgLength\": 3, \"spaces\": 2}\n","isFork":null},{"name":"reverse-words-in-place-JS-function","url":"https://github.com/brianchangdev/reverse-words-in-place-JS-function","description":null,"lang":["JavaScript"],"readme":"# reverse-words-in-place-JS-function\n\nWrite a JavaScript function that takes one argument that is a sentence (multiple words) and returns a new sentence where all words are reversed, but kept in the same order as the original sentence.\n\nTest Case\n\nwordsReverser(\"This is fun, hopefully.\");\nWould return:\n\n\"sihT si nuf, yllufepoh.\"\n","isFork":null},{"name":"swapcase-JS-function","url":"https://github.com/brianchangdev/swapcase-JS-function","description":null,"lang":["JavaScript"],"readme":"# swapcase-JS-function\n\nWrite a JavaScript function that would swap the case of each character in the string you pass to it as an argument.\n\nTest Case\n\nswapCase(\"Life is 10% what happens to you, and 90% of how you REACT to it\");\nWould return:\n\n\"lIFE IS 10% WHAT HAPPENS TO YOU, AND 90% OF HOW YOU react TO IT\"\n","isFork":null},{"name":"palindrome-map","url":"https://github.com/brianchangdev/palindrome-map","description":null,"lang":["JavaScript"],"readme":"# palindrome-map\n\nA palindrome is a word that reads the same way forward and backwards (i.e. racecar, reviver, rotator).\n\nWrite a JS function that takes a string argument and returns an array of true/false values that map to whether the word in that position is palindrome or not.\n\nUse the .map function in your solution and don't use any loops.\n\nTest Case\n\npalindromicMap(\"stash and pop on this level\")\nWould return\n\n[false, false, true, false, false, true]\n","isFork":null},{"name":"jQuery-calculator","url":"https://github.com/brianchangdev/jQuery-calculator","description":null,"lang":["HTML","JavaScript","CSS"],"readme":"# jQuery-calculator","isFork":null},{"name":"jQuery-and-the-DOM-Color-Inverser","url":"https://github.com/brianchangdev/jQuery-and-the-DOM-Color-Inverser","description":"When button is clicked, the background color of the <div> elements will change randomly.","lang":["HTML","JavaScript"],"readme":"# jQuery-and-the-DOM-Color-Inverser\nWhen button is clicked, the background color of the &lt;div> elements will change randomly.\n","isFork":null},{"name":"Spoon-Knife","url":"https://github.com/brianchangdev/Spoon-Knife","description":"This repo is for demonstration purposes only.","lang":["HTML","CSS"],"readme":"### Well hello there!\n\nThis repository is meant to provide an example for *forking* a repository on GitHub.\n\nCreating a *fork* is producing a personal copy of someone else's project. Forks act as a sort of bridge between the original repository and your personal copy. You can submit *Pull Requests* to help make other people's projects better by offering your changes up to the original project. Forking is at the core of social coding at GitHub.\n\nAfter forking this repository, you can make some changes to the project, and submit [a Pull Request](https://github.com/octocat/Spoon-Knife/pulls) as practice.\n\nFor some more information on how to fork a repository, [check out our guide, \"Forking Projects\"\"](http://guides.github.com/overviews/forking/). Thanks! :sparkling_heart:\n","isFork":true},{"name":"initials.c","url":"https://github.com/brianchangdev/initials.c","description":"CS50 problem set 2","lang":[],"readme":null,"isFork":null},{"name":"fakeproject","url":"https://github.com/brianchangdev/fakeproject","description":null,"lang":[],"readme":null,"isFork":null}]}
,{"match":1,"linkedin_id":213948881,"gid":16658,"git_name":"Brian Chang","git_login":"eviltoylet","git_location":"Seattle, WA","git_company":null,"git_org":[],"git_email":null,"git_blog":"http://www.brianchang.info","git_websiteUrl":"http://www.brianchang.info","github_url":"https://github.com/eviltoylet","bio":null,"repos":[{"name":"reactabular","url":"https://github.com/reactabular/reactabular","description":"A framework for building the React table you need (MIT)","lang":["JavaScript","CSS","HTML"],"readme":"[![Join the chat at https://gitter.im/reactabular/reactabular](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/reactabular/reactabular) [![build status](https://secure.travis-ci.org/reactabular/reactabular.svg)](http://travis-ci.org/reactabular/reactabular) [![bitHound Score](https://www.bithound.io/github/reactabular/reactabular/badges/score.svg)](https://www.bithound.io/github/reactabular/reactabular) [![codecov](https://codecov.io/gh/reactabular/reactabular/branch/master/graph/badge.svg)](https://codecov.io/gh/reactabular/reactabular)\n[![OpenCollective](https://opencollective.com/reactabular/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/reactabular/sponsors/badge.svg)](#sponsors)\n\n# Reactabular - A framework for building the React table you need\n\nReactabular has been designed to be extensible. Rather than implementing a lot of functionality in its core, it provides extension points. You can, for instance, customize rendering on cell level. It is possible to implement functionality, such as search, pagination, sorting, and inline editing, through composition. The library includes a variety of utilities for this even though you may use third party ones as well.\n\nBy default Reactabular operates using a column and a data definition. It doesn't care where those come from. It just renders the table for you. This means Reactabular will fit right into your current data architecture. It doesn't constrain it in any manner.\n\nThe chosen approach pushes a lot of complexity out of the core. As a result it might take more code to achieve certain functionalities. This is the price of flexibility. And that's the primary design goal of Reactabular.\n\n> If you want to learn more about React, read [SurviveJS - Webpack and React](http://survivejs.com/).\n\n## Example\n\nThe following example illustrates the approach used by Reactabular:\n\n```jsx\n/*\nimport * as Table from 'reactabular-table';\n*/\n\nconst rows = [\n  {\n    id: 100,\n    name: 'John',\n    tools: {\n      hammer: true\n    },\n    country: 'fi'\n  },\n  {\n    id: 101,\n    name: 'Jack',\n    tools: {\n      hammer: false\n    },\n    country: 'dk'\n  }\n];\nconst countries = {\n  fi: 'Finland',\n  dk: 'Denmark'\n};\n\nconst columns = [\n  {\n    property: 'name',\n    header: {\n      label: 'Name',\n      transforms: [\n        label => ({\n          onClick: () => alert(`clicked ${label}`)\n        })\n      ]\n    }\n  },\n  {\n    property: 'tools',\n    header: {\n      label: 'Active',\n      transforms: [\n        label => ({\n          onClick: () => alert(`clicked ${label}`)\n        })\n      ]\n    },\n    cell: {\n      formatters: [\n        tools => tools.hammer ? 'Hammertime' : 'nope'\n      ]\n    }\n  },\n  {\n    property: 'country',\n    header: {\n      label: 'Country',\n      transforms: [\n        label => ({\n          onClick: () => alert(`clicked ${label}`)\n        })\n      ]\n    },\n    cell: {\n      formatters: [\n        country => countries[country]\n      ]\n    }\n  },\n];\n\n<Table.Provider\n  className=\"pure-table pure-table-striped\"\n  columns={columns}\n>\n  <Table.Header />\n\n  <Table.Body rows={rows} rowKey=\"id\" />\n</Table.Provider>\n```\n\n## Available Packages\n\nThe following image shows roughly what packages are available. You will need to install them individually based on your needs. It is possible to use packages beyond these, but the ones listed below are maintained within the Reactabular organization:\n\n![Reactabular packages](./images/overall.png)\n\n## Testimonials\n\n> If you've struggled with other React table components, you'll see why this one is the best! - [Tim Dorr](https://twitter.com/timdorr/status/750346565374455808)\n\n---\n\n> It’s not a regular table component it’s a whole framework to work with tables: sorting, drag’n’drop, filtering, etc. And it’s easy to change every part if you need something specific. - [Artem Sapegin](http://sapegin.me/)\n\n---\n\n> Great work with reactabular! Best grid library I've seen in React and tried many of them. - [Piotr Zmudzinski](https://github.com/reactabular/treetabular/issues/1#issue-204945773)\n\n---\n\nIf you are using Reactabular and want to endorse it, [let me know](https://github.com/reactabular/reactabular/issues/new).\n\n## Sponsors\n\n[![SurviveJS](./images/survivejs.png)](http://survivejs.com/) [![Kenandy](./images/kenandy.png)](http://www.kenandy.com/)\n\n[Become a sponsor](https://opencollective.com/reactabular#sponsor) and get your logo on our README on Github with a link to your site.\n\n[![](https://opencollective.com/reactabular/sponsor/0/avatar.svg)](https://opencollective.com/reactabular/sponsor/0/website)\n[![](https://opencollective.com/reactabular/sponsor/1/avatar.svg)](https://opencollective.com/reactabular/sponsor/1/website)\n\n## Backers\n\n[Become a backer](https://opencollective.com/reactabular#backer) and get your image on our README on Github with a link to your site.\n\n[![alt text](https://opencollective.com/reactabular/backer/0/avatar.svg)](https://opencollective.com/reactabular/backer/0/website)\n[![alt text](https://opencollective.com/reactabular/backer/1/avatar.svg)](https://opencollective.com/reactabular/backer/1/website)\n\n## License\n\nMIT. See LICENSE for details.\n","isFork":null},{"name":"abot","url":"https://github.com/eviltoylet/abot","description":"Abot makes it easy and fun to build your own digital assistant, and we include everything you need to get started.","lang":["Go","CSS","HTML","JavaScript","Shell","PLSQL"],"readme":"# Abot [![GoDoc](http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square)](https://godoc.org/github.com/itsabot/abot) [![Travis CI](https://img.shields.io/travis/itsabot/abot.svg?style=flat-square)](https://travis-ci.org/itsabot/abot)\n\n[Website](https://www.itsabot.org) |\n[Getting Started](https://github.com/itsabot/abot/wiki/Getting-Started) |\n[Contributing](https://github.com/itsabot/abot/wiki/How-to-Contribute) |\n[Mailing List](https://groups.google.com/forum/#!forum/abot-discussion)\n \nAbot (pronounced *Eh-Bot*, like the Canadians) is a digital assistant framework\nthat enables anyone to easily build a digital assistant similar to Apple's Siri,\nMicrosoft's Cortana, Google Now, or Amazon Alexa. Further, Abot supports a\nhuman-aided training backend enabling anyone to build services like Facebook M.\n\nUnlike those proprietary systems, Abot is open-sourced and extensible. By\nproviding an extensible platform onto which anyone can easily add functionality,\nAbot is the first A.I. framework that aims to be available everywhere and—\nultimately—to do everything.\n\n**Note: This is being developed heavily.** There may be breaking API changes\nin each release until we hit v1.0. Follow our progress on the\n[Roadmap](https://github.com/itsabot/abot/wiki/Roadmap).\n\n## Installation\n\n> **Dependencies**: Abot requires that the following programs are installed:\n>\n> * [Go](https://golang.org/dl/) >= 1.6\n> * [PostgreSQL](http://www.postgresql.org/download/) >= 9.5\n\nFetch Abot via `go get`\n\n```\n$ go get github.com/itsabot/abot\n$ cd $GOPATH/src/github.com/itsabot/abot\n```\n\nRun the setup script, passing in your Postgres credentials/host if needed.\n\n```\n$ cmd/setup.sh [username[:password]@host[:port]]\n```\n\nIf you don't pass anything to the script, the Postgres parameters will default\nto `host = 127.0.0.1`, `port = 5432`, and `username = postgres`.  You may need\nto edit your\n[pg_hba.conf](http://www.postgresql.org/docs/9.5/static/auth-pg-hba-conf.html)\nfile if you want to use this password-less default.\n\nDuring setup, if the `psql` binary is unavailable, the script will skip the\ndatabase setup. To setup the database on an different machine, you can run\n`cmd/dbsetup.sh` on the host that has Postgres / `psql` available. This script\ntakes the same arguments as `cmd/setup.sh`.\n\nOnce the script completes, launch the server\n\n```\n$ abot server\n```\n\nThen visit Abot at `localhost:4200`.\n\n## Usage\n\nFirst configure the plugins you want to import, such as `weather`. Add them\nto your plugin.json like so:\n\n```json\n{\n\t\"Name\": \"abot\",\n\t\"Version\": \"0.1.0\",\n\t\"Dependencies\": {\n\t\t\"github.com/itsabot/plugin_onboard\": \"*\",\n\t\t\"github.com/itsabot/plugin_weather\": \"*\"\n\t}\n}\n```\n\nThen run the following in your terminal to download the plugins:\n\n```bash\n$ abot plugin install\nFetching 2 plugins...\nInstalling plugins...\nSuccess!\n```\n\nThat will download the plugins into your `$GOPATH` and install them into Abot.\nOnce you've installed the plugins, run Abot again: `abot server`. You can use\nthe included Abot console to communicate with Abot locally:\n\n```bash\n$ abot console +13105555555\n> Hi\nHello there!\n```\n\nYou can learn more in our\n[Getting Started](https://github.com/itsabot/abot/wiki/Getting-Started) guide.\n\n## Goals\n\nWe believe that A.I. will impact every business worldwide and dramatically\nchange our lives. While Apple, Google and others rush to build proprietary\ndigital assistants, there's a great need for an open approach that can be made\nto run anywhere and be customized to do anything you need.\n\nAbot enables any person or business to build digital assistants like Siri using\nplugins that are as easy to install and run as WordPress. Soon it'll be as easy\nto leverage A.I. in your business as it is to start a blog or an online store.\nImagine setting up an AI assistant to answer your phones, schedule meetings,\nand book travel for your company in 30 seconds or less. The future's almost\nhere, and Abot's going to lead the way.\n\nWe have a long road ahead of us, but \"nothing ever comes to one that is worth\nhaving except as a result of hard work.\" *-- Booker T. Washington*\n\nFollow our progress on our\n[Roadmap](https://github.com/itsabot/abot/wiki/Roadmap) or learn how you can\nget involved with our\n[Contributor's Guide](https://github.com/itsabot/abot/wiki#contributing).\n\n## License\n\nMIT, a copy of which you can find in the repo.\n\nThe Abot logo is courtesy of\n[Edward Boatman](https://thenounproject.com/edward/) via TheNounProject and\nlicensed via Creative Commons Attribution v3.\n\nThe default plugin icon (puzzle piece) is courtesy of\n[Arthur Shlain](https://thenounproject.com/ArtZ91/) via TheNounProject and\nlicensed via Creative Commons Attribution v3.\n","isFork":true},{"name":"eviltoylet.github.io","url":"https://github.com/eviltoylet/eviltoylet.github.io","description":null,"lang":["HTML","CSS"],"readme":null,"isFork":null},{"name":"pong-js","url":"https://github.com/eviltoylet/pong-js","description":null,"lang":["JavaScript","HTML"],"readme":"# pong-js\n\nIt might be fun to write a rendition of Pong using JavaScript. This is it.\n\nCheck out the work-in-progress demo [here](http://brianchang.info/pong-js/)","isFork":null},{"name":"dumb-it-down","url":"https://github.com/eviltoylet/dumb-it-down","description":null,"lang":["JavaScript"],"readme":"# dumb-it-down\nA bookmarklet that makes the selected text easier to read by \"dumbing it down.\" This means replacing difficult words with\neasier words and removing information deemed unnecessary.\n\nThis is a work-in-progress and currently doesn't do anything.\n\n# Installation\nAdd a bookmark to your bookmarks bar with the URL: \n`javascript:` + contents of `dumb-it-down.js`\n\n# Usage\n1. Select text that you want to dumb down\n2. Click the bookmarklet you made\n\n# More Information\nTo see information about the motivation of this project, please refer to:\n[Lower the Barrier](http://brianchang.info/2016/01/04/lower-the-barrier.html)\n\n# Overall Design\n- Extract out the content from a particular page\n- Perform the replacement of difficult words with easier ones\n- Insert it back into the page","isFork":null},{"name":"react-calendar-widget","url":"https://github.com/eviltoylet/react-calendar-widget","description":null,"lang":["HTML","JavaScript"],"readme":"# react-calendar-widget\n## Introduction\nThis project is for creating a calendar widget using React.\n \n## Usage\nTo use this component:\n```\nvar ReactDOM = require('react-dom');\nvar CalendarWidget = require('react-calendar-widget');\n\nvar setText = function (date) {\n    // code for processing the JavaScript Date object\n};\n\nReactDOM.render(\n    <CalendarWidget onDaySelect={setText}/>,\n    document.getElementById('calendar')\n);\n```\n\n## Optional properties\nThe following properties can be provided.\n- `onDaySelect`: a callback that receives the date that was selected.\n- `range`: a two element array (e.g. `[new Date(), null]`) which contains the start and end dates for which the calendar should be functional. If null is provided, there is no range set.\n\n## Known Issues\n- Year and month navigation shows no visual indication when it is disabled. ","isFork":null},{"name":"jawbone-up-dashboard","url":"https://github.com/eviltoylet/jawbone-up-dashboard","description":null,"lang":["HTML","JavaScript"],"readme":"# Jawbone UP Dashboard\nThe aim of this project is to provide various dashboards for visualizing and analyzing Jawbone UP data. This application is currently in active development and is not ready for general consumption.\n\n## Requirements\nThis application requires the following:\n* Jawbone tracking data in CSV format\n* A modern-browser that supports the HTML5 File API","isFork":null},{"name":"voluntime","url":"https://github.com/eviltoylet/voluntime","description":null,"lang":["JavaScript","CSS"],"readme":"voluntime\n=========\n","isFork":null},{"name":"intellij-raml","url":"https://github.com/eviltoylet/intellij-raml","description":null,"lang":[],"readme":"intellij-raml\n=============\n","isFork":null},{"name":"TransitWP7","url":"https://github.com/kyvok/TransitWP7","description":null,"lang":["C#"],"readme":null,"isFork":null},{"name":"DavidAndMinsi","url":"https://github.com/eviltoylet/DavidAndMinsi","description":"David and Minsi's wedding website","lang":["Ruby","JavaScript","CoffeeScript"],"readme":null,"isFork":null}]}
,{"match":1,"linkedin_id":213941705,"gid":984753,"git_name":"Adewale Adeyemi","git_login":"walea3","git_location":"UK","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/walea3","bio":null,"repos":[{"name":"budd","url":"https://github.com/walea3/budd","description":null,"lang":[],"readme":"# bud","isFork":null},{"name":"x-the-rest","url":"https://github.com/walea3/x-the-rest","description":"X the REST","lang":[],"readme":"# fetch-the-x\nFetch the X\n","isFork":null},{"name":"fetch-the-rest","url":"https://github.com/walea3/fetch-the-rest","description":"Fetch the REST","lang":[],"readme":"# fetch-the-rest\nFetch the REST\n","isFork":null},{"name":"mean-money","url":"https://github.com/walea3/mean-money","description":null,"lang":[],"readme":"mean-money\n==========\n","isFork":null}]}
,{"match":1,"linkedin_id":213939185,"gid":808895,"git_name":"JAMES HERBICK","git_login":"jherbick","git_location":"CHICAGO","git_company":null,"git_org":[],"git_email":null,"git_blog":null,"git_websiteUrl":null,"github_url":"https://github.com/jherbick","bio":null,"repos":[{"name":"Northwestern","url":"https://github.com/jherbick/Northwestern","description":"Code for MS Predictive Analytics Program","lang":["R"],"readme":"Northwestern\n============\n\nCode for MS Predictive Analytics Program\n","isFork":null}]}
]}